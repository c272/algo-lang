'fileTypes' : [
  'ag'
]
'name' : 'Algo'
'patterns' : [
  {
    'include' : '#main'
  }
]
'scopeName' : 'source.Algo'
'uuid' : ''
'repository' : {
  'main' : {
    'patterns' : [
      {
        'match' : '(let)'
        'name' : 'keyword.Algo'
      }
      {
        'begin' : '(//)'
        'beginCaptures' : {
          '1' : {
            'name' : 'comment.Algo'
          }
        }
        'contentName' : 'comment.Algo'
        'end' : '(^(?=.{0,1})(?:|))'
        'endCaptures' : {
          '1' : {
            'name' : 'keyword.Algo'
          }
        }
      }
      {
        'begin' : '(\\")'
        'beginCaptures' : {
          '1' : {
            'name' : 'string.Algo'
          }
        }
        'patterns' : [
          {
            'include' : '#main__2'
          }
        ]
        'end' : '(\\")'
        'endCaptures' : {
          '1' : {
            'name' : 'string.Algo'
          }
        }
      }
      {
        'match' : '(-?[1-9][0-9]*|0)'
        'name' : 'constant.numeric.Algo'
      }
      {
        'match' : '(-?[1-9]*[0-9]\\.[0-9]+)'
        'name' : 'constant.numeric.Algo'
      }
      {
        'match' : '(true|false)'
        'name' : 'constant.other.Algo'
      }
      {
        'match' : '((-?[1-9][0-9]*|0)[\\x{0020}]*/[\\x{0020}]*(-?[1-9][0-9]*|0))'
        'name' : 'constant.numeric.Algo'
      }
      {
        'match' : '(null|let|for|foreach|add|break|continue|at|remove|from|while| in |if|up to|as |enum|library|sf|object|else|import|return|print|disregard|external)'
        'name' : 'keyword.Algo'
      }
      {
        'match' : '(([a-zA-Z_0-9]+\\.[a-zA-Z_0-9]+)+)'
        'name' : 'variable.Algo'
      }
      {
        'match' : '([a-zA-Z_0-9]+)'
        'name' : 'variable.Algo'
      }
      {
        'begin' : '([a-zA-Z_0-9]\\()'
        'beginCaptures' : {
          '1' : {
            'name' : 'none.Algo'
          }
        }
        'patterns' : [
          {
            'include' : '#main__3'
          }
        ]
        'end' : '(\\))'
        'endCaptures' : {
          '1' : {
            'name' : 'none.Algo'
          }
        }
      }
    ]
  }
  'main__1' : {
    'patterns' : [
    ]
  }
  'main__2' : {
    'patterns' : [
      {
        'match' : '(\\\\.)'
        'name' : 'none.Algo'
      }
      {
        'match' : '(.*?(?!\\\\.).)'
        'name' : 'string.Algo'
      }
    ]
  }
  'main__3' : {
    'patterns' : [
      {
        'match' : '(,)'
        'name' : 'none.Algo'
      }
      {
        'match' : '([a-zA-Z_0-9]+)'
        'name' : 'variable.parameter.Algo'
      }
    ]
  }
}
