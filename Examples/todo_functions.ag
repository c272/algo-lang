// Functions for the to-do app in Algo.
// by Larry Tang, 2019

//Import required libraries.
import "core";
import "io";

///////////////////////
// UTILITY FUNCTIONS //
///////////////////////

//Open the to-do notes file.
let getNotes() =
{
    //Get file text.
    let todoText = input.fromFile("todo.txt");

    //Split by line.
    let todoItems = string.split(todoText, "\n");
    let parsedItems = [];

    //For each of the items, convert them to item info.
    for (i in todoItems) 
    {
        let item = todoItems[i];

        //Don't read a blank item.
        if (item == "") { continue; }

        //Not blank, so parse it and add!
        item = string.split(item, "|");
        item = object {
            let id = int(item[0]);
            let text = item[1];
        };
        
        add item to parsedItems;
    }

    return parsedItems;
}

//Get information about a to-do with a given ID.
let getByID(x) =
{
    //Get file.
    let todoItems = getNotes();
    
    //Loop over items.
    foreach (item in todoItems) 
    {
        if (item.id == x) { return item; }
    }

    //Didn't find it :(
    return null;
}

//Create a new note in the to-do notes file.
let createItem(x) =
{
    let todoText = input.fromFile("todo.txt");
    let todoItems = getNotes();
    
    //Get maximum used ID.
    let maxID = 0;
    foreach (item in todoItems)
    {
        if (item.id > maxID)
        {
            maxID = item.id;
        }
    }
    maxID++;

    //Add to todo text.
    todoText += "\n" + maxID + "|" + x;

    //Save todo file.
    output.toFile("todo.txt", todoText);
}

let removeItem(x) =
{
    if (typeof(x) != core.types.Integer)
    {
        return "Invalid type for ID (not integer).";
    }
    
    //Get all notes.
    let notes = getNotes();

    //Enumerate through items, see if any are the right ID.
    let found = -1;
    for (i in notes)
    {
        let note = notes[i];
        if (note.id == x) {
            found = i;
        }
    }

    //Check if it was found.
    if (found == -1)
    {
        return "Invalid note ID (not found).";
    }

    //Remove the note, rewrite the note file.
    remove found in notes;
    let todo = "";
    foreach (note in notes)
    {
        todo += note.id + "|" + note.text + "\n";
    }
    
    output.toFile("todo.txt", todo);
    return "Successfully removed note.";
}
