// Persistent To-Do List in Algo
// by Larry Tang, 2019

//Require the needed libraries.
import "io";
import "json";

///////////////////////
// UTILITY FUNCTIONS //
///////////////////////

//Gets the to-do notes file.
let getNotes() =
{
    //Check if the notes file exists.
    if (!file.exists("notes.json"))
    {
        //Doesn't exist, return default notes.
        let notes = object 
        {
            let list = [];
            let currentID = 0;
        };

        //Save file.
        saveNotes(notes);
        return notes;
    }

    //File exists, serialize and return.
    return json.parse(input.fromFile("notes.json"));
}

//Save the notes file.
let saveNotes(notes) = 
{
    output.toFile("notes.json", json.make(notes));
}

//Returns the index of the note with the given ID.
let getNoteIndex(id) =
{
    let i = -1;
    let notes = getNotes();
    for (j in notes.list)
    {
        let notesItem = notes.list[j];
        if (notesItem.id == id)
        {
            i = j;
            break;
        }
    }

    return i;
}
 
//Creates a to-do note.
let createNote(name, text) = 
{
    //Get the notes file.
    let notes = getNotes();

    //Add a note to the file, using the current ID.
    let newNote = object
    {
        let id = notes.currentID;
        let name = name;
        let text = text;
    };
    
    add newNote to notes.list;
    notes.currentID++;
    
    //Save the note.
    saveNotes(notes);
    print "Successfully created the note.";
}

//Edits a to-do note.
let editNote(name, text, id) =
{
    //Get the notes file.
    let notes = getNotes();

    //Find the note index.
    let i = getNoteIndex(id);
    if (i == -1)
    {
        print "The note you wanted to edit doesn't exist.";
        return;
    }

    //Got the note index, now edit the note.
    let note = notes.list[i];
    note.text = text;
    note.name = name;
    notes.list[i] = note;
    saveNotes(notes);

    print "Successfully edited the note.";
}

//Deletes a to-do note.
let deleteNote(id) =
{
    //Get the notes file.
    let notes = getNotes();

    //Get the index of the note.
    let i = getNoteIndex(id);
    if (i == -1)
    {
        print "The note you wanted to delete doesn't exist.";
        return;
    }

    //Remove that index.
    remove i in notes.list;
    saveNotes(notes);
    print "Successfully deleted note.";
}

//View the list of to-do notes.
let viewNotes() =
{
    //Get notes and print them all.
    print "Notes:";
    let notes = getNotes();

    if (len(notes.list) == 0) 
    {
        print "No notes have been made.";
        return;
    }

    foreach (note in notes.list)
    {
        print note.name + " - " + note.text + " (ID " + note.id + ")";
    }
    print "";
}

//Gets the ID of a valid note.
let getID() = 
{
    let id = null;
    while (true)
    {
        try
        {
            id = int(input.get());

            //Is the ID valid?
            if (getNoteIndex(id) == -1)
            {
                print "Invalid ID given, please try again.";
                continue;
            }

            break;
        }
        catch (e)
        {
            print "Invalid ID given, please try again.";
        }
    }

    return id;
}

///////////////////////


//Let the user select an option.
print "Welcome to the Algo To-Do Example App 2.0!";
print "Select an option to get started.";
print "-------------------";
print "1 - Create a note.";
print "2 - Edit a note.";
print "3 - Delete a note.";
print "4 - View your notes.";
print "-------------------\n";

//Attempt to get user input.
let response = -1;
while (true)
{
    try
    {
        response = int(input.get());

        //Within the number range?
        if (response < 1 | response > 4)
        {
            print "Invalid number given, please try again.";
        }
        else 
        {
            //Yes.
            break;
        }
    }
    catch(e)
    {
        print "Invalid number given, please try again.";
    }
}

//Switch on the input.
if (response == 1)
{
    //Get the name and body of the note.
    print "Enter the name of your note.";
    let name = input.get();
    print "Enter the body of your note.";
    let body = input.get();

    //Create the note.
    createNote(name, body);
}
else if (response == 2)
{
    //What ID is being edited?
    print "What is the ID of the note to edit?";
    let id = getID();

    //Get the new name and body.
    print "Enter the new name of your note.";
    let name = input.get();
    print "Enter the new body of your note.";
    let body = input.get();

    //Edit.
    editNote(name, body, id);
}
else if (response == 3)
{
    //Get the ID to delete.
    print "What is the ID of the note to delete?";
    let id = getID();

    //Deleting.
    deleteNote(id);
}
else
{
    viewNotes();
}