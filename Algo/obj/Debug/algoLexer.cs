//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\Files\Programming\GitHub\algo\Algo\Parsing\algo.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Algo {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class algoLexer : Lexer {
	public const int
		INTEGER=1, FLOAT=2, BOOLEAN=3, STRING=4, RATIONAL=5, LET_SYM=6, FOR_SYM=7, 
		IN_SYM=8, IF_SYM=9, TO_SYM=10, SIG_FIG_SYM=11, ELSE_SYM=12, IMPORT_SYM=13, 
		RETURN_SYM=14, PRINT_SYM=15, DISREGARD_SYM=16, ENDLINE=17, EQUALS=18, 
		COMMA=19, LBRACE=20, RBRACE=21, LSQBR=22, RSQBR=23, LBRACKET=24, RBRACKET=25, 
		ADD_OP=26, TAKE_OP=27, MUL_OP=28, DIV_OP=29, POW_OP=30, BIN_OR=31, BIN_AND=32, 
		BIN_EQUALS=33, GRTR_THAN=34, LESS_THAN=35, GRTR_THAN_ET=36, LESS_THAN_ET=37, 
		IDENTIFIER=38, COMMENT=39, WS=40, UNKNOWN_SYMBOL=41;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"INTEGER", "FLOAT", "BOOLEAN", "STRING", "RATIONAL", "LET_SYM", "FOR_SYM", 
		"IN_SYM", "IF_SYM", "TO_SYM", "SIG_FIG_SYM", "ELSE_SYM", "IMPORT_SYM", 
		"RETURN_SYM", "PRINT_SYM", "DISREGARD_SYM", "ENDLINE", "EQUALS", "COMMA", 
		"LBRACE", "RBRACE", "LSQBR", "RSQBR", "LBRACKET", "RBRACKET", "ADD_OP", 
		"TAKE_OP", "MUL_OP", "DIV_OP", "POW_OP", "BIN_OR", "BIN_AND", "BIN_EQUALS", 
		"GRTR_THAN", "LESS_THAN", "GRTR_THAN_ET", "LESS_THAN_ET", "IDENTIFIER", 
		"COMMENT", "WS", "UNKNOWN_SYMBOL"
	};


	public algoLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'let'", "'for'", "'in'", "'if'", 
		"'to'", "'sf'", "'else'", "'import'", "'return'", "'print'", "'disregard'", 
		"';'", "'='", "','", "'{'", "'}'", "'['", "']'", "'('", "')'", "'+'", 
		"'-'", "'*'", "'/'", "'^'", "'|'", "'&'", "'=='", "'>'", "'<'", "'>='", 
		"'<='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INTEGER", "FLOAT", "BOOLEAN", "STRING", "RATIONAL", "LET_SYM", 
		"FOR_SYM", "IN_SYM", "IF_SYM", "TO_SYM", "SIG_FIG_SYM", "ELSE_SYM", "IMPORT_SYM", 
		"RETURN_SYM", "PRINT_SYM", "DISREGARD_SYM", "ENDLINE", "EQUALS", "COMMA", 
		"LBRACE", "RBRACE", "LSQBR", "RSQBR", "LBRACKET", "RBRACKET", "ADD_OP", 
		"TAKE_OP", "MUL_OP", "DIV_OP", "POW_OP", "BIN_OR", "BIN_AND", "BIN_EQUALS", 
		"GRTR_THAN", "LESS_THAN", "GRTR_THAN_ET", "LESS_THAN_ET", "IDENTIFIER", 
		"COMMENT", "WS", "UNKNOWN_SYMBOL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "algo.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2+\x106\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x3\x2\x5\x2W\n\x2\x3\x2\a\x2Z\n\x2\f\x2\xE\x2]\v\x2\x3\x2\x3\x2\x3\x3"+
		"\x5\x3\x62\n\x3\x3\x3\a\x3\x65\n\x3\f\x3\xE\x3h\v\x3\x3\x3\x3\x3\x3\x3"+
		"\x6\x3m\n\x3\r\x3\xE\x3n\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x5\x4z\n\x4\x3\x5\x3\x5\a\x5~\n\x5\f\x5\xE\x5\x81\v\x5\x3\x5"+
		"\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b"+
		"\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\r\x3\r"+
		"\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x12\x3\x12\x3\x13\x3\x13\x3\x14\x3\x14\x3\x15\x3\x15\x3\x16\x3\x16"+
		"\x3\x17\x3\x17\x3\x18\x3\x18\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1B\x3\x1B"+
		"\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3 \x3 \x3!\x3"+
		"!\x3\"\x3\"\x3\"\x3#\x3#\x3$\x3$\x3%\x3%\x3%\x3&\x3&\x3&\x3\'\x3\'\a\'"+
		"\xEF\n\'\f\'\xE\'\xF2\v\'\x3(\x3(\x3(\x3(\a(\xF8\n(\f(\xE(\xFB\v(\x3("+
		"\x3(\x3(\x3(\x3)\x3)\x3)\x3)\x3*\x3*\x3\xF9\x2\x2+\x3\x2\x3\x5\x2\x4\a"+
		"\x2\x5\t\x2\x6\v\x2\a\r\x2\b\xF\x2\t\x11\x2\n\x13\x2\v\x15\x2\f\x17\x2"+
		"\r\x19\x2\xE\x1B\x2\xF\x1D\x2\x10\x1F\x2\x11!\x2\x12#\x2\x13%\x2\x14\'"+
		"\x2\x15)\x2\x16+\x2\x17-\x2\x18/\x2\x19\x31\x2\x1A\x33\x2\x1B\x35\x2\x1C"+
		"\x37\x2\x1D\x39\x2\x1E;\x2\x1F=\x2 ?\x2!\x41\x2\"\x43\x2#\x45\x2$G\x2"+
		"%I\x2&K\x2\'M\x2(O\x2)Q\x2*S\x2+\x3\x2\b\x3\x2\x33;\x3\x2\x32;\x3\x2$"+
		"$\x5\x2\x43\\\x61\x61\x63|\x6\x2\x32;\x43\\\x61\x61\x63|\x5\x2\v\f\xF"+
		"\xF\"\"\x10E\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t"+
		"\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11"+
		"\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2"+
		"\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2"+
		"\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2"+
		"\x2)\x3\x2\x2\x2\x2+\x3\x2\x2\x2\x2-\x3\x2\x2\x2\x2/\x3\x2\x2\x2\x2\x31"+
		"\x3\x2\x2\x2\x2\x33\x3\x2\x2\x2\x2\x35\x3\x2\x2\x2\x2\x37\x3\x2\x2\x2"+
		"\x2\x39\x3\x2\x2\x2\x2;\x3\x2\x2\x2\x2=\x3\x2\x2\x2\x2?\x3\x2\x2\x2\x2"+
		"\x41\x3\x2\x2\x2\x2\x43\x3\x2\x2\x2\x2\x45\x3\x2\x2\x2\x2G\x3\x2\x2\x2"+
		"\x2I\x3\x2\x2\x2\x2K\x3\x2\x2\x2\x2M\x3\x2\x2\x2\x2O\x3\x2\x2\x2\x2Q\x3"+
		"\x2\x2\x2\x2S\x3\x2\x2\x2\x3V\x3\x2\x2\x2\x5\x61\x3\x2\x2\x2\ay\x3\x2"+
		"\x2\x2\t{\x3\x2\x2\x2\v\x84\x3\x2\x2\x2\r\x88\x3\x2\x2\x2\xF\x8C\x3\x2"+
		"\x2\x2\x11\x90\x3\x2\x2\x2\x13\x93\x3\x2\x2\x2\x15\x96\x3\x2\x2\x2\x17"+
		"\x99\x3\x2\x2\x2\x19\x9C\x3\x2\x2\x2\x1B\xA1\x3\x2\x2\x2\x1D\xA8\x3\x2"+
		"\x2\x2\x1F\xAF\x3\x2\x2\x2!\xB5\x3\x2\x2\x2#\xBF\x3\x2\x2\x2%\xC1\x3\x2"+
		"\x2\x2\'\xC3\x3\x2\x2\x2)\xC5\x3\x2\x2\x2+\xC7\x3\x2\x2\x2-\xC9\x3\x2"+
		"\x2\x2/\xCB\x3\x2\x2\x2\x31\xCD\x3\x2\x2\x2\x33\xCF\x3\x2\x2\x2\x35\xD1"+
		"\x3\x2\x2\x2\x37\xD3\x3\x2\x2\x2\x39\xD5\x3\x2\x2\x2;\xD7\x3\x2\x2\x2"+
		"=\xD9\x3\x2\x2\x2?\xDB\x3\x2\x2\x2\x41\xDD\x3\x2\x2\x2\x43\xDF\x3\x2\x2"+
		"\x2\x45\xE2\x3\x2\x2\x2G\xE4\x3\x2\x2\x2I\xE6\x3\x2\x2\x2K\xE9\x3\x2\x2"+
		"\x2M\xEC\x3\x2\x2\x2O\xF3\x3\x2\x2\x2Q\x100\x3\x2\x2\x2S\x104\x3\x2\x2"+
		"\x2UW\a/\x2\x2VU\x3\x2\x2\x2VW\x3\x2\x2\x2W[\x3\x2\x2\x2XZ\t\x2\x2\x2"+
		"YX\x3\x2\x2\x2Z]\x3\x2\x2\x2[Y\x3\x2\x2\x2[\\\x3\x2\x2\x2\\^\x3\x2\x2"+
		"\x2][\x3\x2\x2\x2^_\t\x3\x2\x2_\x4\x3\x2\x2\x2`\x62\a/\x2\x2\x61`\x3\x2"+
		"\x2\x2\x61\x62\x3\x2\x2\x2\x62\x66\x3\x2\x2\x2\x63\x65\t\x2\x2\x2\x64"+
		"\x63\x3\x2\x2\x2\x65h\x3\x2\x2\x2\x66\x64\x3\x2\x2\x2\x66g\x3\x2\x2\x2"+
		"gi\x3\x2\x2\x2h\x66\x3\x2\x2\x2ij\t\x3\x2\x2jl\a\x30\x2\x2km\t\x3\x2\x2"+
		"lk\x3\x2\x2\x2mn\x3\x2\x2\x2nl\x3\x2\x2\x2no\x3\x2\x2\x2o\x6\x3\x2\x2"+
		"\x2pq\av\x2\x2qr\at\x2\x2rs\aw\x2\x2sz\ag\x2\x2tu\ah\x2\x2uv\a\x63\x2"+
		"\x2vw\an\x2\x2wx\au\x2\x2xz\ag\x2\x2yp\x3\x2\x2\x2yt\x3\x2\x2\x2z\b\x3"+
		"\x2\x2\x2{\x7F\a$\x2\x2|~\n\x4\x2\x2}|\x3\x2\x2\x2~\x81\x3\x2\x2\x2\x7F"+
		"}\x3\x2\x2\x2\x7F\x80\x3\x2\x2\x2\x80\x82\x3\x2\x2\x2\x81\x7F\x3\x2\x2"+
		"\x2\x82\x83\a$\x2\x2\x83\n\x3\x2\x2\x2\x84\x85\x5\x3\x2\x2\x85\x86\a\x31"+
		"\x2\x2\x86\x87\x5\x3\x2\x2\x87\f\x3\x2\x2\x2\x88\x89\an\x2\x2\x89\x8A"+
		"\ag\x2\x2\x8A\x8B\av\x2\x2\x8B\xE\x3\x2\x2\x2\x8C\x8D\ah\x2\x2\x8D\x8E"+
		"\aq\x2\x2\x8E\x8F\at\x2\x2\x8F\x10\x3\x2\x2\x2\x90\x91\ak\x2\x2\x91\x92"+
		"\ap\x2\x2\x92\x12\x3\x2\x2\x2\x93\x94\ak\x2\x2\x94\x95\ah\x2\x2\x95\x14"+
		"\x3\x2\x2\x2\x96\x97\av\x2\x2\x97\x98\aq\x2\x2\x98\x16\x3\x2\x2\x2\x99"+
		"\x9A\au\x2\x2\x9A\x9B\ah\x2\x2\x9B\x18\x3\x2\x2\x2\x9C\x9D\ag\x2\x2\x9D"+
		"\x9E\an\x2\x2\x9E\x9F\au\x2\x2\x9F\xA0\ag\x2\x2\xA0\x1A\x3\x2\x2\x2\xA1"+
		"\xA2\ak\x2\x2\xA2\xA3\ao\x2\x2\xA3\xA4\ar\x2\x2\xA4\xA5\aq\x2\x2\xA5\xA6"+
		"\at\x2\x2\xA6\xA7\av\x2\x2\xA7\x1C\x3\x2\x2\x2\xA8\xA9\at\x2\x2\xA9\xAA"+
		"\ag\x2\x2\xAA\xAB\av\x2\x2\xAB\xAC\aw\x2\x2\xAC\xAD\at\x2\x2\xAD\xAE\a"+
		"p\x2\x2\xAE\x1E\x3\x2\x2\x2\xAF\xB0\ar\x2\x2\xB0\xB1\at\x2\x2\xB1\xB2"+
		"\ak\x2\x2\xB2\xB3\ap\x2\x2\xB3\xB4\av\x2\x2\xB4 \x3\x2\x2\x2\xB5\xB6\a"+
		"\x66\x2\x2\xB6\xB7\ak\x2\x2\xB7\xB8\au\x2\x2\xB8\xB9\at\x2\x2\xB9\xBA"+
		"\ag\x2\x2\xBA\xBB\ai\x2\x2\xBB\xBC\a\x63\x2\x2\xBC\xBD\at\x2\x2\xBD\xBE"+
		"\a\x66\x2\x2\xBE\"\x3\x2\x2\x2\xBF\xC0\a=\x2\x2\xC0$\x3\x2\x2\x2\xC1\xC2"+
		"\a?\x2\x2\xC2&\x3\x2\x2\x2\xC3\xC4\a.\x2\x2\xC4(\x3\x2\x2\x2\xC5\xC6\a"+
		"}\x2\x2\xC6*\x3\x2\x2\x2\xC7\xC8\a\x7F\x2\x2\xC8,\x3\x2\x2\x2\xC9\xCA"+
		"\a]\x2\x2\xCA.\x3\x2\x2\x2\xCB\xCC\a_\x2\x2\xCC\x30\x3\x2\x2\x2\xCD\xCE"+
		"\a*\x2\x2\xCE\x32\x3\x2\x2\x2\xCF\xD0\a+\x2\x2\xD0\x34\x3\x2\x2\x2\xD1"+
		"\xD2\a-\x2\x2\xD2\x36\x3\x2\x2\x2\xD3\xD4\a/\x2\x2\xD4\x38\x3\x2\x2\x2"+
		"\xD5\xD6\a,\x2\x2\xD6:\x3\x2\x2\x2\xD7\xD8\a\x31\x2\x2\xD8<\x3\x2\x2\x2"+
		"\xD9\xDA\a`\x2\x2\xDA>\x3\x2\x2\x2\xDB\xDC\a~\x2\x2\xDC@\x3\x2\x2\x2\xDD"+
		"\xDE\a(\x2\x2\xDE\x42\x3\x2\x2\x2\xDF\xE0\a?\x2\x2\xE0\xE1\a?\x2\x2\xE1"+
		"\x44\x3\x2\x2\x2\xE2\xE3\a@\x2\x2\xE3\x46\x3\x2\x2\x2\xE4\xE5\a>\x2\x2"+
		"\xE5H\x3\x2\x2\x2\xE6\xE7\a@\x2\x2\xE7\xE8\a?\x2\x2\xE8J\x3\x2\x2\x2\xE9"+
		"\xEA\a>\x2\x2\xEA\xEB\a?\x2\x2\xEBL\x3\x2\x2\x2\xEC\xF0\t\x5\x2\x2\xED"+
		"\xEF\t\x6\x2\x2\xEE\xED\x3\x2\x2\x2\xEF\xF2\x3\x2\x2\x2\xF0\xEE\x3\x2"+
		"\x2\x2\xF0\xF1\x3\x2\x2\x2\xF1N\x3\x2\x2\x2\xF2\xF0\x3\x2\x2\x2\xF3\xF4"+
		"\a\x31\x2\x2\xF4\xF5\a\x31\x2\x2\xF5\xF9\x3\x2\x2\x2\xF6\xF8\v\x2\x2\x2"+
		"\xF7\xF6\x3\x2\x2\x2\xF8\xFB\x3\x2\x2\x2\xF9\xFA\x3\x2\x2\x2\xF9\xF7\x3"+
		"\x2\x2\x2\xFA\xFC\x3\x2\x2\x2\xFB\xF9\x3\x2\x2\x2\xFC\xFD\a\f\x2\x2\xFD"+
		"\xFE\x3\x2\x2\x2\xFE\xFF\b(\x2\x2\xFFP\x3\x2\x2\x2\x100\x101\t\a\x2\x2"+
		"\x101\x102\x3\x2\x2\x2\x102\x103\b)\x2\x2\x103R\x3\x2\x2\x2\x104\x105"+
		"\v\x2\x2\x2\x105T\x3\x2\x2\x2\f\x2V[\x61\x66ny\x7F\xF0\xF9\x3\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Algo
