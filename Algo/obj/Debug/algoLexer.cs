//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\Files\Programming\GitHub\algo\Algo\Parsing\algo.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Algo {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class algoLexer : Lexer {
	public const int
		INTEGER=1, FLOAT=2, BOOLEAN=3, STRING=4, RATIONAL=5, LET_SYM=6, FOR_SYM=7, 
		IN_SYM=8, IF_SYM=9, TO_SYM=10, SIG_FIG_SYM=11, ELSE_SYM=12, IMPORT_SYM=13, 
		RETURN_SYM=14, PRINT_SYM=15, ENDLINE=16, EQUALS=17, COMMA=18, LBRACE=19, 
		RBRACE=20, LSQBR=21, RSQBR=22, LBRACKET=23, RBRACKET=24, ADD_OP=25, TAKE_OP=26, 
		MUL_OP=27, DIV_OP=28, POW_OP=29, BIN_OR=30, BIN_AND=31, BIN_EQUALS=32, 
		GRTR_THAN=33, LESS_THAN=34, GRTR_THAN_ET=35, LESS_THAN_ET=36, IDENTIFIER=37, 
		COMMENT=38, WS=39, UNKNOWN_SYMBOL=40;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"INTEGER", "FLOAT", "BOOLEAN", "STRING", "RATIONAL", "LET_SYM", "FOR_SYM", 
		"IN_SYM", "IF_SYM", "TO_SYM", "SIG_FIG_SYM", "ELSE_SYM", "IMPORT_SYM", 
		"RETURN_SYM", "PRINT_SYM", "ENDLINE", "EQUALS", "COMMA", "LBRACE", "RBRACE", 
		"LSQBR", "RSQBR", "LBRACKET", "RBRACKET", "ADD_OP", "TAKE_OP", "MUL_OP", 
		"DIV_OP", "POW_OP", "BIN_OR", "BIN_AND", "BIN_EQUALS", "GRTR_THAN", "LESS_THAN", 
		"GRTR_THAN_ET", "LESS_THAN_ET", "IDENTIFIER", "COMMENT", "WS", "UNKNOWN_SYMBOL"
	};


	public algoLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'let'", "'for'", "'in'", "'if'", 
		"'to'", "'sf'", "'else'", "'import'", "'return'", "'print'", "';'", "'='", 
		"','", "'{'", "'}'", "'['", "']'", "'('", "')'", "'+'", "'-'", "'*'", 
		"'/'", "'^'", "'|'", "'&'", "'=='", "'>'", "'<'", "'>='", "'<='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INTEGER", "FLOAT", "BOOLEAN", "STRING", "RATIONAL", "LET_SYM", 
		"FOR_SYM", "IN_SYM", "IF_SYM", "TO_SYM", "SIG_FIG_SYM", "ELSE_SYM", "IMPORT_SYM", 
		"RETURN_SYM", "PRINT_SYM", "ENDLINE", "EQUALS", "COMMA", "LBRACE", "RBRACE", 
		"LSQBR", "RSQBR", "LBRACKET", "RBRACKET", "ADD_OP", "TAKE_OP", "MUL_OP", 
		"DIV_OP", "POW_OP", "BIN_OR", "BIN_AND", "BIN_EQUALS", "GRTR_THAN", "LESS_THAN", 
		"GRTR_THAN_ET", "LESS_THAN_ET", "IDENTIFIER", "COMMENT", "WS", "UNKNOWN_SYMBOL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "algo.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2*\xFA\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x3\x2"+
		"\x5\x2U\n\x2\x3\x2\a\x2X\n\x2\f\x2\xE\x2[\v\x2\x3\x2\x3\x2\x3\x3\x5\x3"+
		"`\n\x3\x3\x3\a\x3\x63\n\x3\f\x3\xE\x3\x66\v\x3\x3\x3\x3\x3\x3\x3\x6\x3"+
		"k\n\x3\r\x3\xE\x3l\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x5\x4x\n\x4\x3\x5\x3\x5\a\x5|\n\x5\f\x5\xE\x5\x7F\v\x5\x3\x5\x3\x5"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\t"+
		"\x3\t\x3\t\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r"+
		"\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3"+
		"\x11\x3\x11\x3\x12\x3\x12\x3\x13\x3\x13\x3\x14\x3\x14\x3\x15\x3\x15\x3"+
		"\x16\x3\x16\x3\x17\x3\x17\x3\x18\x3\x18\x3\x19\x3\x19\x3\x1A\x3\x1A\x3"+
		"\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3"+
		" \x3 \x3!\x3!\x3!\x3\"\x3\"\x3#\x3#\x3$\x3$\x3$\x3%\x3%\x3%\x3&\x3&\a"+
		"&\xE3\n&\f&\xE&\xE6\v&\x3\'\x3\'\x3\'\x3\'\a\'\xEC\n\'\f\'\xE\'\xEF\v"+
		"\'\x3\'\x3\'\x3\'\x3\'\x3(\x3(\x3(\x3(\x3)\x3)\x3\xED\x2\x2*\x3\x2\x3"+
		"\x5\x2\x4\a\x2\x5\t\x2\x6\v\x2\a\r\x2\b\xF\x2\t\x11\x2\n\x13\x2\v\x15"+
		"\x2\f\x17\x2\r\x19\x2\xE\x1B\x2\xF\x1D\x2\x10\x1F\x2\x11!\x2\x12#\x2\x13"+
		"%\x2\x14\'\x2\x15)\x2\x16+\x2\x17-\x2\x18/\x2\x19\x31\x2\x1A\x33\x2\x1B"+
		"\x35\x2\x1C\x37\x2\x1D\x39\x2\x1E;\x2\x1F=\x2 ?\x2!\x41\x2\"\x43\x2#\x45"+
		"\x2$G\x2%I\x2&K\x2\'M\x2(O\x2)Q\x2*\x3\x2\b\x3\x2\x33;\x3\x2\x32;\x3\x2"+
		"$$\x5\x2\x43\\\x61\x61\x63|\x6\x2\x32;\x43\\\x61\x61\x63|\x5\x2\v\f\xF"+
		"\xF\"\"\x102\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t"+
		"\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11"+
		"\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2"+
		"\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2"+
		"\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2"+
		"\x2)\x3\x2\x2\x2\x2+\x3\x2\x2\x2\x2-\x3\x2\x2\x2\x2/\x3\x2\x2\x2\x2\x31"+
		"\x3\x2\x2\x2\x2\x33\x3\x2\x2\x2\x2\x35\x3\x2\x2\x2\x2\x37\x3\x2\x2\x2"+
		"\x2\x39\x3\x2\x2\x2\x2;\x3\x2\x2\x2\x2=\x3\x2\x2\x2\x2?\x3\x2\x2\x2\x2"+
		"\x41\x3\x2\x2\x2\x2\x43\x3\x2\x2\x2\x2\x45\x3\x2\x2\x2\x2G\x3\x2\x2\x2"+
		"\x2I\x3\x2\x2\x2\x2K\x3\x2\x2\x2\x2M\x3\x2\x2\x2\x2O\x3\x2\x2\x2\x2Q\x3"+
		"\x2\x2\x2\x3T\x3\x2\x2\x2\x5_\x3\x2\x2\x2\aw\x3\x2\x2\x2\ty\x3\x2\x2\x2"+
		"\v\x82\x3\x2\x2\x2\r\x86\x3\x2\x2\x2\xF\x8A\x3\x2\x2\x2\x11\x8E\x3\x2"+
		"\x2\x2\x13\x91\x3\x2\x2\x2\x15\x94\x3\x2\x2\x2\x17\x97\x3\x2\x2\x2\x19"+
		"\x9A\x3\x2\x2\x2\x1B\x9F\x3\x2\x2\x2\x1D\xA6\x3\x2\x2\x2\x1F\xAD\x3\x2"+
		"\x2\x2!\xB3\x3\x2\x2\x2#\xB5\x3\x2\x2\x2%\xB7\x3\x2\x2\x2\'\xB9\x3\x2"+
		"\x2\x2)\xBB\x3\x2\x2\x2+\xBD\x3\x2\x2\x2-\xBF\x3\x2\x2\x2/\xC1\x3\x2\x2"+
		"\x2\x31\xC3\x3\x2\x2\x2\x33\xC5\x3\x2\x2\x2\x35\xC7\x3\x2\x2\x2\x37\xC9"+
		"\x3\x2\x2\x2\x39\xCB\x3\x2\x2\x2;\xCD\x3\x2\x2\x2=\xCF\x3\x2\x2\x2?\xD1"+
		"\x3\x2\x2\x2\x41\xD3\x3\x2\x2\x2\x43\xD6\x3\x2\x2\x2\x45\xD8\x3\x2\x2"+
		"\x2G\xDA\x3\x2\x2\x2I\xDD\x3\x2\x2\x2K\xE0\x3\x2\x2\x2M\xE7\x3\x2\x2\x2"+
		"O\xF4\x3\x2\x2\x2Q\xF8\x3\x2\x2\x2SU\a/\x2\x2TS\x3\x2\x2\x2TU\x3\x2\x2"+
		"\x2UY\x3\x2\x2\x2VX\t\x2\x2\x2WV\x3\x2\x2\x2X[\x3\x2\x2\x2YW\x3\x2\x2"+
		"\x2YZ\x3\x2\x2\x2Z\\\x3\x2\x2\x2[Y\x3\x2\x2\x2\\]\t\x3\x2\x2]\x4\x3\x2"+
		"\x2\x2^`\a/\x2\x2_^\x3\x2\x2\x2_`\x3\x2\x2\x2`\x64\x3\x2\x2\x2\x61\x63"+
		"\t\x2\x2\x2\x62\x61\x3\x2\x2\x2\x63\x66\x3\x2\x2\x2\x64\x62\x3\x2\x2\x2"+
		"\x64\x65\x3\x2\x2\x2\x65g\x3\x2\x2\x2\x66\x64\x3\x2\x2\x2gh\t\x3\x2\x2"+
		"hj\a\x30\x2\x2ik\t\x3\x2\x2ji\x3\x2\x2\x2kl\x3\x2\x2\x2lj\x3\x2\x2\x2"+
		"lm\x3\x2\x2\x2m\x6\x3\x2\x2\x2no\av\x2\x2op\at\x2\x2pq\aw\x2\x2qx\ag\x2"+
		"\x2rs\ah\x2\x2st\a\x63\x2\x2tu\an\x2\x2uv\au\x2\x2vx\ag\x2\x2wn\x3\x2"+
		"\x2\x2wr\x3\x2\x2\x2x\b\x3\x2\x2\x2y}\a$\x2\x2z|\n\x4\x2\x2{z\x3\x2\x2"+
		"\x2|\x7F\x3\x2\x2\x2}{\x3\x2\x2\x2}~\x3\x2\x2\x2~\x80\x3\x2\x2\x2\x7F"+
		"}\x3\x2\x2\x2\x80\x81\a$\x2\x2\x81\n\x3\x2\x2\x2\x82\x83\x5\x3\x2\x2\x83"+
		"\x84\a\x31\x2\x2\x84\x85\x5\x3\x2\x2\x85\f\x3\x2\x2\x2\x86\x87\an\x2\x2"+
		"\x87\x88\ag\x2\x2\x88\x89\av\x2\x2\x89\xE\x3\x2\x2\x2\x8A\x8B\ah\x2\x2"+
		"\x8B\x8C\aq\x2\x2\x8C\x8D\at\x2\x2\x8D\x10\x3\x2\x2\x2\x8E\x8F\ak\x2\x2"+
		"\x8F\x90\ap\x2\x2\x90\x12\x3\x2\x2\x2\x91\x92\ak\x2\x2\x92\x93\ah\x2\x2"+
		"\x93\x14\x3\x2\x2\x2\x94\x95\av\x2\x2\x95\x96\aq\x2\x2\x96\x16\x3\x2\x2"+
		"\x2\x97\x98\au\x2\x2\x98\x99\ah\x2\x2\x99\x18\x3\x2\x2\x2\x9A\x9B\ag\x2"+
		"\x2\x9B\x9C\an\x2\x2\x9C\x9D\au\x2\x2\x9D\x9E\ag\x2\x2\x9E\x1A\x3\x2\x2"+
		"\x2\x9F\xA0\ak\x2\x2\xA0\xA1\ao\x2\x2\xA1\xA2\ar\x2\x2\xA2\xA3\aq\x2\x2"+
		"\xA3\xA4\at\x2\x2\xA4\xA5\av\x2\x2\xA5\x1C\x3\x2\x2\x2\xA6\xA7\at\x2\x2"+
		"\xA7\xA8\ag\x2\x2\xA8\xA9\av\x2\x2\xA9\xAA\aw\x2\x2\xAA\xAB\at\x2\x2\xAB"+
		"\xAC\ap\x2\x2\xAC\x1E\x3\x2\x2\x2\xAD\xAE\ar\x2\x2\xAE\xAF\at\x2\x2\xAF"+
		"\xB0\ak\x2\x2\xB0\xB1\ap\x2\x2\xB1\xB2\av\x2\x2\xB2 \x3\x2\x2\x2\xB3\xB4"+
		"\a=\x2\x2\xB4\"\x3\x2\x2\x2\xB5\xB6\a?\x2\x2\xB6$\x3\x2\x2\x2\xB7\xB8"+
		"\a.\x2\x2\xB8&\x3\x2\x2\x2\xB9\xBA\a}\x2\x2\xBA(\x3\x2\x2\x2\xBB\xBC\a"+
		"\x7F\x2\x2\xBC*\x3\x2\x2\x2\xBD\xBE\a]\x2\x2\xBE,\x3\x2\x2\x2\xBF\xC0"+
		"\a_\x2\x2\xC0.\x3\x2\x2\x2\xC1\xC2\a*\x2\x2\xC2\x30\x3\x2\x2\x2\xC3\xC4"+
		"\a+\x2\x2\xC4\x32\x3\x2\x2\x2\xC5\xC6\a-\x2\x2\xC6\x34\x3\x2\x2\x2\xC7"+
		"\xC8\a/\x2\x2\xC8\x36\x3\x2\x2\x2\xC9\xCA\a,\x2\x2\xCA\x38\x3\x2\x2\x2"+
		"\xCB\xCC\a\x31\x2\x2\xCC:\x3\x2\x2\x2\xCD\xCE\a`\x2\x2\xCE<\x3\x2\x2\x2"+
		"\xCF\xD0\a~\x2\x2\xD0>\x3\x2\x2\x2\xD1\xD2\a(\x2\x2\xD2@\x3\x2\x2\x2\xD3"+
		"\xD4\a?\x2\x2\xD4\xD5\a?\x2\x2\xD5\x42\x3\x2\x2\x2\xD6\xD7\a@\x2\x2\xD7"+
		"\x44\x3\x2\x2\x2\xD8\xD9\a>\x2\x2\xD9\x46\x3\x2\x2\x2\xDA\xDB\a@\x2\x2"+
		"\xDB\xDC\a?\x2\x2\xDCH\x3\x2\x2\x2\xDD\xDE\a>\x2\x2\xDE\xDF\a?\x2\x2\xDF"+
		"J\x3\x2\x2\x2\xE0\xE4\t\x5\x2\x2\xE1\xE3\t\x6\x2\x2\xE2\xE1\x3\x2\x2\x2"+
		"\xE3\xE6\x3\x2\x2\x2\xE4\xE2\x3\x2\x2\x2\xE4\xE5\x3\x2\x2\x2\xE5L\x3\x2"+
		"\x2\x2\xE6\xE4\x3\x2\x2\x2\xE7\xE8\a\x31\x2\x2\xE8\xE9\a\x31\x2\x2\xE9"+
		"\xED\x3\x2\x2\x2\xEA\xEC\v\x2\x2\x2\xEB\xEA\x3\x2\x2\x2\xEC\xEF\x3\x2"+
		"\x2\x2\xED\xEE\x3\x2\x2\x2\xED\xEB\x3\x2\x2\x2\xEE\xF0\x3\x2\x2\x2\xEF"+
		"\xED\x3\x2\x2\x2\xF0\xF1\a\f\x2\x2\xF1\xF2\x3\x2\x2\x2\xF2\xF3\b\'\x2"+
		"\x2\xF3N\x3\x2\x2\x2\xF4\xF5\t\a\x2\x2\xF5\xF6\x3\x2\x2\x2\xF6\xF7\b("+
		"\x2\x2\xF7P\x3\x2\x2\x2\xF8\xF9\v\x2\x2\x2\xF9R\x3\x2\x2\x2\f\x2TY_\x64"+
		"lw}\xE4\xED\x3\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Algo
