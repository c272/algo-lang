//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\Files\Programming\GitHub\algo\Algo\Parsing\algo.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Algo {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class algoLexer : Lexer {
	public const int
		INTEGER=1, FLOAT=2, BOOLEAN=3, STRING=4, RATIONAL=5, LET_SYM=6, FOR_SYM=7, 
		IN_SYM=8, IF_SYM=9, ELSE_SYM=10, IMPORT_SYM=11, RETURN_SYM=12, PRINT_SYM=13, 
		ENDLINE=14, EQUALS=15, COMMA=16, LBRACE=17, RBRACE=18, LSQBR=19, RSQBR=20, 
		LBRACKET=21, RBRACKET=22, ADD_OP=23, TAKE_OP=24, MUL_OP=25, DIV_OP=26, 
		POW_OP=27, BIN_OR=28, BIN_AND=29, BIN_EQUALS=30, GRTR_THAN=31, LESS_THAN=32, 
		GRTR_THAN_ET=33, LESS_THAN_ET=34, IDENTIFIER=35, COMMENT=36, WS=37, UNKNOWN_SYMBOL=38;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"INTEGER", "FLOAT", "BOOLEAN", "STRING", "RATIONAL", "LET_SYM", "FOR_SYM", 
		"IN_SYM", "IF_SYM", "ELSE_SYM", "IMPORT_SYM", "RETURN_SYM", "PRINT_SYM", 
		"ENDLINE", "EQUALS", "COMMA", "LBRACE", "RBRACE", "LSQBR", "RSQBR", "LBRACKET", 
		"RBRACKET", "ADD_OP", "TAKE_OP", "MUL_OP", "DIV_OP", "POW_OP", "BIN_OR", 
		"BIN_AND", "BIN_EQUALS", "GRTR_THAN", "LESS_THAN", "GRTR_THAN_ET", "LESS_THAN_ET", 
		"IDENTIFIER", "COMMENT", "WS", "UNKNOWN_SYMBOL"
	};


	public algoLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'let'", "'for'", "'in'", "'if'", 
		"'else'", "'import'", "'return'", "'print'", "';'", "'='", "','", "'{'", 
		"'}'", "'['", "']'", "'('", "')'", "'+'", "'-'", "'*'", "'/'", "'^'", 
		"'|'", "'&'", "'=='", "'>'", "'<'", "'>='", "'<='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INTEGER", "FLOAT", "BOOLEAN", "STRING", "RATIONAL", "LET_SYM", 
		"FOR_SYM", "IN_SYM", "IF_SYM", "ELSE_SYM", "IMPORT_SYM", "RETURN_SYM", 
		"PRINT_SYM", "ENDLINE", "EQUALS", "COMMA", "LBRACE", "RBRACE", "LSQBR", 
		"RSQBR", "LBRACKET", "RBRACKET", "ADD_OP", "TAKE_OP", "MUL_OP", "DIV_OP", 
		"POW_OP", "BIN_OR", "BIN_AND", "BIN_EQUALS", "GRTR_THAN", "LESS_THAN", 
		"GRTR_THAN_ET", "LESS_THAN_ET", "IDENTIFIER", "COMMENT", "WS", "UNKNOWN_SYMBOL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "algo.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2(\xF0\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x3\x2\x5\x2Q\n\x2\x3"+
		"\x2\a\x2T\n\x2\f\x2\xE\x2W\v\x2\x3\x2\x3\x2\x3\x3\x5\x3\\\n\x3\x3\x3\a"+
		"\x3_\n\x3\f\x3\xE\x3\x62\v\x3\x3\x3\x3\x3\x3\x3\x6\x3g\n\x3\r\x3\xE\x3"+
		"h\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4t\n\x4\x3"+
		"\x5\x3\x5\a\x5x\n\x5\f\x5\xE\x5{\v\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\n\x3\n\x3"+
		"\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\r\x3"+
		"\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xF"+
		"\x3\xF\x3\x10\x3\x10\x3\x11\x3\x11\x3\x12\x3\x12\x3\x13\x3\x13\x3\x14"+
		"\x3\x14\x3\x15\x3\x15\x3\x16\x3\x16\x3\x17\x3\x17\x3\x18\x3\x18\x3\x19"+
		"\x3\x19\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1E"+
		"\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3 \x3 \x3!\x3!\x3\"\x3\"\x3\"\x3#\x3#\x3"+
		"#\x3$\x3$\a$\xD9\n$\f$\xE$\xDC\v$\x3%\x3%\x3%\x3%\a%\xE2\n%\f%\xE%\xE5"+
		"\v%\x3%\x3%\x3%\x3%\x3&\x3&\x3&\x3&\x3\'\x3\'\x3\xE3\x2\x2(\x3\x2\x3\x5"+
		"\x2\x4\a\x2\x5\t\x2\x6\v\x2\a\r\x2\b\xF\x2\t\x11\x2\n\x13\x2\v\x15\x2"+
		"\f\x17\x2\r\x19\x2\xE\x1B\x2\xF\x1D\x2\x10\x1F\x2\x11!\x2\x12#\x2\x13"+
		"%\x2\x14\'\x2\x15)\x2\x16+\x2\x17-\x2\x18/\x2\x19\x31\x2\x1A\x33\x2\x1B"+
		"\x35\x2\x1C\x37\x2\x1D\x39\x2\x1E;\x2\x1F=\x2 ?\x2!\x41\x2\"\x43\x2#\x45"+
		"\x2$G\x2%I\x2&K\x2\'M\x2(\x3\x2\b\x3\x2\x33;\x3\x2\x32;\x3\x2$$\x5\x2"+
		"\x43\\\x61\x61\x63|\x6\x2\x32;\x43\\\x61\x61\x63|\x5\x2\v\f\xF\xF\"\""+
		"\xF8\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2"+
		"\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2"+
		"\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3"+
		"\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2"+
		"!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2\x2)\x3"+
		"\x2\x2\x2\x2+\x3\x2\x2\x2\x2-\x3\x2\x2\x2\x2/\x3\x2\x2\x2\x2\x31\x3\x2"+
		"\x2\x2\x2\x33\x3\x2\x2\x2\x2\x35\x3\x2\x2\x2\x2\x37\x3\x2\x2\x2\x2\x39"+
		"\x3\x2\x2\x2\x2;\x3\x2\x2\x2\x2=\x3\x2\x2\x2\x2?\x3\x2\x2\x2\x2\x41\x3"+
		"\x2\x2\x2\x2\x43\x3\x2\x2\x2\x2\x45\x3\x2\x2\x2\x2G\x3\x2\x2\x2\x2I\x3"+
		"\x2\x2\x2\x2K\x3\x2\x2\x2\x2M\x3\x2\x2\x2\x3P\x3\x2\x2\x2\x5[\x3\x2\x2"+
		"\x2\as\x3\x2\x2\x2\tu\x3\x2\x2\x2\v~\x3\x2\x2\x2\r\x82\x3\x2\x2\x2\xF"+
		"\x86\x3\x2\x2\x2\x11\x8A\x3\x2\x2\x2\x13\x8D\x3\x2\x2\x2\x15\x90\x3\x2"+
		"\x2\x2\x17\x95\x3\x2\x2\x2\x19\x9C\x3\x2\x2\x2\x1B\xA3\x3\x2\x2\x2\x1D"+
		"\xA9\x3\x2\x2\x2\x1F\xAB\x3\x2\x2\x2!\xAD\x3\x2\x2\x2#\xAF\x3\x2\x2\x2"+
		"%\xB1\x3\x2\x2\x2\'\xB3\x3\x2\x2\x2)\xB5\x3\x2\x2\x2+\xB7\x3\x2\x2\x2"+
		"-\xB9\x3\x2\x2\x2/\xBB\x3\x2\x2\x2\x31\xBD\x3\x2\x2\x2\x33\xBF\x3\x2\x2"+
		"\x2\x35\xC1\x3\x2\x2\x2\x37\xC3\x3\x2\x2\x2\x39\xC5\x3\x2\x2\x2;\xC7\x3"+
		"\x2\x2\x2=\xC9\x3\x2\x2\x2?\xCC\x3\x2\x2\x2\x41\xCE\x3\x2\x2\x2\x43\xD0"+
		"\x3\x2\x2\x2\x45\xD3\x3\x2\x2\x2G\xD6\x3\x2\x2\x2I\xDD\x3\x2\x2\x2K\xEA"+
		"\x3\x2\x2\x2M\xEE\x3\x2\x2\x2OQ\a/\x2\x2PO\x3\x2\x2\x2PQ\x3\x2\x2\x2Q"+
		"U\x3\x2\x2\x2RT\t\x2\x2\x2SR\x3\x2\x2\x2TW\x3\x2\x2\x2US\x3\x2\x2\x2U"+
		"V\x3\x2\x2\x2VX\x3\x2\x2\x2WU\x3\x2\x2\x2XY\t\x3\x2\x2Y\x4\x3\x2\x2\x2"+
		"Z\\\a/\x2\x2[Z\x3\x2\x2\x2[\\\x3\x2\x2\x2\\`\x3\x2\x2\x2]_\t\x2\x2\x2"+
		"^]\x3\x2\x2\x2_\x62\x3\x2\x2\x2`^\x3\x2\x2\x2`\x61\x3\x2\x2\x2\x61\x63"+
		"\x3\x2\x2\x2\x62`\x3\x2\x2\x2\x63\x64\t\x3\x2\x2\x64\x66\a\x30\x2\x2\x65"+
		"g\t\x3\x2\x2\x66\x65\x3\x2\x2\x2gh\x3\x2\x2\x2h\x66\x3\x2\x2\x2hi\x3\x2"+
		"\x2\x2i\x6\x3\x2\x2\x2jk\av\x2\x2kl\at\x2\x2lm\aw\x2\x2mt\ag\x2\x2no\a"+
		"h\x2\x2op\a\x63\x2\x2pq\an\x2\x2qr\au\x2\x2rt\ag\x2\x2sj\x3\x2\x2\x2s"+
		"n\x3\x2\x2\x2t\b\x3\x2\x2\x2uy\a$\x2\x2vx\n\x4\x2\x2wv\x3\x2\x2\x2x{\x3"+
		"\x2\x2\x2yw\x3\x2\x2\x2yz\x3\x2\x2\x2z|\x3\x2\x2\x2{y\x3\x2\x2\x2|}\a"+
		"$\x2\x2}\n\x3\x2\x2\x2~\x7F\x5\x3\x2\x2\x7F\x80\a\x31\x2\x2\x80\x81\x5"+
		"\x3\x2\x2\x81\f\x3\x2\x2\x2\x82\x83\an\x2\x2\x83\x84\ag\x2\x2\x84\x85"+
		"\av\x2\x2\x85\xE\x3\x2\x2\x2\x86\x87\ah\x2\x2\x87\x88\aq\x2\x2\x88\x89"+
		"\at\x2\x2\x89\x10\x3\x2\x2\x2\x8A\x8B\ak\x2\x2\x8B\x8C\ap\x2\x2\x8C\x12"+
		"\x3\x2\x2\x2\x8D\x8E\ak\x2\x2\x8E\x8F\ah\x2\x2\x8F\x14\x3\x2\x2\x2\x90"+
		"\x91\ag\x2\x2\x91\x92\an\x2\x2\x92\x93\au\x2\x2\x93\x94\ag\x2\x2\x94\x16"+
		"\x3\x2\x2\x2\x95\x96\ak\x2\x2\x96\x97\ao\x2\x2\x97\x98\ar\x2\x2\x98\x99"+
		"\aq\x2\x2\x99\x9A\at\x2\x2\x9A\x9B\av\x2\x2\x9B\x18\x3\x2\x2\x2\x9C\x9D"+
		"\at\x2\x2\x9D\x9E\ag\x2\x2\x9E\x9F\av\x2\x2\x9F\xA0\aw\x2\x2\xA0\xA1\a"+
		"t\x2\x2\xA1\xA2\ap\x2\x2\xA2\x1A\x3\x2\x2\x2\xA3\xA4\ar\x2\x2\xA4\xA5"+
		"\at\x2\x2\xA5\xA6\ak\x2\x2\xA6\xA7\ap\x2\x2\xA7\xA8\av\x2\x2\xA8\x1C\x3"+
		"\x2\x2\x2\xA9\xAA\a=\x2\x2\xAA\x1E\x3\x2\x2\x2\xAB\xAC\a?\x2\x2\xAC \x3"+
		"\x2\x2\x2\xAD\xAE\a.\x2\x2\xAE\"\x3\x2\x2\x2\xAF\xB0\a}\x2\x2\xB0$\x3"+
		"\x2\x2\x2\xB1\xB2\a\x7F\x2\x2\xB2&\x3\x2\x2\x2\xB3\xB4\a]\x2\x2\xB4(\x3"+
		"\x2\x2\x2\xB5\xB6\a_\x2\x2\xB6*\x3\x2\x2\x2\xB7\xB8\a*\x2\x2\xB8,\x3\x2"+
		"\x2\x2\xB9\xBA\a+\x2\x2\xBA.\x3\x2\x2\x2\xBB\xBC\a-\x2\x2\xBC\x30\x3\x2"+
		"\x2\x2\xBD\xBE\a/\x2\x2\xBE\x32\x3\x2\x2\x2\xBF\xC0\a,\x2\x2\xC0\x34\x3"+
		"\x2\x2\x2\xC1\xC2\a\x31\x2\x2\xC2\x36\x3\x2\x2\x2\xC3\xC4\a`\x2\x2\xC4"+
		"\x38\x3\x2\x2\x2\xC5\xC6\a~\x2\x2\xC6:\x3\x2\x2\x2\xC7\xC8\a(\x2\x2\xC8"+
		"<\x3\x2\x2\x2\xC9\xCA\a?\x2\x2\xCA\xCB\a?\x2\x2\xCB>\x3\x2\x2\x2\xCC\xCD"+
		"\a@\x2\x2\xCD@\x3\x2\x2\x2\xCE\xCF\a>\x2\x2\xCF\x42\x3\x2\x2\x2\xD0\xD1"+
		"\a@\x2\x2\xD1\xD2\a?\x2\x2\xD2\x44\x3\x2\x2\x2\xD3\xD4\a>\x2\x2\xD4\xD5"+
		"\a?\x2\x2\xD5\x46\x3\x2\x2\x2\xD6\xDA\t\x5\x2\x2\xD7\xD9\t\x6\x2\x2\xD8"+
		"\xD7\x3\x2\x2\x2\xD9\xDC\x3\x2\x2\x2\xDA\xD8\x3\x2\x2\x2\xDA\xDB\x3\x2"+
		"\x2\x2\xDBH\x3\x2\x2\x2\xDC\xDA\x3\x2\x2\x2\xDD\xDE\a\x31\x2\x2\xDE\xDF"+
		"\a\x31\x2\x2\xDF\xE3\x3\x2\x2\x2\xE0\xE2\v\x2\x2\x2\xE1\xE0\x3\x2\x2\x2"+
		"\xE2\xE5\x3\x2\x2\x2\xE3\xE4\x3\x2\x2\x2\xE3\xE1\x3\x2\x2\x2\xE4\xE6\x3"+
		"\x2\x2\x2\xE5\xE3\x3\x2\x2\x2\xE6\xE7\a\f\x2\x2\xE7\xE8\x3\x2\x2\x2\xE8"+
		"\xE9\b%\x2\x2\xE9J\x3\x2\x2\x2\xEA\xEB\t\a\x2\x2\xEB\xEC\x3\x2\x2\x2\xEC"+
		"\xED\b&\x2\x2\xEDL\x3\x2\x2\x2\xEE\xEF\v\x2\x2\x2\xEFN\x3\x2\x2\x2\f\x2"+
		"PU[`hsy\xDA\xE3\x3\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Algo
