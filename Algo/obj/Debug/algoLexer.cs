//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\Files\Programming\GitHub\algo\Algo\Parsing\algo.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Algo {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class algoLexer : Lexer {
	public const int
		INTEGER=1, FLOAT=2, BOOLEAN=3, STRING=4, RATIONAL=5, LET_SYM=6, FOR_SYM=7, 
		IN_SYM=8, IF_SYM=9, TO_SYM=10, SIG_FIG_SYM=11, ELSE_SYM=12, IMPORT_SYM=13, 
		RETURN_SYM=14, PRINT_SYM=15, DISREGARD_SYM=16, ENDLINE=17, EQUALS=18, 
		COMMA=19, LBRACE=20, RBRACE=21, LSQBR=22, RSQBR=23, LBRACKET=24, RBRACKET=25, 
		ADD_OP=26, TAKE_OP=27, MUL_OP=28, DIV_OP=29, POW_OP=30, POINT=31, BIN_OR=32, 
		BIN_AND=33, BIN_EQUALS=34, GRTR_THAN=35, LESS_THAN=36, GRTR_THAN_ET=37, 
		LESS_THAN_ET=38, IDENTIFIER=39, COMMENT=40, WS=41, UNKNOWN_SYMBOL=42;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"INTEGER", "FLOAT", "BOOLEAN", "STRING", "RATIONAL", "LET_SYM", "FOR_SYM", 
		"IN_SYM", "IF_SYM", "TO_SYM", "SIG_FIG_SYM", "ELSE_SYM", "IMPORT_SYM", 
		"RETURN_SYM", "PRINT_SYM", "DISREGARD_SYM", "ENDLINE", "EQUALS", "COMMA", 
		"LBRACE", "RBRACE", "LSQBR", "RSQBR", "LBRACKET", "RBRACKET", "ADD_OP", 
		"TAKE_OP", "MUL_OP", "DIV_OP", "POW_OP", "POINT", "BIN_OR", "BIN_AND", 
		"BIN_EQUALS", "GRTR_THAN", "LESS_THAN", "GRTR_THAN_ET", "LESS_THAN_ET", 
		"IDENTIFIER", "COMMENT", "WS", "UNKNOWN_SYMBOL"
	};


	public algoLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'let'", "'for'", "'in'", "'if'", 
		"'to'", "'sf'", "'else'", "'import'", "'return'", "'print'", "'disregard'", 
		"';'", "'='", "','", "'{'", "'}'", "'['", "']'", "'('", "')'", "'+'", 
		"'-'", "'*'", "'/'", "'^'", "'.'", "'|'", "'&'", "'=='", "'>'", "'<'", 
		"'>='", "'<='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INTEGER", "FLOAT", "BOOLEAN", "STRING", "RATIONAL", "LET_SYM", 
		"FOR_SYM", "IN_SYM", "IF_SYM", "TO_SYM", "SIG_FIG_SYM", "ELSE_SYM", "IMPORT_SYM", 
		"RETURN_SYM", "PRINT_SYM", "DISREGARD_SYM", "ENDLINE", "EQUALS", "COMMA", 
		"LBRACE", "RBRACE", "LSQBR", "RSQBR", "LBRACKET", "RBRACKET", "ADD_OP", 
		"TAKE_OP", "MUL_OP", "DIV_OP", "POW_OP", "POINT", "BIN_OR", "BIN_AND", 
		"BIN_EQUALS", "GRTR_THAN", "LESS_THAN", "GRTR_THAN_ET", "LESS_THAN_ET", 
		"IDENTIFIER", "COMMENT", "WS", "UNKNOWN_SYMBOL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "algo.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2,\x10A\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x3\x2\x5\x2Y\n\x2\x3\x2\a\x2\\\n\x2\f\x2\xE\x2_\v\x2\x3\x2\x3"+
		"\x2\x3\x3\x5\x3\x64\n\x3\x3\x3\a\x3g\n\x3\f\x3\xE\x3j\v\x3\x3\x3\x3\x3"+
		"\x3\x3\x6\x3o\n\x3\r\x3\xE\x3p\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x5\x4|\n\x4\x3\x5\x3\x5\a\x5\x80\n\x5\f\x5\xE\x5\x83\v"+
		"\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b"+
		"\x3\b\x3\b\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f"+
		"\x3\r\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3"+
		"\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3"+
		"\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3"+
		"\x11\x3\x11\x3\x12\x3\x12\x3\x13\x3\x13\x3\x14\x3\x14\x3\x15\x3\x15\x3"+
		"\x16\x3\x16\x3\x17\x3\x17\x3\x18\x3\x18\x3\x19\x3\x19\x3\x1A\x3\x1A\x3"+
		"\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3"+
		" \x3 \x3!\x3!\x3\"\x3\"\x3#\x3#\x3#\x3$\x3$\x3%\x3%\x3&\x3&\x3&\x3\'\x3"+
		"\'\x3\'\x3(\x3(\a(\xF3\n(\f(\xE(\xF6\v(\x3)\x3)\x3)\x3)\a)\xFC\n)\f)\xE"+
		")\xFF\v)\x3)\x3)\x3)\x3)\x3*\x3*\x3*\x3*\x3+\x3+\x3\xFD\x2\x2,\x3\x2\x3"+
		"\x5\x2\x4\a\x2\x5\t\x2\x6\v\x2\a\r\x2\b\xF\x2\t\x11\x2\n\x13\x2\v\x15"+
		"\x2\f\x17\x2\r\x19\x2\xE\x1B\x2\xF\x1D\x2\x10\x1F\x2\x11!\x2\x12#\x2\x13"+
		"%\x2\x14\'\x2\x15)\x2\x16+\x2\x17-\x2\x18/\x2\x19\x31\x2\x1A\x33\x2\x1B"+
		"\x35\x2\x1C\x37\x2\x1D\x39\x2\x1E;\x2\x1F=\x2 ?\x2!\x41\x2\"\x43\x2#\x45"+
		"\x2$G\x2%I\x2&K\x2\'M\x2(O\x2)Q\x2*S\x2+U\x2,\x3\x2\b\x3\x2\x33;\x3\x2"+
		"\x32;\x3\x2$$\x5\x2\x43\\\x61\x61\x63|\x6\x2\x32;\x43\\\x61\x61\x63|\x5"+
		"\x2\v\f\xF\xF\"\"\x112\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2"+
		"\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2"+
		"\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17"+
		"\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2"+
		"\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2"+
		"\'\x3\x2\x2\x2\x2)\x3\x2\x2\x2\x2+\x3\x2\x2\x2\x2-\x3\x2\x2\x2\x2/\x3"+
		"\x2\x2\x2\x2\x31\x3\x2\x2\x2\x2\x33\x3\x2\x2\x2\x2\x35\x3\x2\x2\x2\x2"+
		"\x37\x3\x2\x2\x2\x2\x39\x3\x2\x2\x2\x2;\x3\x2\x2\x2\x2=\x3\x2\x2\x2\x2"+
		"?\x3\x2\x2\x2\x2\x41\x3\x2\x2\x2\x2\x43\x3\x2\x2\x2\x2\x45\x3\x2\x2\x2"+
		"\x2G\x3\x2\x2\x2\x2I\x3\x2\x2\x2\x2K\x3\x2\x2\x2\x2M\x3\x2\x2\x2\x2O\x3"+
		"\x2\x2\x2\x2Q\x3\x2\x2\x2\x2S\x3\x2\x2\x2\x2U\x3\x2\x2\x2\x3X\x3\x2\x2"+
		"\x2\x5\x63\x3\x2\x2\x2\a{\x3\x2\x2\x2\t}\x3\x2\x2\x2\v\x86\x3\x2\x2\x2"+
		"\r\x8A\x3\x2\x2\x2\xF\x8E\x3\x2\x2\x2\x11\x92\x3\x2\x2\x2\x13\x95\x3\x2"+
		"\x2\x2\x15\x98\x3\x2\x2\x2\x17\x9B\x3\x2\x2\x2\x19\x9E\x3\x2\x2\x2\x1B"+
		"\xA3\x3\x2\x2\x2\x1D\xAA\x3\x2\x2\x2\x1F\xB1\x3\x2\x2\x2!\xB7\x3\x2\x2"+
		"\x2#\xC1\x3\x2\x2\x2%\xC3\x3\x2\x2\x2\'\xC5\x3\x2\x2\x2)\xC7\x3\x2\x2"+
		"\x2+\xC9\x3\x2\x2\x2-\xCB\x3\x2\x2\x2/\xCD\x3\x2\x2\x2\x31\xCF\x3\x2\x2"+
		"\x2\x33\xD1\x3\x2\x2\x2\x35\xD3\x3\x2\x2\x2\x37\xD5\x3\x2\x2\x2\x39\xD7"+
		"\x3\x2\x2\x2;\xD9\x3\x2\x2\x2=\xDB\x3\x2\x2\x2?\xDD\x3\x2\x2\x2\x41\xDF"+
		"\x3\x2\x2\x2\x43\xE1\x3\x2\x2\x2\x45\xE3\x3\x2\x2\x2G\xE6\x3\x2\x2\x2"+
		"I\xE8\x3\x2\x2\x2K\xEA\x3\x2\x2\x2M\xED\x3\x2\x2\x2O\xF0\x3\x2\x2\x2Q"+
		"\xF7\x3\x2\x2\x2S\x104\x3\x2\x2\x2U\x108\x3\x2\x2\x2WY\a/\x2\x2XW\x3\x2"+
		"\x2\x2XY\x3\x2\x2\x2Y]\x3\x2\x2\x2Z\\\t\x2\x2\x2[Z\x3\x2\x2\x2\\_\x3\x2"+
		"\x2\x2][\x3\x2\x2\x2]^\x3\x2\x2\x2^`\x3\x2\x2\x2_]\x3\x2\x2\x2`\x61\t"+
		"\x3\x2\x2\x61\x4\x3\x2\x2\x2\x62\x64\a/\x2\x2\x63\x62\x3\x2\x2\x2\x63"+
		"\x64\x3\x2\x2\x2\x64h\x3\x2\x2\x2\x65g\t\x2\x2\x2\x66\x65\x3\x2\x2\x2"+
		"gj\x3\x2\x2\x2h\x66\x3\x2\x2\x2hi\x3\x2\x2\x2ik\x3\x2\x2\x2jh\x3\x2\x2"+
		"\x2kl\t\x3\x2\x2ln\a\x30\x2\x2mo\t\x3\x2\x2nm\x3\x2\x2\x2op\x3\x2\x2\x2"+
		"pn\x3\x2\x2\x2pq\x3\x2\x2\x2q\x6\x3\x2\x2\x2rs\av\x2\x2st\at\x2\x2tu\a"+
		"w\x2\x2u|\ag\x2\x2vw\ah\x2\x2wx\a\x63\x2\x2xy\an\x2\x2yz\au\x2\x2z|\a"+
		"g\x2\x2{r\x3\x2\x2\x2{v\x3\x2\x2\x2|\b\x3\x2\x2\x2}\x81\a$\x2\x2~\x80"+
		"\n\x4\x2\x2\x7F~\x3\x2\x2\x2\x80\x83\x3\x2\x2\x2\x81\x7F\x3\x2\x2\x2\x81"+
		"\x82\x3\x2\x2\x2\x82\x84\x3\x2\x2\x2\x83\x81\x3\x2\x2\x2\x84\x85\a$\x2"+
		"\x2\x85\n\x3\x2\x2\x2\x86\x87\x5\x3\x2\x2\x87\x88\a\x31\x2\x2\x88\x89"+
		"\x5\x3\x2\x2\x89\f\x3\x2\x2\x2\x8A\x8B\an\x2\x2\x8B\x8C\ag\x2\x2\x8C\x8D"+
		"\av\x2\x2\x8D\xE\x3\x2\x2\x2\x8E\x8F\ah\x2\x2\x8F\x90\aq\x2\x2\x90\x91"+
		"\at\x2\x2\x91\x10\x3\x2\x2\x2\x92\x93\ak\x2\x2\x93\x94\ap\x2\x2\x94\x12"+
		"\x3\x2\x2\x2\x95\x96\ak\x2\x2\x96\x97\ah\x2\x2\x97\x14\x3\x2\x2\x2\x98"+
		"\x99\av\x2\x2\x99\x9A\aq\x2\x2\x9A\x16\x3\x2\x2\x2\x9B\x9C\au\x2\x2\x9C"+
		"\x9D\ah\x2\x2\x9D\x18\x3\x2\x2\x2\x9E\x9F\ag\x2\x2\x9F\xA0\an\x2\x2\xA0"+
		"\xA1\au\x2\x2\xA1\xA2\ag\x2\x2\xA2\x1A\x3\x2\x2\x2\xA3\xA4\ak\x2\x2\xA4"+
		"\xA5\ao\x2\x2\xA5\xA6\ar\x2\x2\xA6\xA7\aq\x2\x2\xA7\xA8\at\x2\x2\xA8\xA9"+
		"\av\x2\x2\xA9\x1C\x3\x2\x2\x2\xAA\xAB\at\x2\x2\xAB\xAC\ag\x2\x2\xAC\xAD"+
		"\av\x2\x2\xAD\xAE\aw\x2\x2\xAE\xAF\at\x2\x2\xAF\xB0\ap\x2\x2\xB0\x1E\x3"+
		"\x2\x2\x2\xB1\xB2\ar\x2\x2\xB2\xB3\at\x2\x2\xB3\xB4\ak\x2\x2\xB4\xB5\a"+
		"p\x2\x2\xB5\xB6\av\x2\x2\xB6 \x3\x2\x2\x2\xB7\xB8\a\x66\x2\x2\xB8\xB9"+
		"\ak\x2\x2\xB9\xBA\au\x2\x2\xBA\xBB\at\x2\x2\xBB\xBC\ag\x2\x2\xBC\xBD\a"+
		"i\x2\x2\xBD\xBE\a\x63\x2\x2\xBE\xBF\at\x2\x2\xBF\xC0\a\x66\x2\x2\xC0\""+
		"\x3\x2\x2\x2\xC1\xC2\a=\x2\x2\xC2$\x3\x2\x2\x2\xC3\xC4\a?\x2\x2\xC4&\x3"+
		"\x2\x2\x2\xC5\xC6\a.\x2\x2\xC6(\x3\x2\x2\x2\xC7\xC8\a}\x2\x2\xC8*\x3\x2"+
		"\x2\x2\xC9\xCA\a\x7F\x2\x2\xCA,\x3\x2\x2\x2\xCB\xCC\a]\x2\x2\xCC.\x3\x2"+
		"\x2\x2\xCD\xCE\a_\x2\x2\xCE\x30\x3\x2\x2\x2\xCF\xD0\a*\x2\x2\xD0\x32\x3"+
		"\x2\x2\x2\xD1\xD2\a+\x2\x2\xD2\x34\x3\x2\x2\x2\xD3\xD4\a-\x2\x2\xD4\x36"+
		"\x3\x2\x2\x2\xD5\xD6\a/\x2\x2\xD6\x38\x3\x2\x2\x2\xD7\xD8\a,\x2\x2\xD8"+
		":\x3\x2\x2\x2\xD9\xDA\a\x31\x2\x2\xDA<\x3\x2\x2\x2\xDB\xDC\a`\x2\x2\xDC"+
		">\x3\x2\x2\x2\xDD\xDE\a\x30\x2\x2\xDE@\x3\x2\x2\x2\xDF\xE0\a~\x2\x2\xE0"+
		"\x42\x3\x2\x2\x2\xE1\xE2\a(\x2\x2\xE2\x44\x3\x2\x2\x2\xE3\xE4\a?\x2\x2"+
		"\xE4\xE5\a?\x2\x2\xE5\x46\x3\x2\x2\x2\xE6\xE7\a@\x2\x2\xE7H\x3\x2\x2\x2"+
		"\xE8\xE9\a>\x2\x2\xE9J\x3\x2\x2\x2\xEA\xEB\a@\x2\x2\xEB\xEC\a?\x2\x2\xEC"+
		"L\x3\x2\x2\x2\xED\xEE\a>\x2\x2\xEE\xEF\a?\x2\x2\xEFN\x3\x2\x2\x2\xF0\xF4"+
		"\t\x5\x2\x2\xF1\xF3\t\x6\x2\x2\xF2\xF1\x3\x2\x2\x2\xF3\xF6\x3\x2\x2\x2"+
		"\xF4\xF2\x3\x2\x2\x2\xF4\xF5\x3\x2\x2\x2\xF5P\x3\x2\x2\x2\xF6\xF4\x3\x2"+
		"\x2\x2\xF7\xF8\a\x31\x2\x2\xF8\xF9\a\x31\x2\x2\xF9\xFD\x3\x2\x2\x2\xFA"+
		"\xFC\v\x2\x2\x2\xFB\xFA\x3\x2\x2\x2\xFC\xFF\x3\x2\x2\x2\xFD\xFE\x3\x2"+
		"\x2\x2\xFD\xFB\x3\x2\x2\x2\xFE\x100\x3\x2\x2\x2\xFF\xFD\x3\x2\x2\x2\x100"+
		"\x101\a\f\x2\x2\x101\x102\x3\x2\x2\x2\x102\x103\b)\x2\x2\x103R\x3\x2\x2"+
		"\x2\x104\x105\t\a\x2\x2\x105\x106\x3\x2\x2\x2\x106\x107\b*\x2\x2\x107"+
		"T\x3\x2\x2\x2\x108\x109\v\x2\x2\x2\x109V\x3\x2\x2\x2\f\x2X]\x63hp{\x81"+
		"\xF4\xFD\x3\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Algo
