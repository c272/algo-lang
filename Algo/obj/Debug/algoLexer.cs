//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\Files\Programming\GitHub\algo\Algo\Parsing\algo.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Algo {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class algoLexer : Lexer {
	public const int
		INTEGER=1, FLOAT=2, BOOLEAN=3, STRING=4, RATIONAL=5, NULL=6, LET_SYM=7, 
		FOR_SYM=8, FOREACH_SYM=9, ADD_SYM=10, BREAK_SYM=11, AT_SYM=12, REMOVE_SYM=13, 
		FROM_SYM=14, WHILE_SYM=15, IN_SYM=16, IF_SYM=17, UP_SYM=18, TO_SYM=19, 
		AS_SYM=20, ENUM_SYM=21, LIB_SYM=22, SIG_FIG_SYM=23, OBJ_SYM=24, ELSE_SYM=25, 
		IMPORT_SYM=26, RETURN_SYM=27, PRINT_SYM=28, DISREGARD_SYM=29, EXTERNAL_SYM=30, 
		ENDLINE=31, EQUALS=32, COMMA=33, LBRACE=34, RBRACE=35, LSQBR=36, RSQBR=37, 
		INVERT_SYM=38, STREAMING_SYM=39, LBRACKET=40, RBRACKET=41, ADD_OP=42, 
		TAKE_OP=43, MUL_OP=44, DIV_OP=45, POW_OP=46, MOD_OP=47, POINT=48, ADDFROM_OP=49, 
		TAKEFROM_OP=50, DIVFROM_OP=51, MULFROM_OP=52, ADD_PFOP=53, TAKE_PFOP=54, 
		BIN_OR=55, BIN_AND=56, BIN_NET=57, BIN_EQUALS=58, GRTR_THAN=59, LESS_THAN=60, 
		GRTR_THAN_ET=61, LESS_THAN_ET=62, IDENTIFIER=63, COMMENT=64, WS=65, UNKNOWN_SYMBOL=66;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"INTEGER", "FLOAT", "BOOLEAN", "STRING", "RATIONAL", "NULL", "LET_SYM", 
		"FOR_SYM", "FOREACH_SYM", "ADD_SYM", "BREAK_SYM", "AT_SYM", "REMOVE_SYM", 
		"FROM_SYM", "WHILE_SYM", "IN_SYM", "IF_SYM", "UP_SYM", "TO_SYM", "AS_SYM", 
		"ENUM_SYM", "LIB_SYM", "SIG_FIG_SYM", "OBJ_SYM", "ELSE_SYM", "IMPORT_SYM", 
		"RETURN_SYM", "PRINT_SYM", "DISREGARD_SYM", "EXTERNAL_SYM", "ENDLINE", 
		"EQUALS", "COMMA", "LBRACE", "RBRACE", "LSQBR", "RSQBR", "INVERT_SYM", 
		"STREAMING_SYM", "LBRACKET", "RBRACKET", "ADD_OP", "TAKE_OP", "MUL_OP", 
		"DIV_OP", "POW_OP", "MOD_OP", "POINT", "ADDFROM_OP", "TAKEFROM_OP", "DIVFROM_OP", 
		"MULFROM_OP", "ADD_PFOP", "TAKE_PFOP", "BIN_OR", "BIN_AND", "BIN_NET", 
		"BIN_EQUALS", "GRTR_THAN", "LESS_THAN", "GRTR_THAN_ET", "LESS_THAN_ET", 
		"IDENTIFIER", "COMMENT", "WS", "UNKNOWN_SYMBOL"
	};


	public algoLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'null'", "'let'", "'for'", "'foreach'", 
		"'add'", "'break'", "'at'", "'remove'", "'from'", "'while'", "'in'", "'if'", 
		"'up'", "'to'", "'as'", "'enum'", "'library'", "'sf'", "'object'", "'else'", 
		"'import'", "'return'", "'print'", "'disregard'", "'external'", "';'", 
		"'='", "','", "'{'", "'}'", "'['", "']'", "'!'", "'<-'", "'('", "')'", 
		"'+'", "'-'", "'*'", "'/'", "'^'", "'%'", "'.'", "'+='", "'-='", "'/='", 
		"'*='", "'++'", "'--'", "'|'", "'&'", "'!='", "'=='", "'>'", "'<'", "'>='", 
		"'<='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INTEGER", "FLOAT", "BOOLEAN", "STRING", "RATIONAL", "NULL", "LET_SYM", 
		"FOR_SYM", "FOREACH_SYM", "ADD_SYM", "BREAK_SYM", "AT_SYM", "REMOVE_SYM", 
		"FROM_SYM", "WHILE_SYM", "IN_SYM", "IF_SYM", "UP_SYM", "TO_SYM", "AS_SYM", 
		"ENUM_SYM", "LIB_SYM", "SIG_FIG_SYM", "OBJ_SYM", "ELSE_SYM", "IMPORT_SYM", 
		"RETURN_SYM", "PRINT_SYM", "DISREGARD_SYM", "EXTERNAL_SYM", "ENDLINE", 
		"EQUALS", "COMMA", "LBRACE", "RBRACE", "LSQBR", "RSQBR", "INVERT_SYM", 
		"STREAMING_SYM", "LBRACKET", "RBRACKET", "ADD_OP", "TAKE_OP", "MUL_OP", 
		"DIV_OP", "POW_OP", "MOD_OP", "POINT", "ADDFROM_OP", "TAKEFROM_OP", "DIVFROM_OP", 
		"MULFROM_OP", "ADD_PFOP", "TAKE_PFOP", "BIN_OR", "BIN_AND", "BIN_NET", 
		"BIN_EQUALS", "GRTR_THAN", "LESS_THAN", "GRTR_THAN_ET", "LESS_THAN_ET", 
		"IDENTIFIER", "COMMENT", "WS", "UNKNOWN_SYMBOL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "algo.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\x44\x1B5\b\x1\x4"+
		"\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b"+
		"\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4"+
		"\x10\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15"+
		"\t\x15\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A"+
		"\x4\x1B\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 "+
		"\t \x4!\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t"+
		")\x4*\t*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31"+
		"\x4\x32\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37"+
		"\t\x37\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4"+
		"?\t?\x4@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x3\x2\x5\x2\x89\n\x2"+
		"\x3\x2\x3\x2\a\x2\x8D\n\x2\f\x2\xE\x2\x90\v\x2\x3\x2\x5\x2\x93\n\x2\x3"+
		"\x3\x5\x3\x96\n\x3\x3\x3\a\x3\x99\n\x3\f\x3\xE\x3\x9C\v\x3\x3\x3\x3\x3"+
		"\x3\x3\x6\x3\xA1\n\x3\r\x3\xE\x3\xA2\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x5\x4\xAE\n\x4\x3\x5\x3\x5\x3\x5\x3\x5\a\x5\xB4"+
		"\n\x5\f\x5\xE\x5\xB7\v\x5\x3\x5\x3\x5\x3\x6\x3\x6\a\x6\xBD\n\x6\f\x6\xE"+
		"\x6\xC0\v\x6\x3\x6\x3\x6\a\x6\xC4\n\x6\f\x6\xE\x6\xC7\v\x6\x3\x6\x3\x6"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\n"+
		"\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f"+
		"\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3"+
		"\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3"+
		"\x10\x3\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3"+
		"\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3"+
		"\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x18\x3"+
		"\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x1A\x3"+
		"\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3"+
		"\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3"+
		"\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3"+
		"\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3"+
		"\x1F\x3\x1F\x3\x1F\x3 \x3 \x3!\x3!\x3\"\x3\"\x3#\x3#\x3$\x3$\x3%\x3%\x3"+
		"&\x3&\x3\'\x3\'\x3(\x3(\x3(\x3)\x3)\x3*\x3*\x3+\x3+\x3,\x3,\x3-\x3-\x3"+
		".\x3.\x3/\x3/\x3\x30\x3\x30\x3\x31\x3\x31\x3\x32\x3\x32\x3\x32\x3\x33"+
		"\x3\x33\x3\x33\x3\x34\x3\x34\x3\x34\x3\x35\x3\x35\x3\x35\x3\x36\x3\x36"+
		"\x3\x36\x3\x37\x3\x37\x3\x37\x3\x38\x3\x38\x3\x39\x3\x39\x3:\x3:\x3:\x3"+
		";\x3;\x3;\x3<\x3<\x3=\x3=\x3>\x3>\x3>\x3?\x3?\x3?\x3@\x3@\a@\x19E\n@\f"+
		"@\xE@\x1A1\v@\x3\x41\x3\x41\x3\x41\x3\x41\a\x41\x1A7\n\x41\f\x41\xE\x41"+
		"\x1AA\v\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x42\x3\x42\x3\x42\x3\x42\x3"+
		"\x43\x3\x43\x3\x1A8\x2\x2\x44\x3\x2\x3\x5\x2\x4\a\x2\x5\t\x2\x6\v\x2\a"+
		"\r\x2\b\xF\x2\t\x11\x2\n\x13\x2\v\x15\x2\f\x17\x2\r\x19\x2\xE\x1B\x2\xF"+
		"\x1D\x2\x10\x1F\x2\x11!\x2\x12#\x2\x13%\x2\x14\'\x2\x15)\x2\x16+\x2\x17"+
		"-\x2\x18/\x2\x19\x31\x2\x1A\x33\x2\x1B\x35\x2\x1C\x37\x2\x1D\x39\x2\x1E"+
		";\x2\x1F=\x2 ?\x2!\x41\x2\"\x43\x2#\x45\x2$G\x2%I\x2&K\x2\'M\x2(O\x2)"+
		"Q\x2*S\x2+U\x2,W\x2-Y\x2.[\x2/]\x2\x30_\x2\x31\x61\x2\x32\x63\x2\x33\x65"+
		"\x2\x34g\x2\x35i\x2\x36k\x2\x37m\x2\x38o\x2\x39q\x2:s\x2;u\x2<w\x2=y\x2"+
		">{\x2?}\x2@\x7F\x2\x41\x81\x2\x42\x83\x2\x43\x85\x2\x44\x3\x2\t\x3\x2"+
		"\x33;\x3\x2\x32;\x3\x2$$\x3\x2\"\"\x5\x2\x43\\\x61\x61\x63|\x6\x2\x32"+
		";\x43\\\x61\x61\x63|\x5\x2\v\f\xF\xF\"\"\x1C1\x2\x3\x3\x2\x2\x2\x2\x5"+
		"\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3"+
		"\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15"+
		"\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2"+
		"\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2"+
		"\x2%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2\x2)\x3\x2\x2\x2\x2+\x3\x2\x2\x2\x2-"+
		"\x3\x2\x2\x2\x2/\x3\x2\x2\x2\x2\x31\x3\x2\x2\x2\x2\x33\x3\x2\x2\x2\x2"+
		"\x35\x3\x2\x2\x2\x2\x37\x3\x2\x2\x2\x2\x39\x3\x2\x2\x2\x2;\x3\x2\x2\x2"+
		"\x2=\x3\x2\x2\x2\x2?\x3\x2\x2\x2\x2\x41\x3\x2\x2\x2\x2\x43\x3\x2\x2\x2"+
		"\x2\x45\x3\x2\x2\x2\x2G\x3\x2\x2\x2\x2I\x3\x2\x2\x2\x2K\x3\x2\x2\x2\x2"+
		"M\x3\x2\x2\x2\x2O\x3\x2\x2\x2\x2Q\x3\x2\x2\x2\x2S\x3\x2\x2\x2\x2U\x3\x2"+
		"\x2\x2\x2W\x3\x2\x2\x2\x2Y\x3\x2\x2\x2\x2[\x3\x2\x2\x2\x2]\x3\x2\x2\x2"+
		"\x2_\x3\x2\x2\x2\x2\x61\x3\x2\x2\x2\x2\x63\x3\x2\x2\x2\x2\x65\x3\x2\x2"+
		"\x2\x2g\x3\x2\x2\x2\x2i\x3\x2\x2\x2\x2k\x3\x2\x2\x2\x2m\x3\x2\x2\x2\x2"+
		"o\x3\x2\x2\x2\x2q\x3\x2\x2\x2\x2s\x3\x2\x2\x2\x2u\x3\x2\x2\x2\x2w\x3\x2"+
		"\x2\x2\x2y\x3\x2\x2\x2\x2{\x3\x2\x2\x2\x2}\x3\x2\x2\x2\x2\x7F\x3\x2\x2"+
		"\x2\x2\x81\x3\x2\x2\x2\x2\x83\x3\x2\x2\x2\x2\x85\x3\x2\x2\x2\x3\x92\x3"+
		"\x2\x2\x2\x5\x95\x3\x2\x2\x2\a\xAD\x3\x2\x2\x2\t\xAF\x3\x2\x2\x2\v\xBA"+
		"\x3\x2\x2\x2\r\xCA\x3\x2\x2\x2\xF\xCF\x3\x2\x2\x2\x11\xD3\x3\x2\x2\x2"+
		"\x13\xD7\x3\x2\x2\x2\x15\xDF\x3\x2\x2\x2\x17\xE3\x3\x2\x2\x2\x19\xE9\x3"+
		"\x2\x2\x2\x1B\xEC\x3\x2\x2\x2\x1D\xF3\x3\x2\x2\x2\x1F\xF8\x3\x2\x2\x2"+
		"!\xFE\x3\x2\x2\x2#\x101\x3\x2\x2\x2%\x104\x3\x2\x2\x2\'\x107\x3\x2\x2"+
		"\x2)\x10A\x3\x2\x2\x2+\x10D\x3\x2\x2\x2-\x112\x3\x2\x2\x2/\x11A\x3\x2"+
		"\x2\x2\x31\x11D\x3\x2\x2\x2\x33\x124\x3\x2\x2\x2\x35\x129\x3\x2\x2\x2"+
		"\x37\x130\x3\x2\x2\x2\x39\x137\x3\x2\x2\x2;\x13D\x3\x2\x2\x2=\x147\x3"+
		"\x2\x2\x2?\x150\x3\x2\x2\x2\x41\x152\x3\x2\x2\x2\x43\x154\x3\x2\x2\x2"+
		"\x45\x156\x3\x2\x2\x2G\x158\x3\x2\x2\x2I\x15A\x3\x2\x2\x2K\x15C\x3\x2"+
		"\x2\x2M\x15E\x3\x2\x2\x2O\x160\x3\x2\x2\x2Q\x163\x3\x2\x2\x2S\x165\x3"+
		"\x2\x2\x2U\x167\x3\x2\x2\x2W\x169\x3\x2\x2\x2Y\x16B\x3\x2\x2\x2[\x16D"+
		"\x3\x2\x2\x2]\x16F\x3\x2\x2\x2_\x171\x3\x2\x2\x2\x61\x173\x3\x2\x2\x2"+
		"\x63\x175\x3\x2\x2\x2\x65\x178\x3\x2\x2\x2g\x17B\x3\x2\x2\x2i\x17E\x3"+
		"\x2\x2\x2k\x181\x3\x2\x2\x2m\x184\x3\x2\x2\x2o\x187\x3\x2\x2\x2q\x189"+
		"\x3\x2\x2\x2s\x18B\x3\x2\x2\x2u\x18E\x3\x2\x2\x2w\x191\x3\x2\x2\x2y\x193"+
		"\x3\x2\x2\x2{\x195\x3\x2\x2\x2}\x198\x3\x2\x2\x2\x7F\x19B\x3\x2\x2\x2"+
		"\x81\x1A2\x3\x2\x2\x2\x83\x1AF\x3\x2\x2\x2\x85\x1B3\x3\x2\x2\x2\x87\x89"+
		"\a/\x2\x2\x88\x87\x3\x2\x2\x2\x88\x89\x3\x2\x2\x2\x89\x8A\x3\x2\x2\x2"+
		"\x8A\x8E\t\x2\x2\x2\x8B\x8D\t\x3\x2\x2\x8C\x8B\x3\x2\x2\x2\x8D\x90\x3"+
		"\x2\x2\x2\x8E\x8C\x3\x2\x2\x2\x8E\x8F\x3\x2\x2\x2\x8F\x93\x3\x2\x2\x2"+
		"\x90\x8E\x3\x2\x2\x2\x91\x93\a\x32\x2\x2\x92\x88\x3\x2\x2\x2\x92\x91\x3"+
		"\x2\x2\x2\x93\x4\x3\x2\x2\x2\x94\x96\a/\x2\x2\x95\x94\x3\x2\x2\x2\x95"+
		"\x96\x3\x2\x2\x2\x96\x9A\x3\x2\x2\x2\x97\x99\t\x2\x2\x2\x98\x97\x3\x2"+
		"\x2\x2\x99\x9C\x3\x2\x2\x2\x9A\x98\x3\x2\x2\x2\x9A\x9B\x3\x2\x2\x2\x9B"+
		"\x9D\x3\x2\x2\x2\x9C\x9A\x3\x2\x2\x2\x9D\x9E\t\x3\x2\x2\x9E\xA0\a\x30"+
		"\x2\x2\x9F\xA1\t\x3\x2\x2\xA0\x9F\x3\x2\x2\x2\xA1\xA2\x3\x2\x2\x2\xA2"+
		"\xA0\x3\x2\x2\x2\xA2\xA3\x3\x2\x2\x2\xA3\x6\x3\x2\x2\x2\xA4\xA5\av\x2"+
		"\x2\xA5\xA6\at\x2\x2\xA6\xA7\aw\x2\x2\xA7\xAE\ag\x2\x2\xA8\xA9\ah\x2\x2"+
		"\xA9\xAA\a\x63\x2\x2\xAA\xAB\an\x2\x2\xAB\xAC\au\x2\x2\xAC\xAE\ag\x2\x2"+
		"\xAD\xA4\x3\x2\x2\x2\xAD\xA8\x3\x2\x2\x2\xAE\b\x3\x2\x2\x2\xAF\xB5\a$"+
		"\x2\x2\xB0\xB4\n\x4\x2\x2\xB1\xB2\a^\x2\x2\xB2\xB4\a$\x2\x2\xB3\xB0\x3"+
		"\x2\x2\x2\xB3\xB1\x3\x2\x2\x2\xB4\xB7\x3\x2\x2\x2\xB5\xB3\x3\x2\x2\x2"+
		"\xB5\xB6\x3\x2\x2\x2\xB6\xB8\x3\x2\x2\x2\xB7\xB5\x3\x2\x2\x2\xB8\xB9\a"+
		"$\x2\x2\xB9\n\x3\x2\x2\x2\xBA\xBE\x5\x3\x2\x2\xBB\xBD\t\x5\x2\x2\xBC\xBB"+
		"\x3\x2\x2\x2\xBD\xC0\x3\x2\x2\x2\xBE\xBC\x3\x2\x2\x2\xBE\xBF\x3\x2\x2"+
		"\x2\xBF\xC1\x3\x2\x2\x2\xC0\xBE\x3\x2\x2\x2\xC1\xC5\x5[.\x2\xC2\xC4\t"+
		"\x5\x2\x2\xC3\xC2\x3\x2\x2\x2\xC4\xC7\x3\x2\x2\x2\xC5\xC3\x3\x2\x2\x2"+
		"\xC5\xC6\x3\x2\x2\x2\xC6\xC8\x3\x2\x2\x2\xC7\xC5\x3\x2\x2\x2\xC8\xC9\x5"+
		"\x3\x2\x2\xC9\f\x3\x2\x2\x2\xCA\xCB\ap\x2\x2\xCB\xCC\aw\x2\x2\xCC\xCD"+
		"\an\x2\x2\xCD\xCE\an\x2\x2\xCE\xE\x3\x2\x2\x2\xCF\xD0\an\x2\x2\xD0\xD1"+
		"\ag\x2\x2\xD1\xD2\av\x2\x2\xD2\x10\x3\x2\x2\x2\xD3\xD4\ah\x2\x2\xD4\xD5"+
		"\aq\x2\x2\xD5\xD6\at\x2\x2\xD6\x12\x3\x2\x2\x2\xD7\xD8\ah\x2\x2\xD8\xD9"+
		"\aq\x2\x2\xD9\xDA\at\x2\x2\xDA\xDB\ag\x2\x2\xDB\xDC\a\x63\x2\x2\xDC\xDD"+
		"\a\x65\x2\x2\xDD\xDE\aj\x2\x2\xDE\x14\x3\x2\x2\x2\xDF\xE0\a\x63\x2\x2"+
		"\xE0\xE1\a\x66\x2\x2\xE1\xE2\a\x66\x2\x2\xE2\x16\x3\x2\x2\x2\xE3\xE4\a"+
		"\x64\x2\x2\xE4\xE5\at\x2\x2\xE5\xE6\ag\x2\x2\xE6\xE7\a\x63\x2\x2\xE7\xE8"+
		"\am\x2\x2\xE8\x18\x3\x2\x2\x2\xE9\xEA\a\x63\x2\x2\xEA\xEB\av\x2\x2\xEB"+
		"\x1A\x3\x2\x2\x2\xEC\xED\at\x2\x2\xED\xEE\ag\x2\x2\xEE\xEF\ao\x2\x2\xEF"+
		"\xF0\aq\x2\x2\xF0\xF1\ax\x2\x2\xF1\xF2\ag\x2\x2\xF2\x1C\x3\x2\x2\x2\xF3"+
		"\xF4\ah\x2\x2\xF4\xF5\at\x2\x2\xF5\xF6\aq\x2\x2\xF6\xF7\ao\x2\x2\xF7\x1E"+
		"\x3\x2\x2\x2\xF8\xF9\ay\x2\x2\xF9\xFA\aj\x2\x2\xFA\xFB\ak\x2\x2\xFB\xFC"+
		"\an\x2\x2\xFC\xFD\ag\x2\x2\xFD \x3\x2\x2\x2\xFE\xFF\ak\x2\x2\xFF\x100"+
		"\ap\x2\x2\x100\"\x3\x2\x2\x2\x101\x102\ak\x2\x2\x102\x103\ah\x2\x2\x103"+
		"$\x3\x2\x2\x2\x104\x105\aw\x2\x2\x105\x106\ar\x2\x2\x106&\x3\x2\x2\x2"+
		"\x107\x108\av\x2\x2\x108\x109\aq\x2\x2\x109(\x3\x2\x2\x2\x10A\x10B\a\x63"+
		"\x2\x2\x10B\x10C\au\x2\x2\x10C*\x3\x2\x2\x2\x10D\x10E\ag\x2\x2\x10E\x10F"+
		"\ap\x2\x2\x10F\x110\aw\x2\x2\x110\x111\ao\x2\x2\x111,\x3\x2\x2\x2\x112"+
		"\x113\an\x2\x2\x113\x114\ak\x2\x2\x114\x115\a\x64\x2\x2\x115\x116\at\x2"+
		"\x2\x116\x117\a\x63\x2\x2\x117\x118\at\x2\x2\x118\x119\a{\x2\x2\x119."+
		"\x3\x2\x2\x2\x11A\x11B\au\x2\x2\x11B\x11C\ah\x2\x2\x11C\x30\x3\x2\x2\x2"+
		"\x11D\x11E\aq\x2\x2\x11E\x11F\a\x64\x2\x2\x11F\x120\al\x2\x2\x120\x121"+
		"\ag\x2\x2\x121\x122\a\x65\x2\x2\x122\x123\av\x2\x2\x123\x32\x3\x2\x2\x2"+
		"\x124\x125\ag\x2\x2\x125\x126\an\x2\x2\x126\x127\au\x2\x2\x127\x128\a"+
		"g\x2\x2\x128\x34\x3\x2\x2\x2\x129\x12A\ak\x2\x2\x12A\x12B\ao\x2\x2\x12B"+
		"\x12C\ar\x2\x2\x12C\x12D\aq\x2\x2\x12D\x12E\at\x2\x2\x12E\x12F\av\x2\x2"+
		"\x12F\x36\x3\x2\x2\x2\x130\x131\at\x2\x2\x131\x132\ag\x2\x2\x132\x133"+
		"\av\x2\x2\x133\x134\aw\x2\x2\x134\x135\at\x2\x2\x135\x136\ap\x2\x2\x136"+
		"\x38\x3\x2\x2\x2\x137\x138\ar\x2\x2\x138\x139\at\x2\x2\x139\x13A\ak\x2"+
		"\x2\x13A\x13B\ap\x2\x2\x13B\x13C\av\x2\x2\x13C:\x3\x2\x2\x2\x13D\x13E"+
		"\a\x66\x2\x2\x13E\x13F\ak\x2\x2\x13F\x140\au\x2\x2\x140\x141\at\x2\x2"+
		"\x141\x142\ag\x2\x2\x142\x143\ai\x2\x2\x143\x144\a\x63\x2\x2\x144\x145"+
		"\at\x2\x2\x145\x146\a\x66\x2\x2\x146<\x3\x2\x2\x2\x147\x148\ag\x2\x2\x148"+
		"\x149\az\x2\x2\x149\x14A\av\x2\x2\x14A\x14B\ag\x2\x2\x14B\x14C\at\x2\x2"+
		"\x14C\x14D\ap\x2\x2\x14D\x14E\a\x63\x2\x2\x14E\x14F\an\x2\x2\x14F>\x3"+
		"\x2\x2\x2\x150\x151\a=\x2\x2\x151@\x3\x2\x2\x2\x152\x153\a?\x2\x2\x153"+
		"\x42\x3\x2\x2\x2\x154\x155\a.\x2\x2\x155\x44\x3\x2\x2\x2\x156\x157\a}"+
		"\x2\x2\x157\x46\x3\x2\x2\x2\x158\x159\a\x7F\x2\x2\x159H\x3\x2\x2\x2\x15A"+
		"\x15B\a]\x2\x2\x15BJ\x3\x2\x2\x2\x15C\x15D\a_\x2\x2\x15DL\x3\x2\x2\x2"+
		"\x15E\x15F\a#\x2\x2\x15FN\x3\x2\x2\x2\x160\x161\a>\x2\x2\x161\x162\a/"+
		"\x2\x2\x162P\x3\x2\x2\x2\x163\x164\a*\x2\x2\x164R\x3\x2\x2\x2\x165\x166"+
		"\a+\x2\x2\x166T\x3\x2\x2\x2\x167\x168\a-\x2\x2\x168V\x3\x2\x2\x2\x169"+
		"\x16A\a/\x2\x2\x16AX\x3\x2\x2\x2\x16B\x16C\a,\x2\x2\x16CZ\x3\x2\x2\x2"+
		"\x16D\x16E\a\x31\x2\x2\x16E\\\x3\x2\x2\x2\x16F\x170\a`\x2\x2\x170^\x3"+
		"\x2\x2\x2\x171\x172\a\'\x2\x2\x172`\x3\x2\x2\x2\x173\x174\a\x30\x2\x2"+
		"\x174\x62\x3\x2\x2\x2\x175\x176\a-\x2\x2\x176\x177\a?\x2\x2\x177\x64\x3"+
		"\x2\x2\x2\x178\x179\a/\x2\x2\x179\x17A\a?\x2\x2\x17A\x66\x3\x2\x2\x2\x17B"+
		"\x17C\a\x31\x2\x2\x17C\x17D\a?\x2\x2\x17Dh\x3\x2\x2\x2\x17E\x17F\a,\x2"+
		"\x2\x17F\x180\a?\x2\x2\x180j\x3\x2\x2\x2\x181\x182\a-\x2\x2\x182\x183"+
		"\a-\x2\x2\x183l\x3\x2\x2\x2\x184\x185\a/\x2\x2\x185\x186\a/\x2\x2\x186"+
		"n\x3\x2\x2\x2\x187\x188\a~\x2\x2\x188p\x3\x2\x2\x2\x189\x18A\a(\x2\x2"+
		"\x18Ar\x3\x2\x2\x2\x18B\x18C\a#\x2\x2\x18C\x18D\a?\x2\x2\x18Dt\x3\x2\x2"+
		"\x2\x18E\x18F\a?\x2\x2\x18F\x190\a?\x2\x2\x190v\x3\x2\x2\x2\x191\x192"+
		"\a@\x2\x2\x192x\x3\x2\x2\x2\x193\x194\a>\x2\x2\x194z\x3\x2\x2\x2\x195"+
		"\x196\a@\x2\x2\x196\x197\a?\x2\x2\x197|\x3\x2\x2\x2\x198\x199\a>\x2\x2"+
		"\x199\x19A\a?\x2\x2\x19A~\x3\x2\x2\x2\x19B\x19F\t\x6\x2\x2\x19C\x19E\t"+
		"\a\x2\x2\x19D\x19C\x3\x2\x2\x2\x19E\x1A1\x3\x2\x2\x2\x19F\x19D\x3\x2\x2"+
		"\x2\x19F\x1A0\x3\x2\x2\x2\x1A0\x80\x3\x2\x2\x2\x1A1\x19F\x3\x2\x2\x2\x1A2"+
		"\x1A3\a\x31\x2\x2\x1A3\x1A4\a\x31\x2\x2\x1A4\x1A8\x3\x2\x2\x2\x1A5\x1A7"+
		"\v\x2\x2\x2\x1A6\x1A5\x3\x2\x2\x2\x1A7\x1AA\x3\x2\x2\x2\x1A8\x1A9\x3\x2"+
		"\x2\x2\x1A8\x1A6\x3\x2\x2\x2\x1A9\x1AB\x3\x2\x2\x2\x1AA\x1A8\x3\x2\x2"+
		"\x2\x1AB\x1AC\a\f\x2\x2\x1AC\x1AD\x3\x2\x2\x2\x1AD\x1AE\b\x41\x2\x2\x1AE"+
		"\x82\x3\x2\x2\x2\x1AF\x1B0\t\b\x2\x2\x1B0\x1B1\x3\x2\x2\x2\x1B1\x1B2\b"+
		"\x42\x2\x2\x1B2\x84\x3\x2\x2\x2\x1B3\x1B4\v\x2\x2\x2\x1B4\x86\x3\x2\x2"+
		"\x2\x10\x2\x88\x8E\x92\x95\x9A\xA2\xAD\xB3\xB5\xBE\xC5\x19F\x1A8\x3\x2"+
		"\x3\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Algo
