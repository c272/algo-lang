//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\Files\Programming\GitHub\algo\Algo\Parsing\algo.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Algo {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class algoLexer : Lexer {
	public const int
		INTEGER=1, FLOAT=2, BOOLEAN=3, STRING=4, RATIONAL=5, NULL=6, LET_SYM=7, 
		FOR_SYM=8, WHILE_SYM=9, IN_SYM=10, IF_SYM=11, TO_SYM=12, LIB_SYM=13, SIG_FIG_SYM=14, 
		OBJ_SYM=15, ELSE_SYM=16, IMPORT_SYM=17, RETURN_SYM=18, PRINT_SYM=19, DISREGARD_SYM=20, 
		ENDLINE=21, EQUALS=22, COMMA=23, LBRACE=24, RBRACE=25, LSQBR=26, RSQBR=27, 
		LBRACKET=28, RBRACKET=29, ADD_OP=30, TAKE_OP=31, MUL_OP=32, DIV_OP=33, 
		POW_OP=34, POINT=35, ADDFROM_OP=36, TAKEFROM_OP=37, DIVFROM_OP=38, MULFROM_OP=39, 
		BIN_OR=40, BIN_AND=41, BIN_NET=42, BIN_EQUALS=43, GRTR_THAN=44, LESS_THAN=45, 
		GRTR_THAN_ET=46, LESS_THAN_ET=47, IDENTIFIER=48, COMMENT=49, WS=50, UNKNOWN_SYMBOL=51;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"INTEGER", "FLOAT", "BOOLEAN", "STRING", "RATIONAL", "NULL", "LET_SYM", 
		"FOR_SYM", "WHILE_SYM", "IN_SYM", "IF_SYM", "TO_SYM", "LIB_SYM", "SIG_FIG_SYM", 
		"OBJ_SYM", "ELSE_SYM", "IMPORT_SYM", "RETURN_SYM", "PRINT_SYM", "DISREGARD_SYM", 
		"ENDLINE", "EQUALS", "COMMA", "LBRACE", "RBRACE", "LSQBR", "RSQBR", "LBRACKET", 
		"RBRACKET", "ADD_OP", "TAKE_OP", "MUL_OP", "DIV_OP", "POW_OP", "POINT", 
		"ADDFROM_OP", "TAKEFROM_OP", "DIVFROM_OP", "MULFROM_OP", "BIN_OR", "BIN_AND", 
		"BIN_NET", "BIN_EQUALS", "GRTR_THAN", "LESS_THAN", "GRTR_THAN_ET", "LESS_THAN_ET", 
		"IDENTIFIER", "COMMENT", "WS", "UNKNOWN_SYMBOL"
	};


	public algoLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'null'", "'let'", "'for'", "'while'", 
		"'in'", "'if'", "'to'", "'library'", "'sf'", "'object'", "'else'", "'import'", 
		"'return'", "'print'", "'disregard'", "';'", "'='", "','", "'{'", "'}'", 
		"'['", "']'", "'('", "')'", "'+'", "'-'", "'*'", "'/'", "'^'", "'.'", 
		"'+='", "'-='", "'/='", "'*='", "'|'", "'&'", "'!='", "'=='", "'>'", "'<'", 
		"'>='", "'<='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INTEGER", "FLOAT", "BOOLEAN", "STRING", "RATIONAL", "NULL", "LET_SYM", 
		"FOR_SYM", "WHILE_SYM", "IN_SYM", "IF_SYM", "TO_SYM", "LIB_SYM", "SIG_FIG_SYM", 
		"OBJ_SYM", "ELSE_SYM", "IMPORT_SYM", "RETURN_SYM", "PRINT_SYM", "DISREGARD_SYM", 
		"ENDLINE", "EQUALS", "COMMA", "LBRACE", "RBRACE", "LSQBR", "RSQBR", "LBRACKET", 
		"RBRACKET", "ADD_OP", "TAKE_OP", "MUL_OP", "DIV_OP", "POW_OP", "POINT", 
		"ADDFROM_OP", "TAKEFROM_OP", "DIVFROM_OP", "MULFROM_OP", "BIN_OR", "BIN_AND", 
		"BIN_NET", "BIN_EQUALS", "GRTR_THAN", "LESS_THAN", "GRTR_THAN_ET", "LESS_THAN_ET", 
		"IDENTIFIER", "COMMENT", "WS", "UNKNOWN_SYMBOL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "algo.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\x35\x147\b\x1\x4"+
		"\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b"+
		"\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4"+
		"\x10\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15"+
		"\t\x15\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A"+
		"\x4\x1B\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 "+
		"\t \x4!\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t"+
		")\x4*\t*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31"+
		"\x4\x32\t\x32\x4\x33\t\x33\x4\x34\t\x34\x3\x2\x5\x2k\n\x2\x3\x2\x3\x2"+
		"\a\x2o\n\x2\f\x2\xE\x2r\v\x2\x3\x2\x5\x2u\n\x2\x3\x3\x5\x3x\n\x3\x3\x3"+
		"\a\x3{\n\x3\f\x3\xE\x3~\v\x3\x3\x3\x3\x3\x3\x3\x6\x3\x83\n\x3\r\x3\xE"+
		"\x3\x84\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4\x90"+
		"\n\x4\x3\x5\x3\x5\a\x5\x94\n\x5\f\x5\xE\x5\x97\v\x5\x3\x5\x3\x5\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\t\x3"+
		"\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\f\x3\f\x3"+
		"\f\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xF"+
		"\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x11\x3"+
		"\x11\x3\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3"+
		"\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3"+
		"\x14\x3\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3"+
		"\x15\x3\x15\x3\x15\x3\x15\x3\x16\x3\x16\x3\x17\x3\x17\x3\x18\x3\x18\x3"+
		"\x19\x3\x19\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3"+
		"\x1E\x3\x1E\x3\x1F\x3\x1F\x3 \x3 \x3!\x3!\x3\"\x3\"\x3#\x3#\x3$\x3$\x3"+
		"%\x3%\x3%\x3&\x3&\x3&\x3\'\x3\'\x3\'\x3(\x3(\x3(\x3)\x3)\x3*\x3*\x3+\x3"+
		"+\x3+\x3,\x3,\x3,\x3-\x3-\x3.\x3.\x3/\x3/\x3/\x3\x30\x3\x30\x3\x30\x3"+
		"\x31\x3\x31\a\x31\x130\n\x31\f\x31\xE\x31\x133\v\x31\x3\x32\x3\x32\x3"+
		"\x32\x3\x32\a\x32\x139\n\x32\f\x32\xE\x32\x13C\v\x32\x3\x32\x3\x32\x3"+
		"\x32\x3\x32\x3\x33\x3\x33\x3\x33\x3\x33\x3\x34\x3\x34\x3\x13A\x2\x2\x35"+
		"\x3\x2\x3\x5\x2\x4\a\x2\x5\t\x2\x6\v\x2\a\r\x2\b\xF\x2\t\x11\x2\n\x13"+
		"\x2\v\x15\x2\f\x17\x2\r\x19\x2\xE\x1B\x2\xF\x1D\x2\x10\x1F\x2\x11!\x2"+
		"\x12#\x2\x13%\x2\x14\'\x2\x15)\x2\x16+\x2\x17-\x2\x18/\x2\x19\x31\x2\x1A"+
		"\x33\x2\x1B\x35\x2\x1C\x37\x2\x1D\x39\x2\x1E;\x2\x1F=\x2 ?\x2!\x41\x2"+
		"\"\x43\x2#\x45\x2$G\x2%I\x2&K\x2\'M\x2(O\x2)Q\x2*S\x2+U\x2,W\x2-Y\x2."+
		"[\x2/]\x2\x30_\x2\x31\x61\x2\x32\x63\x2\x33\x65\x2\x34g\x2\x35\x3\x2\b"+
		"\x3\x2\x33;\x3\x2\x32;\x3\x2$$\x5\x2\x43\\\x61\x61\x63|\x6\x2\x32;\x43"+
		"\\\x61\x61\x63|\x5\x2\v\f\xF\xF\"\"\x150\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2"+
		"\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2"+
		"\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3"+
		"\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2"+
		"\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2"+
		"%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2\x2)\x3\x2\x2\x2\x2+\x3\x2\x2\x2\x2-\x3"+
		"\x2\x2\x2\x2/\x3\x2\x2\x2\x2\x31\x3\x2\x2\x2\x2\x33\x3\x2\x2\x2\x2\x35"+
		"\x3\x2\x2\x2\x2\x37\x3\x2\x2\x2\x2\x39\x3\x2\x2\x2\x2;\x3\x2\x2\x2\x2"+
		"=\x3\x2\x2\x2\x2?\x3\x2\x2\x2\x2\x41\x3\x2\x2\x2\x2\x43\x3\x2\x2\x2\x2"+
		"\x45\x3\x2\x2\x2\x2G\x3\x2\x2\x2\x2I\x3\x2\x2\x2\x2K\x3\x2\x2\x2\x2M\x3"+
		"\x2\x2\x2\x2O\x3\x2\x2\x2\x2Q\x3\x2\x2\x2\x2S\x3\x2\x2\x2\x2U\x3\x2\x2"+
		"\x2\x2W\x3\x2\x2\x2\x2Y\x3\x2\x2\x2\x2[\x3\x2\x2\x2\x2]\x3\x2\x2\x2\x2"+
		"_\x3\x2\x2\x2\x2\x61\x3\x2\x2\x2\x2\x63\x3\x2\x2\x2\x2\x65\x3\x2\x2\x2"+
		"\x2g\x3\x2\x2\x2\x3t\x3\x2\x2\x2\x5w\x3\x2\x2\x2\a\x8F\x3\x2\x2\x2\t\x91"+
		"\x3\x2\x2\x2\v\x9A\x3\x2\x2\x2\r\x9E\x3\x2\x2\x2\xF\xA3\x3\x2\x2\x2\x11"+
		"\xA7\x3\x2\x2\x2\x13\xAB\x3\x2\x2\x2\x15\xB1\x3\x2\x2\x2\x17\xB4\x3\x2"+
		"\x2\x2\x19\xB7\x3\x2\x2\x2\x1B\xBA\x3\x2\x2\x2\x1D\xC2\x3\x2\x2\x2\x1F"+
		"\xC5\x3\x2\x2\x2!\xCC\x3\x2\x2\x2#\xD1\x3\x2\x2\x2%\xD8\x3\x2\x2\x2\'"+
		"\xDF\x3\x2\x2\x2)\xE5\x3\x2\x2\x2+\xEF\x3\x2\x2\x2-\xF1\x3\x2\x2\x2/\xF3"+
		"\x3\x2\x2\x2\x31\xF5\x3\x2\x2\x2\x33\xF7\x3\x2\x2\x2\x35\xF9\x3\x2\x2"+
		"\x2\x37\xFB\x3\x2\x2\x2\x39\xFD\x3\x2\x2\x2;\xFF\x3\x2\x2\x2=\x101\x3"+
		"\x2\x2\x2?\x103\x3\x2\x2\x2\x41\x105\x3\x2\x2\x2\x43\x107\x3\x2\x2\x2"+
		"\x45\x109\x3\x2\x2\x2G\x10B\x3\x2\x2\x2I\x10D\x3\x2\x2\x2K\x110\x3\x2"+
		"\x2\x2M\x113\x3\x2\x2\x2O\x116\x3\x2\x2\x2Q\x119\x3\x2\x2\x2S\x11B\x3"+
		"\x2\x2\x2U\x11D\x3\x2\x2\x2W\x120\x3\x2\x2\x2Y\x123\x3\x2\x2\x2[\x125"+
		"\x3\x2\x2\x2]\x127\x3\x2\x2\x2_\x12A\x3\x2\x2\x2\x61\x12D\x3\x2\x2\x2"+
		"\x63\x134\x3\x2\x2\x2\x65\x141\x3\x2\x2\x2g\x145\x3\x2\x2\x2ik\a/\x2\x2"+
		"ji\x3\x2\x2\x2jk\x3\x2\x2\x2kl\x3\x2\x2\x2lp\t\x2\x2\x2mo\t\x3\x2\x2n"+
		"m\x3\x2\x2\x2or\x3\x2\x2\x2pn\x3\x2\x2\x2pq\x3\x2\x2\x2qu\x3\x2\x2\x2"+
		"rp\x3\x2\x2\x2su\a\x32\x2\x2tj\x3\x2\x2\x2ts\x3\x2\x2\x2u\x4\x3\x2\x2"+
		"\x2vx\a/\x2\x2wv\x3\x2\x2\x2wx\x3\x2\x2\x2x|\x3\x2\x2\x2y{\t\x2\x2\x2"+
		"zy\x3\x2\x2\x2{~\x3\x2\x2\x2|z\x3\x2\x2\x2|}\x3\x2\x2\x2}\x7F\x3\x2\x2"+
		"\x2~|\x3\x2\x2\x2\x7F\x80\t\x3\x2\x2\x80\x82\a\x30\x2\x2\x81\x83\t\x3"+
		"\x2\x2\x82\x81\x3\x2\x2\x2\x83\x84\x3\x2\x2\x2\x84\x82\x3\x2\x2\x2\x84"+
		"\x85\x3\x2\x2\x2\x85\x6\x3\x2\x2\x2\x86\x87\av\x2\x2\x87\x88\at\x2\x2"+
		"\x88\x89\aw\x2\x2\x89\x90\ag\x2\x2\x8A\x8B\ah\x2\x2\x8B\x8C\a\x63\x2\x2"+
		"\x8C\x8D\an\x2\x2\x8D\x8E\au\x2\x2\x8E\x90\ag\x2\x2\x8F\x86\x3\x2\x2\x2"+
		"\x8F\x8A\x3\x2\x2\x2\x90\b\x3\x2\x2\x2\x91\x95\a$\x2\x2\x92\x94\n\x4\x2"+
		"\x2\x93\x92\x3\x2\x2\x2\x94\x97\x3\x2\x2\x2\x95\x93\x3\x2\x2\x2\x95\x96"+
		"\x3\x2\x2\x2\x96\x98\x3\x2\x2\x2\x97\x95\x3\x2\x2\x2\x98\x99\a$\x2\x2"+
		"\x99\n\x3\x2\x2\x2\x9A\x9B\x5\x3\x2\x2\x9B\x9C\a\x31\x2\x2\x9C\x9D\x5"+
		"\x3\x2\x2\x9D\f\x3\x2\x2\x2\x9E\x9F\ap\x2\x2\x9F\xA0\aw\x2\x2\xA0\xA1"+
		"\an\x2\x2\xA1\xA2\an\x2\x2\xA2\xE\x3\x2\x2\x2\xA3\xA4\an\x2\x2\xA4\xA5"+
		"\ag\x2\x2\xA5\xA6\av\x2\x2\xA6\x10\x3\x2\x2\x2\xA7\xA8\ah\x2\x2\xA8\xA9"+
		"\aq\x2\x2\xA9\xAA\at\x2\x2\xAA\x12\x3\x2\x2\x2\xAB\xAC\ay\x2\x2\xAC\xAD"+
		"\aj\x2\x2\xAD\xAE\ak\x2\x2\xAE\xAF\an\x2\x2\xAF\xB0\ag\x2\x2\xB0\x14\x3"+
		"\x2\x2\x2\xB1\xB2\ak\x2\x2\xB2\xB3\ap\x2\x2\xB3\x16\x3\x2\x2\x2\xB4\xB5"+
		"\ak\x2\x2\xB5\xB6\ah\x2\x2\xB6\x18\x3\x2\x2\x2\xB7\xB8\av\x2\x2\xB8\xB9"+
		"\aq\x2\x2\xB9\x1A\x3\x2\x2\x2\xBA\xBB\an\x2\x2\xBB\xBC\ak\x2\x2\xBC\xBD"+
		"\a\x64\x2\x2\xBD\xBE\at\x2\x2\xBE\xBF\a\x63\x2\x2\xBF\xC0\at\x2\x2\xC0"+
		"\xC1\a{\x2\x2\xC1\x1C\x3\x2\x2\x2\xC2\xC3\au\x2\x2\xC3\xC4\ah\x2\x2\xC4"+
		"\x1E\x3\x2\x2\x2\xC5\xC6\aq\x2\x2\xC6\xC7\a\x64\x2\x2\xC7\xC8\al\x2\x2"+
		"\xC8\xC9\ag\x2\x2\xC9\xCA\a\x65\x2\x2\xCA\xCB\av\x2\x2\xCB \x3\x2\x2\x2"+
		"\xCC\xCD\ag\x2\x2\xCD\xCE\an\x2\x2\xCE\xCF\au\x2\x2\xCF\xD0\ag\x2\x2\xD0"+
		"\"\x3\x2\x2\x2\xD1\xD2\ak\x2\x2\xD2\xD3\ao\x2\x2\xD3\xD4\ar\x2\x2\xD4"+
		"\xD5\aq\x2\x2\xD5\xD6\at\x2\x2\xD6\xD7\av\x2\x2\xD7$\x3\x2\x2\x2\xD8\xD9"+
		"\at\x2\x2\xD9\xDA\ag\x2\x2\xDA\xDB\av\x2\x2\xDB\xDC\aw\x2\x2\xDC\xDD\a"+
		"t\x2\x2\xDD\xDE\ap\x2\x2\xDE&\x3\x2\x2\x2\xDF\xE0\ar\x2\x2\xE0\xE1\at"+
		"\x2\x2\xE1\xE2\ak\x2\x2\xE2\xE3\ap\x2\x2\xE3\xE4\av\x2\x2\xE4(\x3\x2\x2"+
		"\x2\xE5\xE6\a\x66\x2\x2\xE6\xE7\ak\x2\x2\xE7\xE8\au\x2\x2\xE8\xE9\at\x2"+
		"\x2\xE9\xEA\ag\x2\x2\xEA\xEB\ai\x2\x2\xEB\xEC\a\x63\x2\x2\xEC\xED\at\x2"+
		"\x2\xED\xEE\a\x66\x2\x2\xEE*\x3\x2\x2\x2\xEF\xF0\a=\x2\x2\xF0,\x3\x2\x2"+
		"\x2\xF1\xF2\a?\x2\x2\xF2.\x3\x2\x2\x2\xF3\xF4\a.\x2\x2\xF4\x30\x3\x2\x2"+
		"\x2\xF5\xF6\a}\x2\x2\xF6\x32\x3\x2\x2\x2\xF7\xF8\a\x7F\x2\x2\xF8\x34\x3"+
		"\x2\x2\x2\xF9\xFA\a]\x2\x2\xFA\x36\x3\x2\x2\x2\xFB\xFC\a_\x2\x2\xFC\x38"+
		"\x3\x2\x2\x2\xFD\xFE\a*\x2\x2\xFE:\x3\x2\x2\x2\xFF\x100\a+\x2\x2\x100"+
		"<\x3\x2\x2\x2\x101\x102\a-\x2\x2\x102>\x3\x2\x2\x2\x103\x104\a/\x2\x2"+
		"\x104@\x3\x2\x2\x2\x105\x106\a,\x2\x2\x106\x42\x3\x2\x2\x2\x107\x108\a"+
		"\x31\x2\x2\x108\x44\x3\x2\x2\x2\x109\x10A\a`\x2\x2\x10A\x46\x3\x2\x2\x2"+
		"\x10B\x10C\a\x30\x2\x2\x10CH\x3\x2\x2\x2\x10D\x10E\a-\x2\x2\x10E\x10F"+
		"\a?\x2\x2\x10FJ\x3\x2\x2\x2\x110\x111\a/\x2\x2\x111\x112\a?\x2\x2\x112"+
		"L\x3\x2\x2\x2\x113\x114\a\x31\x2\x2\x114\x115\a?\x2\x2\x115N\x3\x2\x2"+
		"\x2\x116\x117\a,\x2\x2\x117\x118\a?\x2\x2\x118P\x3\x2\x2\x2\x119\x11A"+
		"\a~\x2\x2\x11AR\x3\x2\x2\x2\x11B\x11C\a(\x2\x2\x11CT\x3\x2\x2\x2\x11D"+
		"\x11E\a#\x2\x2\x11E\x11F\a?\x2\x2\x11FV\x3\x2\x2\x2\x120\x121\a?\x2\x2"+
		"\x121\x122\a?\x2\x2\x122X\x3\x2\x2\x2\x123\x124\a@\x2\x2\x124Z\x3\x2\x2"+
		"\x2\x125\x126\a>\x2\x2\x126\\\x3\x2\x2\x2\x127\x128\a@\x2\x2\x128\x129"+
		"\a?\x2\x2\x129^\x3\x2\x2\x2\x12A\x12B\a>\x2\x2\x12B\x12C\a?\x2\x2\x12C"+
		"`\x3\x2\x2\x2\x12D\x131\t\x5\x2\x2\x12E\x130\t\x6\x2\x2\x12F\x12E\x3\x2"+
		"\x2\x2\x130\x133\x3\x2\x2\x2\x131\x12F\x3\x2\x2\x2\x131\x132\x3\x2\x2"+
		"\x2\x132\x62\x3\x2\x2\x2\x133\x131\x3\x2\x2\x2\x134\x135\a\x31\x2\x2\x135"+
		"\x136\a\x31\x2\x2\x136\x13A\x3\x2\x2\x2\x137\x139\v\x2\x2\x2\x138\x137"+
		"\x3\x2\x2\x2\x139\x13C\x3\x2\x2\x2\x13A\x13B\x3\x2\x2\x2\x13A\x138\x3"+
		"\x2\x2\x2\x13B\x13D\x3\x2\x2\x2\x13C\x13A\x3\x2\x2\x2\x13D\x13E\a\f\x2"+
		"\x2\x13E\x13F\x3\x2\x2\x2\x13F\x140\b\x32\x2\x2\x140\x64\x3\x2\x2\x2\x141"+
		"\x142\t\a\x2\x2\x142\x143\x3\x2\x2\x2\x143\x144\b\x33\x2\x2\x144\x66\x3"+
		"\x2\x2\x2\x145\x146\v\x2\x2\x2\x146h\x3\x2\x2\x2\r\x2jptw|\x84\x8F\x95"+
		"\x131\x13A\x3\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Algo
