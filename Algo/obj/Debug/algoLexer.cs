//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Z:\Algo\Algo\Parsing\algo.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Algo {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class algoLexer : Lexer {
	public const int
		INTEGER=1, FLOAT=2, BOOLEAN=3, STRING=4, RATIONAL=5, LET_SYM=6, FOR_SYM=7, 
		IN_SYM=8, IF_SYM=9, TO_SYM=10, LIB_SYM=11, SIG_FIG_SYM=12, OBJ_SYM=13, 
		ELSE_SYM=14, IMPORT_SYM=15, RETURN_SYM=16, PRINT_SYM=17, DISREGARD_SYM=18, 
		ENDLINE=19, EQUALS=20, COMMA=21, LBRACE=22, RBRACE=23, LSQBR=24, RSQBR=25, 
		LBRACKET=26, RBRACKET=27, ADD_OP=28, TAKE_OP=29, MUL_OP=30, DIV_OP=31, 
		POW_OP=32, POINT=33, ADDFROM_OP=34, TAKEFROM_OP=35, DIVFROM_OP=36, MULFROM_OP=37, 
		BIN_OR=38, BIN_AND=39, BIN_EQUALS=40, GRTR_THAN=41, LESS_THAN=42, GRTR_THAN_ET=43, 
		LESS_THAN_ET=44, IDENTIFIER=45, COMMENT=46, WS=47, UNKNOWN_SYMBOL=48;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"INTEGER", "FLOAT", "BOOLEAN", "STRING", "RATIONAL", "LET_SYM", "FOR_SYM", 
		"IN_SYM", "IF_SYM", "TO_SYM", "LIB_SYM", "SIG_FIG_SYM", "OBJ_SYM", "ELSE_SYM", 
		"IMPORT_SYM", "RETURN_SYM", "PRINT_SYM", "DISREGARD_SYM", "ENDLINE", "EQUALS", 
		"COMMA", "LBRACE", "RBRACE", "LSQBR", "RSQBR", "LBRACKET", "RBRACKET", 
		"ADD_OP", "TAKE_OP", "MUL_OP", "DIV_OP", "POW_OP", "POINT", "ADDFROM_OP", 
		"TAKEFROM_OP", "DIVFROM_OP", "MULFROM_OP", "BIN_OR", "BIN_AND", "BIN_EQUALS", 
		"GRTR_THAN", "LESS_THAN", "GRTR_THAN_ET", "LESS_THAN_ET", "IDENTIFIER", 
		"COMMENT", "WS", "UNKNOWN_SYMBOL"
	};


	public algoLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'let'", "'for'", "'in'", "'if'", 
		"'to'", "'library'", "'sf'", "'object'", "'else'", "'import'", "'return'", 
		"'print'", "'disregard'", "';'", "'='", "','", "'{'", "'}'", "'['", "']'", 
		"'('", "')'", "'+'", "'-'", "'*'", "'/'", "'^'", "'.'", "'+='", "'-='", 
		"'/='", "'*='", "'|'", "'&'", "'=='", "'>'", "'<'", "'>='", "'<='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INTEGER", "FLOAT", "BOOLEAN", "STRING", "RATIONAL", "LET_SYM", 
		"FOR_SYM", "IN_SYM", "IF_SYM", "TO_SYM", "LIB_SYM", "SIG_FIG_SYM", "OBJ_SYM", 
		"ELSE_SYM", "IMPORT_SYM", "RETURN_SYM", "PRINT_SYM", "DISREGARD_SYM", 
		"ENDLINE", "EQUALS", "COMMA", "LBRACE", "RBRACE", "LSQBR", "RSQBR", "LBRACKET", 
		"RBRACKET", "ADD_OP", "TAKE_OP", "MUL_OP", "DIV_OP", "POW_OP", "POINT", 
		"ADDFROM_OP", "TAKEFROM_OP", "DIVFROM_OP", "MULFROM_OP", "BIN_OR", "BIN_AND", 
		"BIN_EQUALS", "GRTR_THAN", "LESS_THAN", "GRTR_THAN_ET", "LESS_THAN_ET", 
		"IDENTIFIER", "COMMENT", "WS", "UNKNOWN_SYMBOL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "algo.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\x32\x133\b\x1\x4"+
		"\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b"+
		"\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4"+
		"\x10\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15"+
		"\t\x15\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A"+
		"\x4\x1B\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 "+
		"\t \x4!\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t"+
		")\x4*\t*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31"+
		"\x3\x2\x5\x2\x65\n\x2\x3\x2\x3\x2\a\x2i\n\x2\f\x2\xE\x2l\v\x2\x3\x2\x5"+
		"\x2o\n\x2\x3\x3\x5\x3r\n\x3\x3\x3\a\x3u\n\x3\f\x3\xE\x3x\v\x3\x3\x3\x3"+
		"\x3\x3\x3\x6\x3}\n\x3\r\x3\xE\x3~\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x5\x4\x8A\n\x4\x3\x5\x3\x5\a\x5\x8E\n\x5\f\x5\xE\x5"+
		"\x91\v\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\b"+
		"\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\f\x3\f"+
		"\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE"+
		"\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13"+
		"\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x15"+
		"\x3\x15\x3\x16\x3\x16\x3\x17\x3\x17\x3\x18\x3\x18\x3\x19\x3\x19\x3\x1A"+
		"\x3\x1A\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1F"+
		"\x3\x1F\x3 \x3 \x3!\x3!\x3\"\x3\"\x3#\x3#\x3#\x3$\x3$\x3$\x3%\x3%\x3%"+
		"\x3&\x3&\x3&\x3\'\x3\'\x3(\x3(\x3)\x3)\x3)\x3*\x3*\x3+\x3+\x3,\x3,\x3"+
		",\x3-\x3-\x3-\x3.\x3.\a.\x11C\n.\f.\xE.\x11F\v.\x3/\x3/\x3/\x3/\a/\x125"+
		"\n/\f/\xE/\x128\v/\x3/\x3/\x3/\x3/\x3\x30\x3\x30\x3\x30\x3\x30\x3\x31"+
		"\x3\x31\x3\x126\x2\x2\x32\x3\x2\x3\x5\x2\x4\a\x2\x5\t\x2\x6\v\x2\a\r\x2"+
		"\b\xF\x2\t\x11\x2\n\x13\x2\v\x15\x2\f\x17\x2\r\x19\x2\xE\x1B\x2\xF\x1D"+
		"\x2\x10\x1F\x2\x11!\x2\x12#\x2\x13%\x2\x14\'\x2\x15)\x2\x16+\x2\x17-\x2"+
		"\x18/\x2\x19\x31\x2\x1A\x33\x2\x1B\x35\x2\x1C\x37\x2\x1D\x39\x2\x1E;\x2"+
		"\x1F=\x2 ?\x2!\x41\x2\"\x43\x2#\x45\x2$G\x2%I\x2&K\x2\'M\x2(O\x2)Q\x2"+
		"*S\x2+U\x2,W\x2-Y\x2.[\x2/]\x2\x30_\x2\x31\x61\x2\x32\x3\x2\b\x3\x2\x33"+
		";\x3\x2\x32;\x3\x2$$\x5\x2\x43\\\x61\x61\x63|\x6\x2\x32;\x43\\\x61\x61"+
		"\x63|\x5\x2\v\f\xF\xF\"\"\x13C\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2"+
		"\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF"+
		"\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2"+
		"\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2"+
		"\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2"+
		"\x2\x2\'\x3\x2\x2\x2\x2)\x3\x2\x2\x2\x2+\x3\x2\x2\x2\x2-\x3\x2\x2\x2\x2"+
		"/\x3\x2\x2\x2\x2\x31\x3\x2\x2\x2\x2\x33\x3\x2\x2\x2\x2\x35\x3\x2\x2\x2"+
		"\x2\x37\x3\x2\x2\x2\x2\x39\x3\x2\x2\x2\x2;\x3\x2\x2\x2\x2=\x3\x2\x2\x2"+
		"\x2?\x3\x2\x2\x2\x2\x41\x3\x2\x2\x2\x2\x43\x3\x2\x2\x2\x2\x45\x3\x2\x2"+
		"\x2\x2G\x3\x2\x2\x2\x2I\x3\x2\x2\x2\x2K\x3\x2\x2\x2\x2M\x3\x2\x2\x2\x2"+
		"O\x3\x2\x2\x2\x2Q\x3\x2\x2\x2\x2S\x3\x2\x2\x2\x2U\x3\x2\x2\x2\x2W\x3\x2"+
		"\x2\x2\x2Y\x3\x2\x2\x2\x2[\x3\x2\x2\x2\x2]\x3\x2\x2\x2\x2_\x3\x2\x2\x2"+
		"\x2\x61\x3\x2\x2\x2\x3n\x3\x2\x2\x2\x5q\x3\x2\x2\x2\a\x89\x3\x2\x2\x2"+
		"\t\x8B\x3\x2\x2\x2\v\x94\x3\x2\x2\x2\r\x98\x3\x2\x2\x2\xF\x9C\x3\x2\x2"+
		"\x2\x11\xA0\x3\x2\x2\x2\x13\xA3\x3\x2\x2\x2\x15\xA6\x3\x2\x2\x2\x17\xA9"+
		"\x3\x2\x2\x2\x19\xB1\x3\x2\x2\x2\x1B\xB4\x3\x2\x2\x2\x1D\xBB\x3\x2\x2"+
		"\x2\x1F\xC0\x3\x2\x2\x2!\xC7\x3\x2\x2\x2#\xCE\x3\x2\x2\x2%\xD4\x3\x2\x2"+
		"\x2\'\xDE\x3\x2\x2\x2)\xE0\x3\x2\x2\x2+\xE2\x3\x2\x2\x2-\xE4\x3\x2\x2"+
		"\x2/\xE6\x3\x2\x2\x2\x31\xE8\x3\x2\x2\x2\x33\xEA\x3\x2\x2\x2\x35\xEC\x3"+
		"\x2\x2\x2\x37\xEE\x3\x2\x2\x2\x39\xF0\x3\x2\x2\x2;\xF2\x3\x2\x2\x2=\xF4"+
		"\x3\x2\x2\x2?\xF6\x3\x2\x2\x2\x41\xF8\x3\x2\x2\x2\x43\xFA\x3\x2\x2\x2"+
		"\x45\xFC\x3\x2\x2\x2G\xFF\x3\x2\x2\x2I\x102\x3\x2\x2\x2K\x105\x3\x2\x2"+
		"\x2M\x108\x3\x2\x2\x2O\x10A\x3\x2\x2\x2Q\x10C\x3\x2\x2\x2S\x10F\x3\x2"+
		"\x2\x2U\x111\x3\x2\x2\x2W\x113\x3\x2\x2\x2Y\x116\x3\x2\x2\x2[\x119\x3"+
		"\x2\x2\x2]\x120\x3\x2\x2\x2_\x12D\x3\x2\x2\x2\x61\x131\x3\x2\x2\x2\x63"+
		"\x65\a/\x2\x2\x64\x63\x3\x2\x2\x2\x64\x65\x3\x2\x2\x2\x65\x66\x3\x2\x2"+
		"\x2\x66j\t\x2\x2\x2gi\t\x3\x2\x2hg\x3\x2\x2\x2il\x3\x2\x2\x2jh\x3\x2\x2"+
		"\x2jk\x3\x2\x2\x2ko\x3\x2\x2\x2lj\x3\x2\x2\x2mo\a\x32\x2\x2n\x64\x3\x2"+
		"\x2\x2nm\x3\x2\x2\x2o\x4\x3\x2\x2\x2pr\a/\x2\x2qp\x3\x2\x2\x2qr\x3\x2"+
		"\x2\x2rv\x3\x2\x2\x2su\t\x2\x2\x2ts\x3\x2\x2\x2ux\x3\x2\x2\x2vt\x3\x2"+
		"\x2\x2vw\x3\x2\x2\x2wy\x3\x2\x2\x2xv\x3\x2\x2\x2yz\t\x3\x2\x2z|\a\x30"+
		"\x2\x2{}\t\x3\x2\x2|{\x3\x2\x2\x2}~\x3\x2\x2\x2~|\x3\x2\x2\x2~\x7F\x3"+
		"\x2\x2\x2\x7F\x6\x3\x2\x2\x2\x80\x81\av\x2\x2\x81\x82\at\x2\x2\x82\x83"+
		"\aw\x2\x2\x83\x8A\ag\x2\x2\x84\x85\ah\x2\x2\x85\x86\a\x63\x2\x2\x86\x87"+
		"\an\x2\x2\x87\x88\au\x2\x2\x88\x8A\ag\x2\x2\x89\x80\x3\x2\x2\x2\x89\x84"+
		"\x3\x2\x2\x2\x8A\b\x3\x2\x2\x2\x8B\x8F\a$\x2\x2\x8C\x8E\n\x4\x2\x2\x8D"+
		"\x8C\x3\x2\x2\x2\x8E\x91\x3\x2\x2\x2\x8F\x8D\x3\x2\x2\x2\x8F\x90\x3\x2"+
		"\x2\x2\x90\x92\x3\x2\x2\x2\x91\x8F\x3\x2\x2\x2\x92\x93\a$\x2\x2\x93\n"+
		"\x3\x2\x2\x2\x94\x95\x5\x3\x2\x2\x95\x96\a\x31\x2\x2\x96\x97\x5\x3\x2"+
		"\x2\x97\f\x3\x2\x2\x2\x98\x99\an\x2\x2\x99\x9A\ag\x2\x2\x9A\x9B\av\x2"+
		"\x2\x9B\xE\x3\x2\x2\x2\x9C\x9D\ah\x2\x2\x9D\x9E\aq\x2\x2\x9E\x9F\at\x2"+
		"\x2\x9F\x10\x3\x2\x2\x2\xA0\xA1\ak\x2\x2\xA1\xA2\ap\x2\x2\xA2\x12\x3\x2"+
		"\x2\x2\xA3\xA4\ak\x2\x2\xA4\xA5\ah\x2\x2\xA5\x14\x3\x2\x2\x2\xA6\xA7\a"+
		"v\x2\x2\xA7\xA8\aq\x2\x2\xA8\x16\x3\x2\x2\x2\xA9\xAA\an\x2\x2\xAA\xAB"+
		"\ak\x2\x2\xAB\xAC\a\x64\x2\x2\xAC\xAD\at\x2\x2\xAD\xAE\a\x63\x2\x2\xAE"+
		"\xAF\at\x2\x2\xAF\xB0\a{\x2\x2\xB0\x18\x3\x2\x2\x2\xB1\xB2\au\x2\x2\xB2"+
		"\xB3\ah\x2\x2\xB3\x1A\x3\x2\x2\x2\xB4\xB5\aq\x2\x2\xB5\xB6\a\x64\x2\x2"+
		"\xB6\xB7\al\x2\x2\xB7\xB8\ag\x2\x2\xB8\xB9\a\x65\x2\x2\xB9\xBA\av\x2\x2"+
		"\xBA\x1C\x3\x2\x2\x2\xBB\xBC\ag\x2\x2\xBC\xBD\an\x2\x2\xBD\xBE\au\x2\x2"+
		"\xBE\xBF\ag\x2\x2\xBF\x1E\x3\x2\x2\x2\xC0\xC1\ak\x2\x2\xC1\xC2\ao\x2\x2"+
		"\xC2\xC3\ar\x2\x2\xC3\xC4\aq\x2\x2\xC4\xC5\at\x2\x2\xC5\xC6\av\x2\x2\xC6"+
		" \x3\x2\x2\x2\xC7\xC8\at\x2\x2\xC8\xC9\ag\x2\x2\xC9\xCA\av\x2\x2\xCA\xCB"+
		"\aw\x2\x2\xCB\xCC\at\x2\x2\xCC\xCD\ap\x2\x2\xCD\"\x3\x2\x2\x2\xCE\xCF"+
		"\ar\x2\x2\xCF\xD0\at\x2\x2\xD0\xD1\ak\x2\x2\xD1\xD2\ap\x2\x2\xD2\xD3\a"+
		"v\x2\x2\xD3$\x3\x2\x2\x2\xD4\xD5\a\x66\x2\x2\xD5\xD6\ak\x2\x2\xD6\xD7"+
		"\au\x2\x2\xD7\xD8\at\x2\x2\xD8\xD9\ag\x2\x2\xD9\xDA\ai\x2\x2\xDA\xDB\a"+
		"\x63\x2\x2\xDB\xDC\at\x2\x2\xDC\xDD\a\x66\x2\x2\xDD&\x3\x2\x2\x2\xDE\xDF"+
		"\a=\x2\x2\xDF(\x3\x2\x2\x2\xE0\xE1\a?\x2\x2\xE1*\x3\x2\x2\x2\xE2\xE3\a"+
		".\x2\x2\xE3,\x3\x2\x2\x2\xE4\xE5\a}\x2\x2\xE5.\x3\x2\x2\x2\xE6\xE7\a\x7F"+
		"\x2\x2\xE7\x30\x3\x2\x2\x2\xE8\xE9\a]\x2\x2\xE9\x32\x3\x2\x2\x2\xEA\xEB"+
		"\a_\x2\x2\xEB\x34\x3\x2\x2\x2\xEC\xED\a*\x2\x2\xED\x36\x3\x2\x2\x2\xEE"+
		"\xEF\a+\x2\x2\xEF\x38\x3\x2\x2\x2\xF0\xF1\a-\x2\x2\xF1:\x3\x2\x2\x2\xF2"+
		"\xF3\a/\x2\x2\xF3<\x3\x2\x2\x2\xF4\xF5\a,\x2\x2\xF5>\x3\x2\x2\x2\xF6\xF7"+
		"\a\x31\x2\x2\xF7@\x3\x2\x2\x2\xF8\xF9\a`\x2\x2\xF9\x42\x3\x2\x2\x2\xFA"+
		"\xFB\a\x30\x2\x2\xFB\x44\x3\x2\x2\x2\xFC\xFD\a-\x2\x2\xFD\xFE\a?\x2\x2"+
		"\xFE\x46\x3\x2\x2\x2\xFF\x100\a/\x2\x2\x100\x101\a?\x2\x2\x101H\x3\x2"+
		"\x2\x2\x102\x103\a\x31\x2\x2\x103\x104\a?\x2\x2\x104J\x3\x2\x2\x2\x105"+
		"\x106\a,\x2\x2\x106\x107\a?\x2\x2\x107L\x3\x2\x2\x2\x108\x109\a~\x2\x2"+
		"\x109N\x3\x2\x2\x2\x10A\x10B\a(\x2\x2\x10BP\x3\x2\x2\x2\x10C\x10D\a?\x2"+
		"\x2\x10D\x10E\a?\x2\x2\x10ER\x3\x2\x2\x2\x10F\x110\a@\x2\x2\x110T\x3\x2"+
		"\x2\x2\x111\x112\a>\x2\x2\x112V\x3\x2\x2\x2\x113\x114\a@\x2\x2\x114\x115"+
		"\a?\x2\x2\x115X\x3\x2\x2\x2\x116\x117\a>\x2\x2\x117\x118\a?\x2\x2\x118"+
		"Z\x3\x2\x2\x2\x119\x11D\t\x5\x2\x2\x11A\x11C\t\x6\x2\x2\x11B\x11A\x3\x2"+
		"\x2\x2\x11C\x11F\x3\x2\x2\x2\x11D\x11B\x3\x2\x2\x2\x11D\x11E\x3\x2\x2"+
		"\x2\x11E\\\x3\x2\x2\x2\x11F\x11D\x3\x2\x2\x2\x120\x121\a\x31\x2\x2\x121"+
		"\x122\a\x31\x2\x2\x122\x126\x3\x2\x2\x2\x123\x125\v\x2\x2\x2\x124\x123"+
		"\x3\x2\x2\x2\x125\x128\x3\x2\x2\x2\x126\x127\x3\x2\x2\x2\x126\x124\x3"+
		"\x2\x2\x2\x127\x129\x3\x2\x2\x2\x128\x126\x3\x2\x2\x2\x129\x12A\a\f\x2"+
		"\x2\x12A\x12B\x3\x2\x2\x2\x12B\x12C\b/\x2\x2\x12C^\x3\x2\x2\x2\x12D\x12E"+
		"\t\a\x2\x2\x12E\x12F\x3\x2\x2\x2\x12F\x130\b\x30\x2\x2\x130`\x3\x2\x2"+
		"\x2\x131\x132\v\x2\x2\x2\x132\x62\x3\x2\x2\x2\r\x2\x64jnqv~\x89\x8F\x11D"+
		"\x126\x3\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Algo
