//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\Files\Programming\GitHub\algo\Algo\Parsing\algo.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Algo {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class algoLexer : Lexer {
	public const int
		INTEGER=1, FLOAT=2, BOOLEAN=3, STRING=4, RATIONAL=5, LET_SYM=6, FOR_SYM=7, 
		IN_SYM=8, IF_SYM=9, IMPORT_SYM=10, RETURN_SYM=11, PRINT_SYM=12, ENDLINE=13, 
		EQUALS=14, COMMA=15, LBRACKET=16, RBRACKET=17, ADD_OP=18, TAKE_OP=19, 
		MUL_OP=20, DIV_OP=21, POW_OP=22, BIN_OR=23, BIN_AND=24, LBRACE=25, RBRACE=26, 
		LSQBR=27, RSQBR=28, IDENTIFIER=29, COMMENT=30, WS=31, UNKNOWN_SYMBOL=32;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"INTEGER", "FLOAT", "BOOLEAN", "STRING", "RATIONAL", "LET_SYM", "FOR_SYM", 
		"IN_SYM", "IF_SYM", "IMPORT_SYM", "RETURN_SYM", "PRINT_SYM", "ENDLINE", 
		"EQUALS", "COMMA", "LBRACKET", "RBRACKET", "ADD_OP", "TAKE_OP", "MUL_OP", 
		"DIV_OP", "POW_OP", "BIN_OR", "BIN_AND", "LBRACE", "RBRACE", "LSQBR", 
		"RSQBR", "IDENTIFIER", "COMMENT", "WS", "UNKNOWN_SYMBOL"
	};


	public algoLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'let'", "'for'", "'in'", "'if'", 
		"'import'", "'return'", "'print'", "';'", "'='", "','", "'('", "')'", 
		"'+'", "'-'", "'*'", "'/'", "'^'", "'||'", "'&&'", "'{'", "'}'", "'['", 
		"']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INTEGER", "FLOAT", "BOOLEAN", "STRING", "RATIONAL", "LET_SYM", 
		"FOR_SYM", "IN_SYM", "IF_SYM", "IMPORT_SYM", "RETURN_SYM", "PRINT_SYM", 
		"ENDLINE", "EQUALS", "COMMA", "LBRACKET", "RBRACKET", "ADD_OP", "TAKE_OP", 
		"MUL_OP", "DIV_OP", "POW_OP", "BIN_OR", "BIN_AND", "LBRACE", "RBRACE", 
		"LSQBR", "RSQBR", "IDENTIFIER", "COMMENT", "WS", "UNKNOWN_SYMBOL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "algo.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\"\xD4\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x3\x2\x5\x2\x45\n\x2\x3\x2\a\x2H\n\x2\f\x2\xE\x2K\v\x2\x3\x2\x3\x2"+
		"\x3\x3\x5\x3P\n\x3\x3\x3\a\x3S\n\x3\f\x3\xE\x3V\v\x3\x3\x3\x3\x3\x3\x3"+
		"\x6\x3[\n\x3\r\x3\xE\x3\\\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x5\x4h\n\x4\x3\x5\x3\x5\a\x5l\n\x5\f\x5\xE\x5o\v\x5\x3\x5\x3"+
		"\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3"+
		"\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\f\x3"+
		"\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE"+
		"\x3\xF\x3\xF\x3\x10\x3\x10\x3\x11\x3\x11\x3\x12\x3\x12\x3\x13\x3\x13\x3"+
		"\x14\x3\x14\x3\x15\x3\x15\x3\x16\x3\x16\x3\x17\x3\x17\x3\x18\x3\x18\x3"+
		"\x18\x3\x19\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3"+
		"\x1D\x3\x1D\x3\x1E\x3\x1E\a\x1E\xBD\n\x1E\f\x1E\xE\x1E\xC0\v\x1E\x3\x1F"+
		"\x3\x1F\x3\x1F\x3\x1F\a\x1F\xC6\n\x1F\f\x1F\xE\x1F\xC9\v\x1F\x3\x1F\x3"+
		"\x1F\x3\x1F\x3\x1F\x3 \x3 \x3 \x3 \x3!\x3!\x3\xC7\x2\x2\"\x3\x2\x3\x5"+
		"\x2\x4\a\x2\x5\t\x2\x6\v\x2\a\r\x2\b\xF\x2\t\x11\x2\n\x13\x2\v\x15\x2"+
		"\f\x17\x2\r\x19\x2\xE\x1B\x2\xF\x1D\x2\x10\x1F\x2\x11!\x2\x12#\x2\x13"+
		"%\x2\x14\'\x2\x15)\x2\x16+\x2\x17-\x2\x18/\x2\x19\x31\x2\x1A\x33\x2\x1B"+
		"\x35\x2\x1C\x37\x2\x1D\x39\x2\x1E;\x2\x1F=\x2 ?\x2!\x41\x2\"\x3\x2\b\x3"+
		"\x2\x33;\x3\x2\x32;\x3\x2$$\x5\x2\x43\\\x61\x61\x63|\x6\x2\x32;\x43\\"+
		"\x61\x61\x63|\x5\x2\v\f\xF\xF\"\"\xDC\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2"+
		"\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2"+
		"\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2"+
		"\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D"+
		"\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3"+
		"\x2\x2\x2\x2\'\x3\x2\x2\x2\x2)\x3\x2\x2\x2\x2+\x3\x2\x2\x2\x2-\x3\x2\x2"+
		"\x2\x2/\x3\x2\x2\x2\x2\x31\x3\x2\x2\x2\x2\x33\x3\x2\x2\x2\x2\x35\x3\x2"+
		"\x2\x2\x2\x37\x3\x2\x2\x2\x2\x39\x3\x2\x2\x2\x2;\x3\x2\x2\x2\x2=\x3\x2"+
		"\x2\x2\x2?\x3\x2\x2\x2\x2\x41\x3\x2\x2\x2\x3\x44\x3\x2\x2\x2\x5O\x3\x2"+
		"\x2\x2\ag\x3\x2\x2\x2\ti\x3\x2\x2\x2\vr\x3\x2\x2\x2\rv\x3\x2\x2\x2\xF"+
		"z\x3\x2\x2\x2\x11~\x3\x2\x2\x2\x13\x81\x3\x2\x2\x2\x15\x84\x3\x2\x2\x2"+
		"\x17\x8B\x3\x2\x2\x2\x19\x92\x3\x2\x2\x2\x1B\x98\x3\x2\x2\x2\x1D\x9A\x3"+
		"\x2\x2\x2\x1F\x9C\x3\x2\x2\x2!\x9E\x3\x2\x2\x2#\xA0\x3\x2\x2\x2%\xA2\x3"+
		"\x2\x2\x2\'\xA4\x3\x2\x2\x2)\xA6\x3\x2\x2\x2+\xA8\x3\x2\x2\x2-\xAA\x3"+
		"\x2\x2\x2/\xAC\x3\x2\x2\x2\x31\xAF\x3\x2\x2\x2\x33\xB2\x3\x2\x2\x2\x35"+
		"\xB4\x3\x2\x2\x2\x37\xB6\x3\x2\x2\x2\x39\xB8\x3\x2\x2\x2;\xBA\x3\x2\x2"+
		"\x2=\xC1\x3\x2\x2\x2?\xCE\x3\x2\x2\x2\x41\xD2\x3\x2\x2\x2\x43\x45\a/\x2"+
		"\x2\x44\x43\x3\x2\x2\x2\x44\x45\x3\x2\x2\x2\x45I\x3\x2\x2\x2\x46H\t\x2"+
		"\x2\x2G\x46\x3\x2\x2\x2HK\x3\x2\x2\x2IG\x3\x2\x2\x2IJ\x3\x2\x2\x2JL\x3"+
		"\x2\x2\x2KI\x3\x2\x2\x2LM\t\x3\x2\x2M\x4\x3\x2\x2\x2NP\a/\x2\x2ON\x3\x2"+
		"\x2\x2OP\x3\x2\x2\x2PT\x3\x2\x2\x2QS\t\x2\x2\x2RQ\x3\x2\x2\x2SV\x3\x2"+
		"\x2\x2TR\x3\x2\x2\x2TU\x3\x2\x2\x2UW\x3\x2\x2\x2VT\x3\x2\x2\x2WX\t\x3"+
		"\x2\x2XZ\a\x30\x2\x2Y[\t\x3\x2\x2ZY\x3\x2\x2\x2[\\\x3\x2\x2\x2\\Z\x3\x2"+
		"\x2\x2\\]\x3\x2\x2\x2]\x6\x3\x2\x2\x2^_\av\x2\x2_`\at\x2\x2`\x61\aw\x2"+
		"\x2\x61h\ag\x2\x2\x62\x63\ah\x2\x2\x63\x64\a\x63\x2\x2\x64\x65\an\x2\x2"+
		"\x65\x66\au\x2\x2\x66h\ag\x2\x2g^\x3\x2\x2\x2g\x62\x3\x2\x2\x2h\b\x3\x2"+
		"\x2\x2im\a$\x2\x2jl\n\x4\x2\x2kj\x3\x2\x2\x2lo\x3\x2\x2\x2mk\x3\x2\x2"+
		"\x2mn\x3\x2\x2\x2np\x3\x2\x2\x2om\x3\x2\x2\x2pq\a$\x2\x2q\n\x3\x2\x2\x2"+
		"rs\x5\x3\x2\x2st\a\x31\x2\x2tu\x5\x3\x2\x2u\f\x3\x2\x2\x2vw\an\x2\x2w"+
		"x\ag\x2\x2xy\av\x2\x2y\xE\x3\x2\x2\x2z{\ah\x2\x2{|\aq\x2\x2|}\at\x2\x2"+
		"}\x10\x3\x2\x2\x2~\x7F\ak\x2\x2\x7F\x80\ap\x2\x2\x80\x12\x3\x2\x2\x2\x81"+
		"\x82\ak\x2\x2\x82\x83\ah\x2\x2\x83\x14\x3\x2\x2\x2\x84\x85\ak\x2\x2\x85"+
		"\x86\ao\x2\x2\x86\x87\ar\x2\x2\x87\x88\aq\x2\x2\x88\x89\at\x2\x2\x89\x8A"+
		"\av\x2\x2\x8A\x16\x3\x2\x2\x2\x8B\x8C\at\x2\x2\x8C\x8D\ag\x2\x2\x8D\x8E"+
		"\av\x2\x2\x8E\x8F\aw\x2\x2\x8F\x90\at\x2\x2\x90\x91\ap\x2\x2\x91\x18\x3"+
		"\x2\x2\x2\x92\x93\ar\x2\x2\x93\x94\at\x2\x2\x94\x95\ak\x2\x2\x95\x96\a"+
		"p\x2\x2\x96\x97\av\x2\x2\x97\x1A\x3\x2\x2\x2\x98\x99\a=\x2\x2\x99\x1C"+
		"\x3\x2\x2\x2\x9A\x9B\a?\x2\x2\x9B\x1E\x3\x2\x2\x2\x9C\x9D\a.\x2\x2\x9D"+
		" \x3\x2\x2\x2\x9E\x9F\a*\x2\x2\x9F\"\x3\x2\x2\x2\xA0\xA1\a+\x2\x2\xA1"+
		"$\x3\x2\x2\x2\xA2\xA3\a-\x2\x2\xA3&\x3\x2\x2\x2\xA4\xA5\a/\x2\x2\xA5("+
		"\x3\x2\x2\x2\xA6\xA7\a,\x2\x2\xA7*\x3\x2\x2\x2\xA8\xA9\a\x31\x2\x2\xA9"+
		",\x3\x2\x2\x2\xAA\xAB\a`\x2\x2\xAB.\x3\x2\x2\x2\xAC\xAD\a~\x2\x2\xAD\xAE"+
		"\a~\x2\x2\xAE\x30\x3\x2\x2\x2\xAF\xB0\a(\x2\x2\xB0\xB1\a(\x2\x2\xB1\x32"+
		"\x3\x2\x2\x2\xB2\xB3\a}\x2\x2\xB3\x34\x3\x2\x2\x2\xB4\xB5\a\x7F\x2\x2"+
		"\xB5\x36\x3\x2\x2\x2\xB6\xB7\a]\x2\x2\xB7\x38\x3\x2\x2\x2\xB8\xB9\a_\x2"+
		"\x2\xB9:\x3\x2\x2\x2\xBA\xBE\t\x5\x2\x2\xBB\xBD\t\x6\x2\x2\xBC\xBB\x3"+
		"\x2\x2\x2\xBD\xC0\x3\x2\x2\x2\xBE\xBC\x3\x2\x2\x2\xBE\xBF\x3\x2\x2\x2"+
		"\xBF<\x3\x2\x2\x2\xC0\xBE\x3\x2\x2\x2\xC1\xC2\a\x31\x2\x2\xC2\xC3\a\x31"+
		"\x2\x2\xC3\xC7\x3\x2\x2\x2\xC4\xC6\v\x2\x2\x2\xC5\xC4\x3\x2\x2\x2\xC6"+
		"\xC9\x3\x2\x2\x2\xC7\xC8\x3\x2\x2\x2\xC7\xC5\x3\x2\x2\x2\xC8\xCA\x3\x2"+
		"\x2\x2\xC9\xC7\x3\x2\x2\x2\xCA\xCB\a\f\x2\x2\xCB\xCC\x3\x2\x2\x2\xCC\xCD"+
		"\b\x1F\x2\x2\xCD>\x3\x2\x2\x2\xCE\xCF\t\a\x2\x2\xCF\xD0\x3\x2\x2\x2\xD0"+
		"\xD1\b \x2\x2\xD1@\x3\x2\x2\x2\xD2\xD3\v\x2\x2\x2\xD3\x42\x3\x2\x2\x2"+
		"\f\x2\x44IOT\\gm\xBE\xC7\x3\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Algo
