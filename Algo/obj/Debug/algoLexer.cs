//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Z:\Algo\Algo\Parsing\algo.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Algo {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class algoLexer : Lexer {
	public const int
		INTEGER=1, FLOAT=2, BOOLEAN=3, STRING=4, RATIONAL=5, LET_SYM=6, FOR_SYM=7, 
		IN_SYM=8, IF_SYM=9, IMPORT_SYM=10, ENDLINE=11, EQUALS=12, COMMA=13, LBRACKET=14, 
		RBRACKET=15, ADD_OP=16, TAKE_OP=17, MUL_OP=18, DIV_OP=19, POW_OP=20, BIN_OR=21, 
		BIN_AND=22, LBRACE=23, RBRACE=24, IDENTIFIER=25, COMMENT=26, WS=27, UNKNOWN_SYMBOL=28;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"INTEGER", "FLOAT", "BOOLEAN", "STRING", "RATIONAL", "LET_SYM", "FOR_SYM", 
		"IN_SYM", "IF_SYM", "IMPORT_SYM", "ENDLINE", "EQUALS", "COMMA", "LBRACKET", 
		"RBRACKET", "ADD_OP", "TAKE_OP", "MUL_OP", "DIV_OP", "POW_OP", "BIN_OR", 
		"BIN_AND", "LBRACE", "RBRACE", "IDENTIFIER", "COMMENT", "WS", "UNKNOWN_SYMBOL"
	};


	public algoLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'let'", "'for'", "'in'", "'if'", 
		"'import'", "';'", "'='", "','", "'('", "')'", "'+'", "'-'", "'*'", "'/'", 
		"'^'", "'||'", "'&&'", "'{'", "'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INTEGER", "FLOAT", "BOOLEAN", "STRING", "RATIONAL", "LET_SYM", 
		"FOR_SYM", "IN_SYM", "IF_SYM", "IMPORT_SYM", "ENDLINE", "EQUALS", "COMMA", 
		"LBRACKET", "RBRACKET", "ADD_OP", "TAKE_OP", "MUL_OP", "DIV_OP", "POW_OP", 
		"BIN_OR", "BIN_AND", "LBRACE", "RBRACE", "IDENTIFIER", "COMMENT", "WS", 
		"UNKNOWN_SYMBOL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "algo.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\x1E\xBB\b\x1\x4"+
		"\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b"+
		"\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4"+
		"\x10\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15"+
		"\t\x15\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A"+
		"\x4\x1B\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x3\x2\x5\x2=\n\x2\x3\x2\a\x2@"+
		"\n\x2\f\x2\xE\x2\x43\v\x2\x3\x2\x3\x2\x3\x3\x5\x3H\n\x3\x3\x3\a\x3K\n"+
		"\x3\f\x3\xE\x3N\v\x3\x3\x3\x3\x3\x3\x3\x6\x3S\n\x3\r\x3\xE\x3T\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4`\n\x4\x3\x5\x3\x5"+
		"\a\x5\x64\n\x5\f\x5\xE\x5g\v\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3"+
		"\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xF"+
		"\x3\xF\x3\x10\x3\x10\x3\x11\x3\x11\x3\x12\x3\x12\x3\x13\x3\x13\x3\x14"+
		"\x3\x14\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\x3\x18"+
		"\x3\x18\x3\x19\x3\x19\x3\x1A\x3\x1A\a\x1A\xA4\n\x1A\f\x1A\xE\x1A\xA7\v"+
		"\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\a\x1B\xAD\n\x1B\f\x1B\xE\x1B\xB0\v\x1B"+
		"\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D"+
		"\x3\xAE\x2\x2\x1E\x3\x2\x3\x5\x2\x4\a\x2\x5\t\x2\x6\v\x2\a\r\x2\b\xF\x2"+
		"\t\x11\x2\n\x13\x2\v\x15\x2\f\x17\x2\r\x19\x2\xE\x1B\x2\xF\x1D\x2\x10"+
		"\x1F\x2\x11!\x2\x12#\x2\x13%\x2\x14\'\x2\x15)\x2\x16+\x2\x17-\x2\x18/"+
		"\x2\x19\x31\x2\x1A\x33\x2\x1B\x35\x2\x1C\x37\x2\x1D\x39\x2\x1E\x3\x2\b"+
		"\x3\x2\x33;\x3\x2\x32;\x3\x2$$\x5\x2\x43\\\x61\x61\x63|\x6\x2\x32;\x43"+
		"\\\x61\x61\x63|\x5\x2\v\f\xF\xF\"\"\xC3\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2"+
		"\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2"+
		"\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3"+
		"\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2"+
		"\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2"+
		"%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2\x2)\x3\x2\x2\x2\x2+\x3\x2\x2\x2\x2-\x3"+
		"\x2\x2\x2\x2/\x3\x2\x2\x2\x2\x31\x3\x2\x2\x2\x2\x33\x3\x2\x2\x2\x2\x35"+
		"\x3\x2\x2\x2\x2\x37\x3\x2\x2\x2\x2\x39\x3\x2\x2\x2\x3<\x3\x2\x2\x2\x5"+
		"G\x3\x2\x2\x2\a_\x3\x2\x2\x2\t\x61\x3\x2\x2\x2\vj\x3\x2\x2\x2\rn\x3\x2"+
		"\x2\x2\xFr\x3\x2\x2\x2\x11v\x3\x2\x2\x2\x13y\x3\x2\x2\x2\x15|\x3\x2\x2"+
		"\x2\x17\x83\x3\x2\x2\x2\x19\x85\x3\x2\x2\x2\x1B\x87\x3\x2\x2\x2\x1D\x89"+
		"\x3\x2\x2\x2\x1F\x8B\x3\x2\x2\x2!\x8D\x3\x2\x2\x2#\x8F\x3\x2\x2\x2%\x91"+
		"\x3\x2\x2\x2\'\x93\x3\x2\x2\x2)\x95\x3\x2\x2\x2+\x97\x3\x2\x2\x2-\x9A"+
		"\x3\x2\x2\x2/\x9D\x3\x2\x2\x2\x31\x9F\x3\x2\x2\x2\x33\xA1\x3\x2\x2\x2"+
		"\x35\xA8\x3\x2\x2\x2\x37\xB5\x3\x2\x2\x2\x39\xB9\x3\x2\x2\x2;=\a/\x2\x2"+
		"<;\x3\x2\x2\x2<=\x3\x2\x2\x2=\x41\x3\x2\x2\x2>@\t\x2\x2\x2?>\x3\x2\x2"+
		"\x2@\x43\x3\x2\x2\x2\x41?\x3\x2\x2\x2\x41\x42\x3\x2\x2\x2\x42\x44\x3\x2"+
		"\x2\x2\x43\x41\x3\x2\x2\x2\x44\x45\t\x3\x2\x2\x45\x4\x3\x2\x2\x2\x46H"+
		"\a/\x2\x2G\x46\x3\x2\x2\x2GH\x3\x2\x2\x2HL\x3\x2\x2\x2IK\t\x2\x2\x2JI"+
		"\x3\x2\x2\x2KN\x3\x2\x2\x2LJ\x3\x2\x2\x2LM\x3\x2\x2\x2MO\x3\x2\x2\x2N"+
		"L\x3\x2\x2\x2OP\t\x3\x2\x2PR\a\x30\x2\x2QS\t\x3\x2\x2RQ\x3\x2\x2\x2ST"+
		"\x3\x2\x2\x2TR\x3\x2\x2\x2TU\x3\x2\x2\x2U\x6\x3\x2\x2\x2VW\av\x2\x2WX"+
		"\at\x2\x2XY\aw\x2\x2Y`\ag\x2\x2Z[\ah\x2\x2[\\\a\x63\x2\x2\\]\an\x2\x2"+
		"]^\au\x2\x2^`\ag\x2\x2_V\x3\x2\x2\x2_Z\x3\x2\x2\x2`\b\x3\x2\x2\x2\x61"+
		"\x65\a$\x2\x2\x62\x64\n\x4\x2\x2\x63\x62\x3\x2\x2\x2\x64g\x3\x2\x2\x2"+
		"\x65\x63\x3\x2\x2\x2\x65\x66\x3\x2\x2\x2\x66h\x3\x2\x2\x2g\x65\x3\x2\x2"+
		"\x2hi\a$\x2\x2i\n\x3\x2\x2\x2jk\x5\x3\x2\x2kl\a\x31\x2\x2lm\x5\x3\x2\x2"+
		"m\f\x3\x2\x2\x2no\an\x2\x2op\ag\x2\x2pq\av\x2\x2q\xE\x3\x2\x2\x2rs\ah"+
		"\x2\x2st\aq\x2\x2tu\at\x2\x2u\x10\x3\x2\x2\x2vw\ak\x2\x2wx\ap\x2\x2x\x12"+
		"\x3\x2\x2\x2yz\ak\x2\x2z{\ah\x2\x2{\x14\x3\x2\x2\x2|}\ak\x2\x2}~\ao\x2"+
		"\x2~\x7F\ar\x2\x2\x7F\x80\aq\x2\x2\x80\x81\at\x2\x2\x81\x82\av\x2\x2\x82"+
		"\x16\x3\x2\x2\x2\x83\x84\a=\x2\x2\x84\x18\x3\x2\x2\x2\x85\x86\a?\x2\x2"+
		"\x86\x1A\x3\x2\x2\x2\x87\x88\a.\x2\x2\x88\x1C\x3\x2\x2\x2\x89\x8A\a*\x2"+
		"\x2\x8A\x1E\x3\x2\x2\x2\x8B\x8C\a+\x2\x2\x8C \x3\x2\x2\x2\x8D\x8E\a-\x2"+
		"\x2\x8E\"\x3\x2\x2\x2\x8F\x90\a/\x2\x2\x90$\x3\x2\x2\x2\x91\x92\a,\x2"+
		"\x2\x92&\x3\x2\x2\x2\x93\x94\a\x31\x2\x2\x94(\x3\x2\x2\x2\x95\x96\a`\x2"+
		"\x2\x96*\x3\x2\x2\x2\x97\x98\a~\x2\x2\x98\x99\a~\x2\x2\x99,\x3\x2\x2\x2"+
		"\x9A\x9B\a(\x2\x2\x9B\x9C\a(\x2\x2\x9C.\x3\x2\x2\x2\x9D\x9E\a}\x2\x2\x9E"+
		"\x30\x3\x2\x2\x2\x9F\xA0\a\x7F\x2\x2\xA0\x32\x3\x2\x2\x2\xA1\xA5\t\x5"+
		"\x2\x2\xA2\xA4\t\x6\x2\x2\xA3\xA2\x3\x2\x2\x2\xA4\xA7\x3\x2\x2\x2\xA5"+
		"\xA3\x3\x2\x2\x2\xA5\xA6\x3\x2\x2\x2\xA6\x34\x3\x2\x2\x2\xA7\xA5\x3\x2"+
		"\x2\x2\xA8\xA9\a\x31\x2\x2\xA9\xAA\a\x31\x2\x2\xAA\xAE\x3\x2\x2\x2\xAB"+
		"\xAD\v\x2\x2\x2\xAC\xAB\x3\x2\x2\x2\xAD\xB0\x3\x2\x2\x2\xAE\xAF\x3\x2"+
		"\x2\x2\xAE\xAC\x3\x2\x2\x2\xAF\xB1\x3\x2\x2\x2\xB0\xAE\x3\x2\x2\x2\xB1"+
		"\xB2\a\f\x2\x2\xB2\xB3\x3\x2\x2\x2\xB3\xB4\b\x1B\x2\x2\xB4\x36\x3\x2\x2"+
		"\x2\xB5\xB6\t\a\x2\x2\xB6\xB7\x3\x2\x2\x2\xB7\xB8\b\x1C\x2\x2\xB8\x38"+
		"\x3\x2\x2\x2\xB9\xBA\v\x2\x2\x2\xBA:\x3\x2\x2\x2\f\x2<\x41GLT_\x65\xA5"+
		"\xAE\x3\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Algo
