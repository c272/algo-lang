//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\Files\Programming\GitHub\algo\Algo\Parsing\algo.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Algo {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class algoLexer : Lexer {
	public const int
		INTEGER=1, FLOAT=2, BOOLEAN=3, STRING=4, RATIONAL=5, NULL=6, LET_SYM=7, 
		FOR_SYM=8, WHILE_SYM=9, IN_SYM=10, IF_SYM=11, TO_SYM=12, LIB_SYM=13, SIG_FIG_SYM=14, 
		OBJ_SYM=15, ELSE_SYM=16, IMPORT_SYM=17, RETURN_SYM=18, PRINT_SYM=19, DISREGARD_SYM=20, 
		ENDLINE=21, EQUALS=22, COMMA=23, LBRACE=24, RBRACE=25, LSQBR=26, RSQBR=27, 
		INVERT_SYM=28, LBRACKET=29, RBRACKET=30, ADD_OP=31, TAKE_OP=32, MUL_OP=33, 
		DIV_OP=34, POW_OP=35, POINT=36, ADDFROM_OP=37, TAKEFROM_OP=38, DIVFROM_OP=39, 
		MULFROM_OP=40, ADD_PFOP=41, TAKE_PFOP=42, BIN_OR=43, BIN_AND=44, BIN_NET=45, 
		BIN_EQUALS=46, GRTR_THAN=47, LESS_THAN=48, GRTR_THAN_ET=49, LESS_THAN_ET=50, 
		IDENTIFIER=51, COMMENT=52, WS=53, UNKNOWN_SYMBOL=54;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"INTEGER", "FLOAT", "BOOLEAN", "STRING", "RATIONAL", "NULL", "LET_SYM", 
		"FOR_SYM", "WHILE_SYM", "IN_SYM", "IF_SYM", "TO_SYM", "LIB_SYM", "SIG_FIG_SYM", 
		"OBJ_SYM", "ELSE_SYM", "IMPORT_SYM", "RETURN_SYM", "PRINT_SYM", "DISREGARD_SYM", 
		"ENDLINE", "EQUALS", "COMMA", "LBRACE", "RBRACE", "LSQBR", "RSQBR", "INVERT_SYM", 
		"LBRACKET", "RBRACKET", "ADD_OP", "TAKE_OP", "MUL_OP", "DIV_OP", "POW_OP", 
		"POINT", "ADDFROM_OP", "TAKEFROM_OP", "DIVFROM_OP", "MULFROM_OP", "ADD_PFOP", 
		"TAKE_PFOP", "BIN_OR", "BIN_AND", "BIN_NET", "BIN_EQUALS", "GRTR_THAN", 
		"LESS_THAN", "GRTR_THAN_ET", "LESS_THAN_ET", "IDENTIFIER", "COMMENT", 
		"WS", "UNKNOWN_SYMBOL"
	};


	public algoLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'null'", "'let'", "'for'", "'while'", 
		"'in'", "'if'", "'to'", "'library'", "'sf'", "'object'", "'else'", "'import'", 
		"'return'", "'print'", "'disregard'", "';'", "'='", "','", "'{'", "'}'", 
		"'['", "']'", "'!'", "'('", "')'", "'+'", "'-'", "'*'", "'/'", "'^'", 
		"'.'", "'+='", "'-='", "'/='", "'*='", "'++'", "'--'", "'|'", "'&'", "'!='", 
		"'=='", "'>'", "'<'", "'>='", "'<='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INTEGER", "FLOAT", "BOOLEAN", "STRING", "RATIONAL", "NULL", "LET_SYM", 
		"FOR_SYM", "WHILE_SYM", "IN_SYM", "IF_SYM", "TO_SYM", "LIB_SYM", "SIG_FIG_SYM", 
		"OBJ_SYM", "ELSE_SYM", "IMPORT_SYM", "RETURN_SYM", "PRINT_SYM", "DISREGARD_SYM", 
		"ENDLINE", "EQUALS", "COMMA", "LBRACE", "RBRACE", "LSQBR", "RSQBR", "INVERT_SYM", 
		"LBRACKET", "RBRACKET", "ADD_OP", "TAKE_OP", "MUL_OP", "DIV_OP", "POW_OP", 
		"POINT", "ADDFROM_OP", "TAKEFROM_OP", "DIVFROM_OP", "MULFROM_OP", "ADD_PFOP", 
		"TAKE_PFOP", "BIN_OR", "BIN_AND", "BIN_NET", "BIN_EQUALS", "GRTR_THAN", 
		"LESS_THAN", "GRTR_THAN_ET", "LESS_THAN_ET", "IDENTIFIER", "COMMENT", 
		"WS", "UNKNOWN_SYMBOL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "algo.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\x38\x155\b\x1\x4"+
		"\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b"+
		"\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4"+
		"\x10\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15"+
		"\t\x15\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A"+
		"\x4\x1B\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 "+
		"\t \x4!\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t"+
		")\x4*\t*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31"+
		"\x4\x32\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37"+
		"\t\x37\x3\x2\x5\x2q\n\x2\x3\x2\x3\x2\a\x2u\n\x2\f\x2\xE\x2x\v\x2\x3\x2"+
		"\x5\x2{\n\x2\x3\x3\x5\x3~\n\x3\x3\x3\a\x3\x81\n\x3\f\x3\xE\x3\x84\v\x3"+
		"\x3\x3\x3\x3\x3\x3\x6\x3\x89\n\x3\r\x3\xE\x3\x8A\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4\x96\n\x4\x3\x5\x3\x5\a\x5\x9A"+
		"\n\x5\f\x5\xE\x5\x9D\v\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3"+
		"\n\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\xE\x3"+
		"\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13"+
		"\x3\x13\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14"+
		"\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15"+
		"\x3\x16\x3\x16\x3\x17\x3\x17\x3\x18\x3\x18\x3\x19\x3\x19\x3\x1A\x3\x1A"+
		"\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1F\x3\x1F"+
		"\x3 \x3 \x3!\x3!\x3\"\x3\"\x3#\x3#\x3$\x3$\x3%\x3%\x3&\x3&\x3&\x3\'\x3"+
		"\'\x3\'\x3(\x3(\x3(\x3)\x3)\x3)\x3*\x3*\x3*\x3+\x3+\x3+\x3,\x3,\x3-\x3"+
		"-\x3.\x3.\x3.\x3/\x3/\x3/\x3\x30\x3\x30\x3\x31\x3\x31\x3\x32\x3\x32\x3"+
		"\x32\x3\x33\x3\x33\x3\x33\x3\x34\x3\x34\a\x34\x13E\n\x34\f\x34\xE\x34"+
		"\x141\v\x34\x3\x35\x3\x35\x3\x35\x3\x35\a\x35\x147\n\x35\f\x35\xE\x35"+
		"\x14A\v\x35\x3\x35\x3\x35\x3\x35\x3\x35\x3\x36\x3\x36\x3\x36\x3\x36\x3"+
		"\x37\x3\x37\x3\x148\x2\x2\x38\x3\x2\x3\x5\x2\x4\a\x2\x5\t\x2\x6\v\x2\a"+
		"\r\x2\b\xF\x2\t\x11\x2\n\x13\x2\v\x15\x2\f\x17\x2\r\x19\x2\xE\x1B\x2\xF"+
		"\x1D\x2\x10\x1F\x2\x11!\x2\x12#\x2\x13%\x2\x14\'\x2\x15)\x2\x16+\x2\x17"+
		"-\x2\x18/\x2\x19\x31\x2\x1A\x33\x2\x1B\x35\x2\x1C\x37\x2\x1D\x39\x2\x1E"+
		";\x2\x1F=\x2 ?\x2!\x41\x2\"\x43\x2#\x45\x2$G\x2%I\x2&K\x2\'M\x2(O\x2)"+
		"Q\x2*S\x2+U\x2,W\x2-Y\x2.[\x2/]\x2\x30_\x2\x31\x61\x2\x32\x63\x2\x33\x65"+
		"\x2\x34g\x2\x35i\x2\x36k\x2\x37m\x2\x38\x3\x2\b\x3\x2\x33;\x3\x2\x32;"+
		"\x3\x2$$\x5\x2\x43\\\x61\x61\x63|\x6\x2\x32;\x43\\\x61\x61\x63|\x5\x2"+
		"\v\f\xF\xF\"\"\x15E\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2"+
		"\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2"+
		"\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3"+
		"\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2"+
		"\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'"+
		"\x3\x2\x2\x2\x2)\x3\x2\x2\x2\x2+\x3\x2\x2\x2\x2-\x3\x2\x2\x2\x2/\x3\x2"+
		"\x2\x2\x2\x31\x3\x2\x2\x2\x2\x33\x3\x2\x2\x2\x2\x35\x3\x2\x2\x2\x2\x37"+
		"\x3\x2\x2\x2\x2\x39\x3\x2\x2\x2\x2;\x3\x2\x2\x2\x2=\x3\x2\x2\x2\x2?\x3"+
		"\x2\x2\x2\x2\x41\x3\x2\x2\x2\x2\x43\x3\x2\x2\x2\x2\x45\x3\x2\x2\x2\x2"+
		"G\x3\x2\x2\x2\x2I\x3\x2\x2\x2\x2K\x3\x2\x2\x2\x2M\x3\x2\x2\x2\x2O\x3\x2"+
		"\x2\x2\x2Q\x3\x2\x2\x2\x2S\x3\x2\x2\x2\x2U\x3\x2\x2\x2\x2W\x3\x2\x2\x2"+
		"\x2Y\x3\x2\x2\x2\x2[\x3\x2\x2\x2\x2]\x3\x2\x2\x2\x2_\x3\x2\x2\x2\x2\x61"+
		"\x3\x2\x2\x2\x2\x63\x3\x2\x2\x2\x2\x65\x3\x2\x2\x2\x2g\x3\x2\x2\x2\x2"+
		"i\x3\x2\x2\x2\x2k\x3\x2\x2\x2\x2m\x3\x2\x2\x2\x3z\x3\x2\x2\x2\x5}\x3\x2"+
		"\x2\x2\a\x95\x3\x2\x2\x2\t\x97\x3\x2\x2\x2\v\xA0\x3\x2\x2\x2\r\xA4\x3"+
		"\x2\x2\x2\xF\xA9\x3\x2\x2\x2\x11\xAD\x3\x2\x2\x2\x13\xB1\x3\x2\x2\x2\x15"+
		"\xB7\x3\x2\x2\x2\x17\xBA\x3\x2\x2\x2\x19\xBD\x3\x2\x2\x2\x1B\xC0\x3\x2"+
		"\x2\x2\x1D\xC8\x3\x2\x2\x2\x1F\xCB\x3\x2\x2\x2!\xD2\x3\x2\x2\x2#\xD7\x3"+
		"\x2\x2\x2%\xDE\x3\x2\x2\x2\'\xE5\x3\x2\x2\x2)\xEB\x3\x2\x2\x2+\xF5\x3"+
		"\x2\x2\x2-\xF7\x3\x2\x2\x2/\xF9\x3\x2\x2\x2\x31\xFB\x3\x2\x2\x2\x33\xFD"+
		"\x3\x2\x2\x2\x35\xFF\x3\x2\x2\x2\x37\x101\x3\x2\x2\x2\x39\x103\x3\x2\x2"+
		"\x2;\x105\x3\x2\x2\x2=\x107\x3\x2\x2\x2?\x109\x3\x2\x2\x2\x41\x10B\x3"+
		"\x2\x2\x2\x43\x10D\x3\x2\x2\x2\x45\x10F\x3\x2\x2\x2G\x111\x3\x2\x2\x2"+
		"I\x113\x3\x2\x2\x2K\x115\x3\x2\x2\x2M\x118\x3\x2\x2\x2O\x11B\x3\x2\x2"+
		"\x2Q\x11E\x3\x2\x2\x2S\x121\x3\x2\x2\x2U\x124\x3\x2\x2\x2W\x127\x3\x2"+
		"\x2\x2Y\x129\x3\x2\x2\x2[\x12B\x3\x2\x2\x2]\x12E\x3\x2\x2\x2_\x131\x3"+
		"\x2\x2\x2\x61\x133\x3\x2\x2\x2\x63\x135\x3\x2\x2\x2\x65\x138\x3\x2\x2"+
		"\x2g\x13B\x3\x2\x2\x2i\x142\x3\x2\x2\x2k\x14F\x3\x2\x2\x2m\x153\x3\x2"+
		"\x2\x2oq\a/\x2\x2po\x3\x2\x2\x2pq\x3\x2\x2\x2qr\x3\x2\x2\x2rv\t\x2\x2"+
		"\x2su\t\x3\x2\x2ts\x3\x2\x2\x2ux\x3\x2\x2\x2vt\x3\x2\x2\x2vw\x3\x2\x2"+
		"\x2w{\x3\x2\x2\x2xv\x3\x2\x2\x2y{\a\x32\x2\x2zp\x3\x2\x2\x2zy\x3\x2\x2"+
		"\x2{\x4\x3\x2\x2\x2|~\a/\x2\x2}|\x3\x2\x2\x2}~\x3\x2\x2\x2~\x82\x3\x2"+
		"\x2\x2\x7F\x81\t\x2\x2\x2\x80\x7F\x3\x2\x2\x2\x81\x84\x3\x2\x2\x2\x82"+
		"\x80\x3\x2\x2\x2\x82\x83\x3\x2\x2\x2\x83\x85\x3\x2\x2\x2\x84\x82\x3\x2"+
		"\x2\x2\x85\x86\t\x3\x2\x2\x86\x88\a\x30\x2\x2\x87\x89\t\x3\x2\x2\x88\x87"+
		"\x3\x2\x2\x2\x89\x8A\x3\x2\x2\x2\x8A\x88\x3\x2\x2\x2\x8A\x8B\x3\x2\x2"+
		"\x2\x8B\x6\x3\x2\x2\x2\x8C\x8D\av\x2\x2\x8D\x8E\at\x2\x2\x8E\x8F\aw\x2"+
		"\x2\x8F\x96\ag\x2\x2\x90\x91\ah\x2\x2\x91\x92\a\x63\x2\x2\x92\x93\an\x2"+
		"\x2\x93\x94\au\x2\x2\x94\x96\ag\x2\x2\x95\x8C\x3\x2\x2\x2\x95\x90\x3\x2"+
		"\x2\x2\x96\b\x3\x2\x2\x2\x97\x9B\a$\x2\x2\x98\x9A\n\x4\x2\x2\x99\x98\x3"+
		"\x2\x2\x2\x9A\x9D\x3\x2\x2\x2\x9B\x99\x3\x2\x2\x2\x9B\x9C\x3\x2\x2\x2"+
		"\x9C\x9E\x3\x2\x2\x2\x9D\x9B\x3\x2\x2\x2\x9E\x9F\a$\x2\x2\x9F\n\x3\x2"+
		"\x2\x2\xA0\xA1\x5\x3\x2\x2\xA1\xA2\a\x31\x2\x2\xA2\xA3\x5\x3\x2\x2\xA3"+
		"\f\x3\x2\x2\x2\xA4\xA5\ap\x2\x2\xA5\xA6\aw\x2\x2\xA6\xA7\an\x2\x2\xA7"+
		"\xA8\an\x2\x2\xA8\xE\x3\x2\x2\x2\xA9\xAA\an\x2\x2\xAA\xAB\ag\x2\x2\xAB"+
		"\xAC\av\x2\x2\xAC\x10\x3\x2\x2\x2\xAD\xAE\ah\x2\x2\xAE\xAF\aq\x2\x2\xAF"+
		"\xB0\at\x2\x2\xB0\x12\x3\x2\x2\x2\xB1\xB2\ay\x2\x2\xB2\xB3\aj\x2\x2\xB3"+
		"\xB4\ak\x2\x2\xB4\xB5\an\x2\x2\xB5\xB6\ag\x2\x2\xB6\x14\x3\x2\x2\x2\xB7"+
		"\xB8\ak\x2\x2\xB8\xB9\ap\x2\x2\xB9\x16\x3\x2\x2\x2\xBA\xBB\ak\x2\x2\xBB"+
		"\xBC\ah\x2\x2\xBC\x18\x3\x2\x2\x2\xBD\xBE\av\x2\x2\xBE\xBF\aq\x2\x2\xBF"+
		"\x1A\x3\x2\x2\x2\xC0\xC1\an\x2\x2\xC1\xC2\ak\x2\x2\xC2\xC3\a\x64\x2\x2"+
		"\xC3\xC4\at\x2\x2\xC4\xC5\a\x63\x2\x2\xC5\xC6\at\x2\x2\xC6\xC7\a{\x2\x2"+
		"\xC7\x1C\x3\x2\x2\x2\xC8\xC9\au\x2\x2\xC9\xCA\ah\x2\x2\xCA\x1E\x3\x2\x2"+
		"\x2\xCB\xCC\aq\x2\x2\xCC\xCD\a\x64\x2\x2\xCD\xCE\al\x2\x2\xCE\xCF\ag\x2"+
		"\x2\xCF\xD0\a\x65\x2\x2\xD0\xD1\av\x2\x2\xD1 \x3\x2\x2\x2\xD2\xD3\ag\x2"+
		"\x2\xD3\xD4\an\x2\x2\xD4\xD5\au\x2\x2\xD5\xD6\ag\x2\x2\xD6\"\x3\x2\x2"+
		"\x2\xD7\xD8\ak\x2\x2\xD8\xD9\ao\x2\x2\xD9\xDA\ar\x2\x2\xDA\xDB\aq\x2\x2"+
		"\xDB\xDC\at\x2\x2\xDC\xDD\av\x2\x2\xDD$\x3\x2\x2\x2\xDE\xDF\at\x2\x2\xDF"+
		"\xE0\ag\x2\x2\xE0\xE1\av\x2\x2\xE1\xE2\aw\x2\x2\xE2\xE3\at\x2\x2\xE3\xE4"+
		"\ap\x2\x2\xE4&\x3\x2\x2\x2\xE5\xE6\ar\x2\x2\xE6\xE7\at\x2\x2\xE7\xE8\a"+
		"k\x2\x2\xE8\xE9\ap\x2\x2\xE9\xEA\av\x2\x2\xEA(\x3\x2\x2\x2\xEB\xEC\a\x66"+
		"\x2\x2\xEC\xED\ak\x2\x2\xED\xEE\au\x2\x2\xEE\xEF\at\x2\x2\xEF\xF0\ag\x2"+
		"\x2\xF0\xF1\ai\x2\x2\xF1\xF2\a\x63\x2\x2\xF2\xF3\at\x2\x2\xF3\xF4\a\x66"+
		"\x2\x2\xF4*\x3\x2\x2\x2\xF5\xF6\a=\x2\x2\xF6,\x3\x2\x2\x2\xF7\xF8\a?\x2"+
		"\x2\xF8.\x3\x2\x2\x2\xF9\xFA\a.\x2\x2\xFA\x30\x3\x2\x2\x2\xFB\xFC\a}\x2"+
		"\x2\xFC\x32\x3\x2\x2\x2\xFD\xFE\a\x7F\x2\x2\xFE\x34\x3\x2\x2\x2\xFF\x100"+
		"\a]\x2\x2\x100\x36\x3\x2\x2\x2\x101\x102\a_\x2\x2\x102\x38\x3\x2\x2\x2"+
		"\x103\x104\a#\x2\x2\x104:\x3\x2\x2\x2\x105\x106\a*\x2\x2\x106<\x3\x2\x2"+
		"\x2\x107\x108\a+\x2\x2\x108>\x3\x2\x2\x2\x109\x10A\a-\x2\x2\x10A@\x3\x2"+
		"\x2\x2\x10B\x10C\a/\x2\x2\x10C\x42\x3\x2\x2\x2\x10D\x10E\a,\x2\x2\x10E"+
		"\x44\x3\x2\x2\x2\x10F\x110\a\x31\x2\x2\x110\x46\x3\x2\x2\x2\x111\x112"+
		"\a`\x2\x2\x112H\x3\x2\x2\x2\x113\x114\a\x30\x2\x2\x114J\x3\x2\x2\x2\x115"+
		"\x116\a-\x2\x2\x116\x117\a?\x2\x2\x117L\x3\x2\x2\x2\x118\x119\a/\x2\x2"+
		"\x119\x11A\a?\x2\x2\x11AN\x3\x2\x2\x2\x11B\x11C\a\x31\x2\x2\x11C\x11D"+
		"\a?\x2\x2\x11DP\x3\x2\x2\x2\x11E\x11F\a,\x2\x2\x11F\x120\a?\x2\x2\x120"+
		"R\x3\x2\x2\x2\x121\x122\a-\x2\x2\x122\x123\a-\x2\x2\x123T\x3\x2\x2\x2"+
		"\x124\x125\a/\x2\x2\x125\x126\a/\x2\x2\x126V\x3\x2\x2\x2\x127\x128\a~"+
		"\x2\x2\x128X\x3\x2\x2\x2\x129\x12A\a(\x2\x2\x12AZ\x3\x2\x2\x2\x12B\x12C"+
		"\a#\x2\x2\x12C\x12D\a?\x2\x2\x12D\\\x3\x2\x2\x2\x12E\x12F\a?\x2\x2\x12F"+
		"\x130\a?\x2\x2\x130^\x3\x2\x2\x2\x131\x132\a@\x2\x2\x132`\x3\x2\x2\x2"+
		"\x133\x134\a>\x2\x2\x134\x62\x3\x2\x2\x2\x135\x136\a@\x2\x2\x136\x137"+
		"\a?\x2\x2\x137\x64\x3\x2\x2\x2\x138\x139\a>\x2\x2\x139\x13A\a?\x2\x2\x13A"+
		"\x66\x3\x2\x2\x2\x13B\x13F\t\x5\x2\x2\x13C\x13E\t\x6\x2\x2\x13D\x13C\x3"+
		"\x2\x2\x2\x13E\x141\x3\x2\x2\x2\x13F\x13D\x3\x2\x2\x2\x13F\x140\x3\x2"+
		"\x2\x2\x140h\x3\x2\x2\x2\x141\x13F\x3\x2\x2\x2\x142\x143\a\x31\x2\x2\x143"+
		"\x144\a\x31\x2\x2\x144\x148\x3\x2\x2\x2\x145\x147\v\x2\x2\x2\x146\x145"+
		"\x3\x2\x2\x2\x147\x14A\x3\x2\x2\x2\x148\x149\x3\x2\x2\x2\x148\x146\x3"+
		"\x2\x2\x2\x149\x14B\x3\x2\x2\x2\x14A\x148\x3\x2\x2\x2\x14B\x14C\a\f\x2"+
		"\x2\x14C\x14D\x3\x2\x2\x2\x14D\x14E\b\x35\x2\x2\x14Ej\x3\x2\x2\x2\x14F"+
		"\x150\t\a\x2\x2\x150\x151\x3\x2\x2\x2\x151\x152\b\x36\x2\x2\x152l\x3\x2"+
		"\x2\x2\x153\x154\v\x2\x2\x2\x154n\x3\x2\x2\x2\r\x2pvz}\x82\x8A\x95\x9B"+
		"\x13F\x148\x3\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Algo
