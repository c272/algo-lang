//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Z:\Algo\Algo\Parsing\algo.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Algo {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class algoLexer : Lexer {
	public const int
		INTEGER=1, FLOAT=2, BOOLEAN=3, STRING=4, RATIONAL=5, LET_SYM=6, FOR_SYM=7, 
		IN_SYM=8, IF_SYM=9, TO_SYM=10, LIB_SYM=11, SIG_FIG_SYM=12, ELSE_SYM=13, 
		IMPORT_SYM=14, RETURN_SYM=15, PRINT_SYM=16, DISREGARD_SYM=17, ENDLINE=18, 
		EQUALS=19, COMMA=20, LBRACE=21, RBRACE=22, LSQBR=23, RSQBR=24, LBRACKET=25, 
		RBRACKET=26, ADD_OP=27, TAKE_OP=28, MUL_OP=29, DIV_OP=30, POW_OP=31, POINT=32, 
		BIN_OR=33, BIN_AND=34, BIN_EQUALS=35, GRTR_THAN=36, LESS_THAN=37, GRTR_THAN_ET=38, 
		LESS_THAN_ET=39, IDENTIFIER=40, COMMENT=41, WS=42, UNKNOWN_SYMBOL=43;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"INTEGER", "FLOAT", "BOOLEAN", "STRING", "RATIONAL", "LET_SYM", "FOR_SYM", 
		"IN_SYM", "IF_SYM", "TO_SYM", "LIB_SYM", "SIG_FIG_SYM", "ELSE_SYM", "IMPORT_SYM", 
		"RETURN_SYM", "PRINT_SYM", "DISREGARD_SYM", "ENDLINE", "EQUALS", "COMMA", 
		"LBRACE", "RBRACE", "LSQBR", "RSQBR", "LBRACKET", "RBRACKET", "ADD_OP", 
		"TAKE_OP", "MUL_OP", "DIV_OP", "POW_OP", "POINT", "BIN_OR", "BIN_AND", 
		"BIN_EQUALS", "GRTR_THAN", "LESS_THAN", "GRTR_THAN_ET", "LESS_THAN_ET", 
		"IDENTIFIER", "COMMENT", "WS", "UNKNOWN_SYMBOL"
	};


	public algoLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'let'", "'for'", "'in'", "'if'", 
		"'to'", "'library'", "'sf'", "'else'", "'import'", "'return'", "'print'", 
		"'disregard'", "';'", "'='", "','", "'{'", "'}'", "'['", "']'", "'('", 
		"')'", "'+'", "'-'", "'*'", "'/'", "'^'", "'.'", "'|'", "'&'", "'=='", 
		"'>'", "'<'", "'>='", "'<='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INTEGER", "FLOAT", "BOOLEAN", "STRING", "RATIONAL", "LET_SYM", 
		"FOR_SYM", "IN_SYM", "IF_SYM", "TO_SYM", "LIB_SYM", "SIG_FIG_SYM", "ELSE_SYM", 
		"IMPORT_SYM", "RETURN_SYM", "PRINT_SYM", "DISREGARD_SYM", "ENDLINE", "EQUALS", 
		"COMMA", "LBRACE", "RBRACE", "LSQBR", "RSQBR", "LBRACKET", "RBRACKET", 
		"ADD_OP", "TAKE_OP", "MUL_OP", "DIV_OP", "POW_OP", "POINT", "BIN_OR", 
		"BIN_AND", "BIN_EQUALS", "GRTR_THAN", "LESS_THAN", "GRTR_THAN_ET", "LESS_THAN_ET", 
		"IDENTIFIER", "COMMENT", "WS", "UNKNOWN_SYMBOL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "algo.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2-\x113\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x3\x2\x5\x2[\n\x2\x3\x2\x3\x2\a\x2_\n\x2\f\x2\xE\x2\x62"+
		"\v\x2\x3\x3\x5\x3\x65\n\x3\x3\x3\a\x3h\n\x3\f\x3\xE\x3k\v\x3\x3\x3\x3"+
		"\x3\x3\x3\x6\x3p\n\x3\r\x3\xE\x3q\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x5\x4}\n\x4\x3\x5\x3\x5\a\x5\x81\n\x5\f\x5\xE\x5\x84"+
		"\v\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\b\x3"+
		"\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\f\x3\f\x3"+
		"\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3"+
		"\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3"+
		"\x10\x3\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3"+
		"\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3"+
		"\x13\x3\x13\x3\x14\x3\x14\x3\x15\x3\x15\x3\x16\x3\x16\x3\x17\x3\x17\x3"+
		"\x18\x3\x18\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3"+
		"\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3 \x3 \x3!\x3!\x3\"\x3\"\x3#"+
		"\x3#\x3$\x3$\x3$\x3%\x3%\x3&\x3&\x3\'\x3\'\x3\'\x3(\x3(\x3(\x3)\x3)\a"+
		")\xFC\n)\f)\xE)\xFF\v)\x3*\x3*\x3*\x3*\a*\x105\n*\f*\xE*\x108\v*\x3*\x3"+
		"*\x3*\x3*\x3+\x3+\x3+\x3+\x3,\x3,\x3\x106\x2\x2-\x3\x2\x3\x5\x2\x4\a\x2"+
		"\x5\t\x2\x6\v\x2\a\r\x2\b\xF\x2\t\x11\x2\n\x13\x2\v\x15\x2\f\x17\x2\r"+
		"\x19\x2\xE\x1B\x2\xF\x1D\x2\x10\x1F\x2\x11!\x2\x12#\x2\x13%\x2\x14\'\x2"+
		"\x15)\x2\x16+\x2\x17-\x2\x18/\x2\x19\x31\x2\x1A\x33\x2\x1B\x35\x2\x1C"+
		"\x37\x2\x1D\x39\x2\x1E;\x2\x1F=\x2 ?\x2!\x41\x2\"\x43\x2#\x45\x2$G\x2"+
		"%I\x2&K\x2\'M\x2(O\x2)Q\x2*S\x2+U\x2,W\x2-\x3\x2\b\x3\x2\x33;\x3\x2\x32"+
		";\x3\x2$$\x5\x2\x43\\\x61\x61\x63|\x6\x2\x32;\x43\\\x61\x61\x63|\x5\x2"+
		"\v\f\xF\xF\"\"\x11B\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2"+
		"\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2"+
		"\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3"+
		"\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2"+
		"\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'"+
		"\x3\x2\x2\x2\x2)\x3\x2\x2\x2\x2+\x3\x2\x2\x2\x2-\x3\x2\x2\x2\x2/\x3\x2"+
		"\x2\x2\x2\x31\x3\x2\x2\x2\x2\x33\x3\x2\x2\x2\x2\x35\x3\x2\x2\x2\x2\x37"+
		"\x3\x2\x2\x2\x2\x39\x3\x2\x2\x2\x2;\x3\x2\x2\x2\x2=\x3\x2\x2\x2\x2?\x3"+
		"\x2\x2\x2\x2\x41\x3\x2\x2\x2\x2\x43\x3\x2\x2\x2\x2\x45\x3\x2\x2\x2\x2"+
		"G\x3\x2\x2\x2\x2I\x3\x2\x2\x2\x2K\x3\x2\x2\x2\x2M\x3\x2\x2\x2\x2O\x3\x2"+
		"\x2\x2\x2Q\x3\x2\x2\x2\x2S\x3\x2\x2\x2\x2U\x3\x2\x2\x2\x2W\x3\x2\x2\x2"+
		"\x3Z\x3\x2\x2\x2\x5\x64\x3\x2\x2\x2\a|\x3\x2\x2\x2\t~\x3\x2\x2\x2\v\x87"+
		"\x3\x2\x2\x2\r\x8B\x3\x2\x2\x2\xF\x8F\x3\x2\x2\x2\x11\x93\x3\x2\x2\x2"+
		"\x13\x96\x3\x2\x2\x2\x15\x99\x3\x2\x2\x2\x17\x9C\x3\x2\x2\x2\x19\xA4\x3"+
		"\x2\x2\x2\x1B\xA7\x3\x2\x2\x2\x1D\xAC\x3\x2\x2\x2\x1F\xB3\x3\x2\x2\x2"+
		"!\xBA\x3\x2\x2\x2#\xC0\x3\x2\x2\x2%\xCA\x3\x2\x2\x2\'\xCC\x3\x2\x2\x2"+
		")\xCE\x3\x2\x2\x2+\xD0\x3\x2\x2\x2-\xD2\x3\x2\x2\x2/\xD4\x3\x2\x2\x2\x31"+
		"\xD6\x3\x2\x2\x2\x33\xD8\x3\x2\x2\x2\x35\xDA\x3\x2\x2\x2\x37\xDC\x3\x2"+
		"\x2\x2\x39\xDE\x3\x2\x2\x2;\xE0\x3\x2\x2\x2=\xE2\x3\x2\x2\x2?\xE4\x3\x2"+
		"\x2\x2\x41\xE6\x3\x2\x2\x2\x43\xE8\x3\x2\x2\x2\x45\xEA\x3\x2\x2\x2G\xEC"+
		"\x3\x2\x2\x2I\xEF\x3\x2\x2\x2K\xF1\x3\x2\x2\x2M\xF3\x3\x2\x2\x2O\xF6\x3"+
		"\x2\x2\x2Q\xF9\x3\x2\x2\x2S\x100\x3\x2\x2\x2U\x10D\x3\x2\x2\x2W\x111\x3"+
		"\x2\x2\x2Y[\a/\x2\x2ZY\x3\x2\x2\x2Z[\x3\x2\x2\x2[\\\x3\x2\x2\x2\\`\t\x2"+
		"\x2\x2]_\t\x3\x2\x2^]\x3\x2\x2\x2_\x62\x3\x2\x2\x2`^\x3\x2\x2\x2`\x61"+
		"\x3\x2\x2\x2\x61\x4\x3\x2\x2\x2\x62`\x3\x2\x2\x2\x63\x65\a/\x2\x2\x64"+
		"\x63\x3\x2\x2\x2\x64\x65\x3\x2\x2\x2\x65i\x3\x2\x2\x2\x66h\t\x2\x2\x2"+
		"g\x66\x3\x2\x2\x2hk\x3\x2\x2\x2ig\x3\x2\x2\x2ij\x3\x2\x2\x2jl\x3\x2\x2"+
		"\x2ki\x3\x2\x2\x2lm\t\x3\x2\x2mo\a\x30\x2\x2np\t\x3\x2\x2on\x3\x2\x2\x2"+
		"pq\x3\x2\x2\x2qo\x3\x2\x2\x2qr\x3\x2\x2\x2r\x6\x3\x2\x2\x2st\av\x2\x2"+
		"tu\at\x2\x2uv\aw\x2\x2v}\ag\x2\x2wx\ah\x2\x2xy\a\x63\x2\x2yz\an\x2\x2"+
		"z{\au\x2\x2{}\ag\x2\x2|s\x3\x2\x2\x2|w\x3\x2\x2\x2}\b\x3\x2\x2\x2~\x82"+
		"\a$\x2\x2\x7F\x81\n\x4\x2\x2\x80\x7F\x3\x2\x2\x2\x81\x84\x3\x2\x2\x2\x82"+
		"\x80\x3\x2\x2\x2\x82\x83\x3\x2\x2\x2\x83\x85\x3\x2\x2\x2\x84\x82\x3\x2"+
		"\x2\x2\x85\x86\a$\x2\x2\x86\n\x3\x2\x2\x2\x87\x88\x5\x3\x2\x2\x88\x89"+
		"\a\x31\x2\x2\x89\x8A\x5\x3\x2\x2\x8A\f\x3\x2\x2\x2\x8B\x8C\an\x2\x2\x8C"+
		"\x8D\ag\x2\x2\x8D\x8E\av\x2\x2\x8E\xE\x3\x2\x2\x2\x8F\x90\ah\x2\x2\x90"+
		"\x91\aq\x2\x2\x91\x92\at\x2\x2\x92\x10\x3\x2\x2\x2\x93\x94\ak\x2\x2\x94"+
		"\x95\ap\x2\x2\x95\x12\x3\x2\x2\x2\x96\x97\ak\x2\x2\x97\x98\ah\x2\x2\x98"+
		"\x14\x3\x2\x2\x2\x99\x9A\av\x2\x2\x9A\x9B\aq\x2\x2\x9B\x16\x3\x2\x2\x2"+
		"\x9C\x9D\an\x2\x2\x9D\x9E\ak\x2\x2\x9E\x9F\a\x64\x2\x2\x9F\xA0\at\x2\x2"+
		"\xA0\xA1\a\x63\x2\x2\xA1\xA2\at\x2\x2\xA2\xA3\a{\x2\x2\xA3\x18\x3\x2\x2"+
		"\x2\xA4\xA5\au\x2\x2\xA5\xA6\ah\x2\x2\xA6\x1A\x3\x2\x2\x2\xA7\xA8\ag\x2"+
		"\x2\xA8\xA9\an\x2\x2\xA9\xAA\au\x2\x2\xAA\xAB\ag\x2\x2\xAB\x1C\x3\x2\x2"+
		"\x2\xAC\xAD\ak\x2\x2\xAD\xAE\ao\x2\x2\xAE\xAF\ar\x2\x2\xAF\xB0\aq\x2\x2"+
		"\xB0\xB1\at\x2\x2\xB1\xB2\av\x2\x2\xB2\x1E\x3\x2\x2\x2\xB3\xB4\at\x2\x2"+
		"\xB4\xB5\ag\x2\x2\xB5\xB6\av\x2\x2\xB6\xB7\aw\x2\x2\xB7\xB8\at\x2\x2\xB8"+
		"\xB9\ap\x2\x2\xB9 \x3\x2\x2\x2\xBA\xBB\ar\x2\x2\xBB\xBC\at\x2\x2\xBC\xBD"+
		"\ak\x2\x2\xBD\xBE\ap\x2\x2\xBE\xBF\av\x2\x2\xBF\"\x3\x2\x2\x2\xC0\xC1"+
		"\a\x66\x2\x2\xC1\xC2\ak\x2\x2\xC2\xC3\au\x2\x2\xC3\xC4\at\x2\x2\xC4\xC5"+
		"\ag\x2\x2\xC5\xC6\ai\x2\x2\xC6\xC7\a\x63\x2\x2\xC7\xC8\at\x2\x2\xC8\xC9"+
		"\a\x66\x2\x2\xC9$\x3\x2\x2\x2\xCA\xCB\a=\x2\x2\xCB&\x3\x2\x2\x2\xCC\xCD"+
		"\a?\x2\x2\xCD(\x3\x2\x2\x2\xCE\xCF\a.\x2\x2\xCF*\x3\x2\x2\x2\xD0\xD1\a"+
		"}\x2\x2\xD1,\x3\x2\x2\x2\xD2\xD3\a\x7F\x2\x2\xD3.\x3\x2\x2\x2\xD4\xD5"+
		"\a]\x2\x2\xD5\x30\x3\x2\x2\x2\xD6\xD7\a_\x2\x2\xD7\x32\x3\x2\x2\x2\xD8"+
		"\xD9\a*\x2\x2\xD9\x34\x3\x2\x2\x2\xDA\xDB\a+\x2\x2\xDB\x36\x3\x2\x2\x2"+
		"\xDC\xDD\a-\x2\x2\xDD\x38\x3\x2\x2\x2\xDE\xDF\a/\x2\x2\xDF:\x3\x2\x2\x2"+
		"\xE0\xE1\a,\x2\x2\xE1<\x3\x2\x2\x2\xE2\xE3\a\x31\x2\x2\xE3>\x3\x2\x2\x2"+
		"\xE4\xE5\a`\x2\x2\xE5@\x3\x2\x2\x2\xE6\xE7\a\x30\x2\x2\xE7\x42\x3\x2\x2"+
		"\x2\xE8\xE9\a~\x2\x2\xE9\x44\x3\x2\x2\x2\xEA\xEB\a(\x2\x2\xEB\x46\x3\x2"+
		"\x2\x2\xEC\xED\a?\x2\x2\xED\xEE\a?\x2\x2\xEEH\x3\x2\x2\x2\xEF\xF0\a@\x2"+
		"\x2\xF0J\x3\x2\x2\x2\xF1\xF2\a>\x2\x2\xF2L\x3\x2\x2\x2\xF3\xF4\a@\x2\x2"+
		"\xF4\xF5\a?\x2\x2\xF5N\x3\x2\x2\x2\xF6\xF7\a>\x2\x2\xF7\xF8\a?\x2\x2\xF8"+
		"P\x3\x2\x2\x2\xF9\xFD\t\x5\x2\x2\xFA\xFC\t\x6\x2\x2\xFB\xFA\x3\x2\x2\x2"+
		"\xFC\xFF\x3\x2\x2\x2\xFD\xFB\x3\x2\x2\x2\xFD\xFE\x3\x2\x2\x2\xFER\x3\x2"+
		"\x2\x2\xFF\xFD\x3\x2\x2\x2\x100\x101\a\x31\x2\x2\x101\x102\a\x31\x2\x2"+
		"\x102\x106\x3\x2\x2\x2\x103\x105\v\x2\x2\x2\x104\x103\x3\x2\x2\x2\x105"+
		"\x108\x3\x2\x2\x2\x106\x107\x3\x2\x2\x2\x106\x104\x3\x2\x2\x2\x107\x109"+
		"\x3\x2\x2\x2\x108\x106\x3\x2\x2\x2\x109\x10A\a\f\x2\x2\x10A\x10B\x3\x2"+
		"\x2\x2\x10B\x10C\b*\x2\x2\x10CT\x3\x2\x2\x2\x10D\x10E\t\a\x2\x2\x10E\x10F"+
		"\x3\x2\x2\x2\x10F\x110\b+\x2\x2\x110V\x3\x2\x2\x2\x111\x112\v\x2\x2\x2"+
		"\x112X\x3\x2\x2\x2\f\x2Z`\x64iq|\x82\xFD\x106\x3\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Algo
