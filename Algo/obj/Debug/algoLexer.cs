//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\Files\Programming\GitHub\algo\Algo\Parsing\algo.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Algo {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class algoLexer : Lexer {
	public const int
		INTEGER=1, FLOAT=2, BOOLEAN=3, STRING=4, RATIONAL=5, NULL=6, LET_SYM=7, 
		FOR_SYM=8, IN_SYM=9, IF_SYM=10, TO_SYM=11, LIB_SYM=12, SIG_FIG_SYM=13, 
		OBJ_SYM=14, ELSE_SYM=15, IMPORT_SYM=16, RETURN_SYM=17, PRINT_SYM=18, DISREGARD_SYM=19, 
		ENDLINE=20, EQUALS=21, COMMA=22, LBRACE=23, RBRACE=24, LSQBR=25, RSQBR=26, 
		LBRACKET=27, RBRACKET=28, ADD_OP=29, TAKE_OP=30, MUL_OP=31, DIV_OP=32, 
		POW_OP=33, POINT=34, ADDFROM_OP=35, TAKEFROM_OP=36, DIVFROM_OP=37, MULFROM_OP=38, 
		BIN_OR=39, BIN_AND=40, BIN_EQUALS=41, GRTR_THAN=42, LESS_THAN=43, GRTR_THAN_ET=44, 
		LESS_THAN_ET=45, IDENTIFIER=46, COMMENT=47, WS=48, UNKNOWN_SYMBOL=49;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"INTEGER", "FLOAT", "BOOLEAN", "STRING", "RATIONAL", "NULL", "LET_SYM", 
		"FOR_SYM", "IN_SYM", "IF_SYM", "TO_SYM", "LIB_SYM", "SIG_FIG_SYM", "OBJ_SYM", 
		"ELSE_SYM", "IMPORT_SYM", "RETURN_SYM", "PRINT_SYM", "DISREGARD_SYM", 
		"ENDLINE", "EQUALS", "COMMA", "LBRACE", "RBRACE", "LSQBR", "RSQBR", "LBRACKET", 
		"RBRACKET", "ADD_OP", "TAKE_OP", "MUL_OP", "DIV_OP", "POW_OP", "POINT", 
		"ADDFROM_OP", "TAKEFROM_OP", "DIVFROM_OP", "MULFROM_OP", "BIN_OR", "BIN_AND", 
		"BIN_EQUALS", "GRTR_THAN", "LESS_THAN", "GRTR_THAN_ET", "LESS_THAN_ET", 
		"IDENTIFIER", "COMMENT", "WS", "UNKNOWN_SYMBOL"
	};


	public algoLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'null'", "'let'", "'for'", "'in'", 
		"'if'", "'to'", "'library'", "'sf'", "'object'", "'else'", "'import'", 
		"'return'", "'print'", "'disregard'", "';'", "'='", "','", "'{'", "'}'", 
		"'['", "']'", "'('", "')'", "'+'", "'-'", "'*'", "'/'", "'^'", "'.'", 
		"'+='", "'-='", "'/='", "'*='", "'|'", "'&'", "'=='", "'>'", "'<'", "'>='", 
		"'<='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INTEGER", "FLOAT", "BOOLEAN", "STRING", "RATIONAL", "NULL", "LET_SYM", 
		"FOR_SYM", "IN_SYM", "IF_SYM", "TO_SYM", "LIB_SYM", "SIG_FIG_SYM", "OBJ_SYM", 
		"ELSE_SYM", "IMPORT_SYM", "RETURN_SYM", "PRINT_SYM", "DISREGARD_SYM", 
		"ENDLINE", "EQUALS", "COMMA", "LBRACE", "RBRACE", "LSQBR", "RSQBR", "LBRACKET", 
		"RBRACKET", "ADD_OP", "TAKE_OP", "MUL_OP", "DIV_OP", "POW_OP", "POINT", 
		"ADDFROM_OP", "TAKEFROM_OP", "DIVFROM_OP", "MULFROM_OP", "BIN_OR", "BIN_AND", 
		"BIN_EQUALS", "GRTR_THAN", "LESS_THAN", "GRTR_THAN_ET", "LESS_THAN_ET", 
		"IDENTIFIER", "COMMENT", "WS", "UNKNOWN_SYMBOL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "algo.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\x33\x13A\b\x1\x4"+
		"\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b"+
		"\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4"+
		"\x10\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15"+
		"\t\x15\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A"+
		"\x4\x1B\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 "+
		"\t \x4!\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t"+
		")\x4*\t*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31"+
		"\x4\x32\t\x32\x3\x2\x5\x2g\n\x2\x3\x2\x3\x2\a\x2k\n\x2\f\x2\xE\x2n\v\x2"+
		"\x3\x2\x5\x2q\n\x2\x3\x3\x5\x3t\n\x3\x3\x3\a\x3w\n\x3\f\x3\xE\x3z\v\x3"+
		"\x3\x3\x3\x3\x3\x3\x6\x3\x7F\n\x3\r\x3\xE\x3\x80\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4\x8C\n\x4\x3\x5\x3\x5\a\x5\x90"+
		"\n\x5\f\x5\xE\x5\x93\v\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3"+
		"\n\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3"+
		"\r\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\x10"+
		"\x3\x10\x3\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x13\x3\x13"+
		"\x3\x13\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14"+
		"\x3\x14\x3\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x16\x3\x16\x3\x17\x3\x17"+
		"\x3\x18\x3\x18\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1C\x3\x1C"+
		"\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3 \x3 \x3!\x3!\x3\"\x3\"\x3"+
		"#\x3#\x3$\x3$\x3$\x3%\x3%\x3%\x3&\x3&\x3&\x3\'\x3\'\x3\'\x3(\x3(\x3)\x3"+
		")\x3*\x3*\x3*\x3+\x3+\x3,\x3,\x3-\x3-\x3-\x3.\x3.\x3.\x3/\x3/\a/\x123"+
		"\n/\f/\xE/\x126\v/\x3\x30\x3\x30\x3\x30\x3\x30\a\x30\x12C\n\x30\f\x30"+
		"\xE\x30\x12F\v\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x31\x3\x31\x3\x31\x3"+
		"\x31\x3\x32\x3\x32\x3\x12D\x2\x2\x33\x3\x2\x3\x5\x2\x4\a\x2\x5\t\x2\x6"+
		"\v\x2\a\r\x2\b\xF\x2\t\x11\x2\n\x13\x2\v\x15\x2\f\x17\x2\r\x19\x2\xE\x1B"+
		"\x2\xF\x1D\x2\x10\x1F\x2\x11!\x2\x12#\x2\x13%\x2\x14\'\x2\x15)\x2\x16"+
		"+\x2\x17-\x2\x18/\x2\x19\x31\x2\x1A\x33\x2\x1B\x35\x2\x1C\x37\x2\x1D\x39"+
		"\x2\x1E;\x2\x1F=\x2 ?\x2!\x41\x2\"\x43\x2#\x45\x2$G\x2%I\x2&K\x2\'M\x2"+
		"(O\x2)Q\x2*S\x2+U\x2,W\x2-Y\x2.[\x2/]\x2\x30_\x2\x31\x61\x2\x32\x63\x2"+
		"\x33\x3\x2\b\x3\x2\x33;\x3\x2\x32;\x3\x2$$\x5\x2\x43\\\x61\x61\x63|\x6"+
		"\x2\x32;\x43\\\x61\x61\x63|\x5\x2\v\f\xF\xF\"\"\x143\x2\x3\x3\x2\x2\x2"+
		"\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2"+
		"\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2"+
		"\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3"+
		"\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3"+
		"\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2\x2)\x3\x2\x2\x2\x2+\x3\x2\x2"+
		"\x2\x2-\x3\x2\x2\x2\x2/\x3\x2\x2\x2\x2\x31\x3\x2\x2\x2\x2\x33\x3\x2\x2"+
		"\x2\x2\x35\x3\x2\x2\x2\x2\x37\x3\x2\x2\x2\x2\x39\x3\x2\x2\x2\x2;\x3\x2"+
		"\x2\x2\x2=\x3\x2\x2\x2\x2?\x3\x2\x2\x2\x2\x41\x3\x2\x2\x2\x2\x43\x3\x2"+
		"\x2\x2\x2\x45\x3\x2\x2\x2\x2G\x3\x2\x2\x2\x2I\x3\x2\x2\x2\x2K\x3\x2\x2"+
		"\x2\x2M\x3\x2\x2\x2\x2O\x3\x2\x2\x2\x2Q\x3\x2\x2\x2\x2S\x3\x2\x2\x2\x2"+
		"U\x3\x2\x2\x2\x2W\x3\x2\x2\x2\x2Y\x3\x2\x2\x2\x2[\x3\x2\x2\x2\x2]\x3\x2"+
		"\x2\x2\x2_\x3\x2\x2\x2\x2\x61\x3\x2\x2\x2\x2\x63\x3\x2\x2\x2\x3p\x3\x2"+
		"\x2\x2\x5s\x3\x2\x2\x2\a\x8B\x3\x2\x2\x2\t\x8D\x3\x2\x2\x2\v\x96\x3\x2"+
		"\x2\x2\r\x9A\x3\x2\x2\x2\xF\x9F\x3\x2\x2\x2\x11\xA3\x3\x2\x2\x2\x13\xA7"+
		"\x3\x2\x2\x2\x15\xAA\x3\x2\x2\x2\x17\xAD\x3\x2\x2\x2\x19\xB0\x3\x2\x2"+
		"\x2\x1B\xB8\x3\x2\x2\x2\x1D\xBB\x3\x2\x2\x2\x1F\xC2\x3\x2\x2\x2!\xC7\x3"+
		"\x2\x2\x2#\xCE\x3\x2\x2\x2%\xD5\x3\x2\x2\x2\'\xDB\x3\x2\x2\x2)\xE5\x3"+
		"\x2\x2\x2+\xE7\x3\x2\x2\x2-\xE9\x3\x2\x2\x2/\xEB\x3\x2\x2\x2\x31\xED\x3"+
		"\x2\x2\x2\x33\xEF\x3\x2\x2\x2\x35\xF1\x3\x2\x2\x2\x37\xF3\x3\x2\x2\x2"+
		"\x39\xF5\x3\x2\x2\x2;\xF7\x3\x2\x2\x2=\xF9\x3\x2\x2\x2?\xFB\x3\x2\x2\x2"+
		"\x41\xFD\x3\x2\x2\x2\x43\xFF\x3\x2\x2\x2\x45\x101\x3\x2\x2\x2G\x103\x3"+
		"\x2\x2\x2I\x106\x3\x2\x2\x2K\x109\x3\x2\x2\x2M\x10C\x3\x2\x2\x2O\x10F"+
		"\x3\x2\x2\x2Q\x111\x3\x2\x2\x2S\x113\x3\x2\x2\x2U\x116\x3\x2\x2\x2W\x118"+
		"\x3\x2\x2\x2Y\x11A\x3\x2\x2\x2[\x11D\x3\x2\x2\x2]\x120\x3\x2\x2\x2_\x127"+
		"\x3\x2\x2\x2\x61\x134\x3\x2\x2\x2\x63\x138\x3\x2\x2\x2\x65g\a/\x2\x2\x66"+
		"\x65\x3\x2\x2\x2\x66g\x3\x2\x2\x2gh\x3\x2\x2\x2hl\t\x2\x2\x2ik\t\x3\x2"+
		"\x2ji\x3\x2\x2\x2kn\x3\x2\x2\x2lj\x3\x2\x2\x2lm\x3\x2\x2\x2mq\x3\x2\x2"+
		"\x2nl\x3\x2\x2\x2oq\a\x32\x2\x2p\x66\x3\x2\x2\x2po\x3\x2\x2\x2q\x4\x3"+
		"\x2\x2\x2rt\a/\x2\x2sr\x3\x2\x2\x2st\x3\x2\x2\x2tx\x3\x2\x2\x2uw\t\x2"+
		"\x2\x2vu\x3\x2\x2\x2wz\x3\x2\x2\x2xv\x3\x2\x2\x2xy\x3\x2\x2\x2y{\x3\x2"+
		"\x2\x2zx\x3\x2\x2\x2{|\t\x3\x2\x2|~\a\x30\x2\x2}\x7F\t\x3\x2\x2~}\x3\x2"+
		"\x2\x2\x7F\x80\x3\x2\x2\x2\x80~\x3\x2\x2\x2\x80\x81\x3\x2\x2\x2\x81\x6"+
		"\x3\x2\x2\x2\x82\x83\av\x2\x2\x83\x84\at\x2\x2\x84\x85\aw\x2\x2\x85\x8C"+
		"\ag\x2\x2\x86\x87\ah\x2\x2\x87\x88\a\x63\x2\x2\x88\x89\an\x2\x2\x89\x8A"+
		"\au\x2\x2\x8A\x8C\ag\x2\x2\x8B\x82\x3\x2\x2\x2\x8B\x86\x3\x2\x2\x2\x8C"+
		"\b\x3\x2\x2\x2\x8D\x91\a$\x2\x2\x8E\x90\n\x4\x2\x2\x8F\x8E\x3\x2\x2\x2"+
		"\x90\x93\x3\x2\x2\x2\x91\x8F\x3\x2\x2\x2\x91\x92\x3\x2\x2\x2\x92\x94\x3"+
		"\x2\x2\x2\x93\x91\x3\x2\x2\x2\x94\x95\a$\x2\x2\x95\n\x3\x2\x2\x2\x96\x97"+
		"\x5\x3\x2\x2\x97\x98\a\x31\x2\x2\x98\x99\x5\x3\x2\x2\x99\f\x3\x2\x2\x2"+
		"\x9A\x9B\ap\x2\x2\x9B\x9C\aw\x2\x2\x9C\x9D\an\x2\x2\x9D\x9E\an\x2\x2\x9E"+
		"\xE\x3\x2\x2\x2\x9F\xA0\an\x2\x2\xA0\xA1\ag\x2\x2\xA1\xA2\av\x2\x2\xA2"+
		"\x10\x3\x2\x2\x2\xA3\xA4\ah\x2\x2\xA4\xA5\aq\x2\x2\xA5\xA6\at\x2\x2\xA6"+
		"\x12\x3\x2\x2\x2\xA7\xA8\ak\x2\x2\xA8\xA9\ap\x2\x2\xA9\x14\x3\x2\x2\x2"+
		"\xAA\xAB\ak\x2\x2\xAB\xAC\ah\x2\x2\xAC\x16\x3\x2\x2\x2\xAD\xAE\av\x2\x2"+
		"\xAE\xAF\aq\x2\x2\xAF\x18\x3\x2\x2\x2\xB0\xB1\an\x2\x2\xB1\xB2\ak\x2\x2"+
		"\xB2\xB3\a\x64\x2\x2\xB3\xB4\at\x2\x2\xB4\xB5\a\x63\x2\x2\xB5\xB6\at\x2"+
		"\x2\xB6\xB7\a{\x2\x2\xB7\x1A\x3\x2\x2\x2\xB8\xB9\au\x2\x2\xB9\xBA\ah\x2"+
		"\x2\xBA\x1C\x3\x2\x2\x2\xBB\xBC\aq\x2\x2\xBC\xBD\a\x64\x2\x2\xBD\xBE\a"+
		"l\x2\x2\xBE\xBF\ag\x2\x2\xBF\xC0\a\x65\x2\x2\xC0\xC1\av\x2\x2\xC1\x1E"+
		"\x3\x2\x2\x2\xC2\xC3\ag\x2\x2\xC3\xC4\an\x2\x2\xC4\xC5\au\x2\x2\xC5\xC6"+
		"\ag\x2\x2\xC6 \x3\x2\x2\x2\xC7\xC8\ak\x2\x2\xC8\xC9\ao\x2\x2\xC9\xCA\a"+
		"r\x2\x2\xCA\xCB\aq\x2\x2\xCB\xCC\at\x2\x2\xCC\xCD\av\x2\x2\xCD\"\x3\x2"+
		"\x2\x2\xCE\xCF\at\x2\x2\xCF\xD0\ag\x2\x2\xD0\xD1\av\x2\x2\xD1\xD2\aw\x2"+
		"\x2\xD2\xD3\at\x2\x2\xD3\xD4\ap\x2\x2\xD4$\x3\x2\x2\x2\xD5\xD6\ar\x2\x2"+
		"\xD6\xD7\at\x2\x2\xD7\xD8\ak\x2\x2\xD8\xD9\ap\x2\x2\xD9\xDA\av\x2\x2\xDA"+
		"&\x3\x2\x2\x2\xDB\xDC\a\x66\x2\x2\xDC\xDD\ak\x2\x2\xDD\xDE\au\x2\x2\xDE"+
		"\xDF\at\x2\x2\xDF\xE0\ag\x2\x2\xE0\xE1\ai\x2\x2\xE1\xE2\a\x63\x2\x2\xE2"+
		"\xE3\at\x2\x2\xE3\xE4\a\x66\x2\x2\xE4(\x3\x2\x2\x2\xE5\xE6\a=\x2\x2\xE6"+
		"*\x3\x2\x2\x2\xE7\xE8\a?\x2\x2\xE8,\x3\x2\x2\x2\xE9\xEA\a.\x2\x2\xEA."+
		"\x3\x2\x2\x2\xEB\xEC\a}\x2\x2\xEC\x30\x3\x2\x2\x2\xED\xEE\a\x7F\x2\x2"+
		"\xEE\x32\x3\x2\x2\x2\xEF\xF0\a]\x2\x2\xF0\x34\x3\x2\x2\x2\xF1\xF2\a_\x2"+
		"\x2\xF2\x36\x3\x2\x2\x2\xF3\xF4\a*\x2\x2\xF4\x38\x3\x2\x2\x2\xF5\xF6\a"+
		"+\x2\x2\xF6:\x3\x2\x2\x2\xF7\xF8\a-\x2\x2\xF8<\x3\x2\x2\x2\xF9\xFA\a/"+
		"\x2\x2\xFA>\x3\x2\x2\x2\xFB\xFC\a,\x2\x2\xFC@\x3\x2\x2\x2\xFD\xFE\a\x31"+
		"\x2\x2\xFE\x42\x3\x2\x2\x2\xFF\x100\a`\x2\x2\x100\x44\x3\x2\x2\x2\x101"+
		"\x102\a\x30\x2\x2\x102\x46\x3\x2\x2\x2\x103\x104\a-\x2\x2\x104\x105\a"+
		"?\x2\x2\x105H\x3\x2\x2\x2\x106\x107\a/\x2\x2\x107\x108\a?\x2\x2\x108J"+
		"\x3\x2\x2\x2\x109\x10A\a\x31\x2\x2\x10A\x10B\a?\x2\x2\x10BL\x3\x2\x2\x2"+
		"\x10C\x10D\a,\x2\x2\x10D\x10E\a?\x2\x2\x10EN\x3\x2\x2\x2\x10F\x110\a~"+
		"\x2\x2\x110P\x3\x2\x2\x2\x111\x112\a(\x2\x2\x112R\x3\x2\x2\x2\x113\x114"+
		"\a?\x2\x2\x114\x115\a?\x2\x2\x115T\x3\x2\x2\x2\x116\x117\a@\x2\x2\x117"+
		"V\x3\x2\x2\x2\x118\x119\a>\x2\x2\x119X\x3\x2\x2\x2\x11A\x11B\a@\x2\x2"+
		"\x11B\x11C\a?\x2\x2\x11CZ\x3\x2\x2\x2\x11D\x11E\a>\x2\x2\x11E\x11F\a?"+
		"\x2\x2\x11F\\\x3\x2\x2\x2\x120\x124\t\x5\x2\x2\x121\x123\t\x6\x2\x2\x122"+
		"\x121\x3\x2\x2\x2\x123\x126\x3\x2\x2\x2\x124\x122\x3\x2\x2\x2\x124\x125"+
		"\x3\x2\x2\x2\x125^\x3\x2\x2\x2\x126\x124\x3\x2\x2\x2\x127\x128\a\x31\x2"+
		"\x2\x128\x129\a\x31\x2\x2\x129\x12D\x3\x2\x2\x2\x12A\x12C\v\x2\x2\x2\x12B"+
		"\x12A\x3\x2\x2\x2\x12C\x12F\x3\x2\x2\x2\x12D\x12E\x3\x2\x2\x2\x12D\x12B"+
		"\x3\x2\x2\x2\x12E\x130\x3\x2\x2\x2\x12F\x12D\x3\x2\x2\x2\x130\x131\a\f"+
		"\x2\x2\x131\x132\x3\x2\x2\x2\x132\x133\b\x30\x2\x2\x133`\x3\x2\x2\x2\x134"+
		"\x135\t\a\x2\x2\x135\x136\x3\x2\x2\x2\x136\x137\b\x31\x2\x2\x137\x62\x3"+
		"\x2\x2\x2\x138\x139\v\x2\x2\x2\x139\x64\x3\x2\x2\x2\r\x2\x66lpsx\x80\x8B"+
		"\x91\x124\x12D\x3\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Algo
