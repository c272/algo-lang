//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\Files\Programming\GitHub\algo\Algo\Parsing\algo.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Algo {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class algoLexer : Lexer {
	public const int
		INTEGER=1, FLOAT=2, BOOLEAN=3, STRING=4, RATIONAL=5, LET_SYM=6, FOR_SYM=7, 
		IN_SYM=8, IF_SYM=9, IMPORT_SYM=10, RETURN_SYM=11, PRINT_SYM=12, ENDLINE=13, 
		EQUALS=14, COMMA=15, LBRACE=16, RBRACE=17, LSQBR=18, RSQBR=19, LBRACKET=20, 
		RBRACKET=21, ADD_OP=22, TAKE_OP=23, MUL_OP=24, DIV_OP=25, POW_OP=26, BIN_OR=27, 
		BIN_AND=28, BIN_EQUALS=29, GRTR_THAN=30, LESS_THAN=31, GRTR_THAN_ET=32, 
		LESS_THAN_ET=33, IDENTIFIER=34, COMMENT=35, WS=36, UNKNOWN_SYMBOL=37;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"INTEGER", "FLOAT", "BOOLEAN", "STRING", "RATIONAL", "LET_SYM", "FOR_SYM", 
		"IN_SYM", "IF_SYM", "IMPORT_SYM", "RETURN_SYM", "PRINT_SYM", "ENDLINE", 
		"EQUALS", "COMMA", "LBRACE", "RBRACE", "LSQBR", "RSQBR", "LBRACKET", "RBRACKET", 
		"ADD_OP", "TAKE_OP", "MUL_OP", "DIV_OP", "POW_OP", "BIN_OR", "BIN_AND", 
		"BIN_EQUALS", "GRTR_THAN", "LESS_THAN", "GRTR_THAN_ET", "LESS_THAN_ET", 
		"IDENTIFIER", "COMMENT", "WS", "UNKNOWN_SYMBOL"
	};


	public algoLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'let'", "'for'", "'in'", "'if'", 
		"'import'", "'return'", "'print'", "';'", "'='", "','", "'{'", "'}'", 
		"'['", "']'", "'('", "')'", "'+'", "'-'", "'*'", "'/'", "'^'", "'|'", 
		"'&'", "'=='", "'>'", "'<'", "'>='", "'<='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INTEGER", "FLOAT", "BOOLEAN", "STRING", "RATIONAL", "LET_SYM", 
		"FOR_SYM", "IN_SYM", "IF_SYM", "IMPORT_SYM", "RETURN_SYM", "PRINT_SYM", 
		"ENDLINE", "EQUALS", "COMMA", "LBRACE", "RBRACE", "LSQBR", "RSQBR", "LBRACKET", 
		"RBRACKET", "ADD_OP", "TAKE_OP", "MUL_OP", "DIV_OP", "POW_OP", "BIN_OR", 
		"BIN_AND", "BIN_EQUALS", "GRTR_THAN", "LESS_THAN", "GRTR_THAN_ET", "LESS_THAN_ET", 
		"IDENTIFIER", "COMMENT", "WS", "UNKNOWN_SYMBOL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "algo.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\'\xE9\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x3\x2\x5\x2O\n\x2\x3\x2\a\x2"+
		"R\n\x2\f\x2\xE\x2U\v\x2\x3\x2\x3\x2\x3\x3\x5\x3Z\n\x3\x3\x3\a\x3]\n\x3"+
		"\f\x3\xE\x3`\v\x3\x3\x3\x3\x3\x3\x3\x6\x3\x65\n\x3\r\x3\xE\x3\x66\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4r\n\x4\x3\x5\x3"+
		"\x5\a\x5v\n\x5\f\x5\xE\x5y\v\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3"+
		"\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3"+
		"\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10\x3\x10\x3\x11"+
		"\x3\x11\x3\x12\x3\x12\x3\x13\x3\x13\x3\x14\x3\x14\x3\x15\x3\x15\x3\x16"+
		"\x3\x16\x3\x17\x3\x17\x3\x18\x3\x18\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1B"+
		"\x3\x1B\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F"+
		"\x3 \x3 \x3!\x3!\x3!\x3\"\x3\"\x3\"\x3#\x3#\a#\xD2\n#\f#\xE#\xD5\v#\x3"+
		"$\x3$\x3$\x3$\a$\xDB\n$\f$\xE$\xDE\v$\x3$\x3$\x3$\x3$\x3%\x3%\x3%\x3%"+
		"\x3&\x3&\x3\xDC\x2\x2\'\x3\x2\x3\x5\x2\x4\a\x2\x5\t\x2\x6\v\x2\a\r\x2"+
		"\b\xF\x2\t\x11\x2\n\x13\x2\v\x15\x2\f\x17\x2\r\x19\x2\xE\x1B\x2\xF\x1D"+
		"\x2\x10\x1F\x2\x11!\x2\x12#\x2\x13%\x2\x14\'\x2\x15)\x2\x16+\x2\x17-\x2"+
		"\x18/\x2\x19\x31\x2\x1A\x33\x2\x1B\x35\x2\x1C\x37\x2\x1D\x39\x2\x1E;\x2"+
		"\x1F=\x2 ?\x2!\x41\x2\"\x43\x2#\x45\x2$G\x2%I\x2&K\x2\'\x3\x2\b\x3\x2"+
		"\x33;\x3\x2\x32;\x3\x2$$\x5\x2\x43\\\x61\x61\x63|\x6\x2\x32;\x43\\\x61"+
		"\x61\x63|\x5\x2\v\f\xF\xF\"\"\xF1\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2"+
		"\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2"+
		"\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2"+
		"\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3"+
		"\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2"+
		"\x2\x2\x2\'\x3\x2\x2\x2\x2)\x3\x2\x2\x2\x2+\x3\x2\x2\x2\x2-\x3\x2\x2\x2"+
		"\x2/\x3\x2\x2\x2\x2\x31\x3\x2\x2\x2\x2\x33\x3\x2\x2\x2\x2\x35\x3\x2\x2"+
		"\x2\x2\x37\x3\x2\x2\x2\x2\x39\x3\x2\x2\x2\x2;\x3\x2\x2\x2\x2=\x3\x2\x2"+
		"\x2\x2?\x3\x2\x2\x2\x2\x41\x3\x2\x2\x2\x2\x43\x3\x2\x2\x2\x2\x45\x3\x2"+
		"\x2\x2\x2G\x3\x2\x2\x2\x2I\x3\x2\x2\x2\x2K\x3\x2\x2\x2\x3N\x3\x2\x2\x2"+
		"\x5Y\x3\x2\x2\x2\aq\x3\x2\x2\x2\ts\x3\x2\x2\x2\v|\x3\x2\x2\x2\r\x80\x3"+
		"\x2\x2\x2\xF\x84\x3\x2\x2\x2\x11\x88\x3\x2\x2\x2\x13\x8B\x3\x2\x2\x2\x15"+
		"\x8E\x3\x2\x2\x2\x17\x95\x3\x2\x2\x2\x19\x9C\x3\x2\x2\x2\x1B\xA2\x3\x2"+
		"\x2\x2\x1D\xA4\x3\x2\x2\x2\x1F\xA6\x3\x2\x2\x2!\xA8\x3\x2\x2\x2#\xAA\x3"+
		"\x2\x2\x2%\xAC\x3\x2\x2\x2\'\xAE\x3\x2\x2\x2)\xB0\x3\x2\x2\x2+\xB2\x3"+
		"\x2\x2\x2-\xB4\x3\x2\x2\x2/\xB6\x3\x2\x2\x2\x31\xB8\x3\x2\x2\x2\x33\xBA"+
		"\x3\x2\x2\x2\x35\xBC\x3\x2\x2\x2\x37\xBE\x3\x2\x2\x2\x39\xC0\x3\x2\x2"+
		"\x2;\xC2\x3\x2\x2\x2=\xC5\x3\x2\x2\x2?\xC7\x3\x2\x2\x2\x41\xC9\x3\x2\x2"+
		"\x2\x43\xCC\x3\x2\x2\x2\x45\xCF\x3\x2\x2\x2G\xD6\x3\x2\x2\x2I\xE3\x3\x2"+
		"\x2\x2K\xE7\x3\x2\x2\x2MO\a/\x2\x2NM\x3\x2\x2\x2NO\x3\x2\x2\x2OS\x3\x2"+
		"\x2\x2PR\t\x2\x2\x2QP\x3\x2\x2\x2RU\x3\x2\x2\x2SQ\x3\x2\x2\x2ST\x3\x2"+
		"\x2\x2TV\x3\x2\x2\x2US\x3\x2\x2\x2VW\t\x3\x2\x2W\x4\x3\x2\x2\x2XZ\a/\x2"+
		"\x2YX\x3\x2\x2\x2YZ\x3\x2\x2\x2Z^\x3\x2\x2\x2[]\t\x2\x2\x2\\[\x3\x2\x2"+
		"\x2]`\x3\x2\x2\x2^\\\x3\x2\x2\x2^_\x3\x2\x2\x2_\x61\x3\x2\x2\x2`^\x3\x2"+
		"\x2\x2\x61\x62\t\x3\x2\x2\x62\x64\a\x30\x2\x2\x63\x65\t\x3\x2\x2\x64\x63"+
		"\x3\x2\x2\x2\x65\x66\x3\x2\x2\x2\x66\x64\x3\x2\x2\x2\x66g\x3\x2\x2\x2"+
		"g\x6\x3\x2\x2\x2hi\av\x2\x2ij\at\x2\x2jk\aw\x2\x2kr\ag\x2\x2lm\ah\x2\x2"+
		"mn\a\x63\x2\x2no\an\x2\x2op\au\x2\x2pr\ag\x2\x2qh\x3\x2\x2\x2ql\x3\x2"+
		"\x2\x2r\b\x3\x2\x2\x2sw\a$\x2\x2tv\n\x4\x2\x2ut\x3\x2\x2\x2vy\x3\x2\x2"+
		"\x2wu\x3\x2\x2\x2wx\x3\x2\x2\x2xz\x3\x2\x2\x2yw\x3\x2\x2\x2z{\a$\x2\x2"+
		"{\n\x3\x2\x2\x2|}\x5\x3\x2\x2}~\a\x31\x2\x2~\x7F\x5\x3\x2\x2\x7F\f\x3"+
		"\x2\x2\x2\x80\x81\an\x2\x2\x81\x82\ag\x2\x2\x82\x83\av\x2\x2\x83\xE\x3"+
		"\x2\x2\x2\x84\x85\ah\x2\x2\x85\x86\aq\x2\x2\x86\x87\at\x2\x2\x87\x10\x3"+
		"\x2\x2\x2\x88\x89\ak\x2\x2\x89\x8A\ap\x2\x2\x8A\x12\x3\x2\x2\x2\x8B\x8C"+
		"\ak\x2\x2\x8C\x8D\ah\x2\x2\x8D\x14\x3\x2\x2\x2\x8E\x8F\ak\x2\x2\x8F\x90"+
		"\ao\x2\x2\x90\x91\ar\x2\x2\x91\x92\aq\x2\x2\x92\x93\at\x2\x2\x93\x94\a"+
		"v\x2\x2\x94\x16\x3\x2\x2\x2\x95\x96\at\x2\x2\x96\x97\ag\x2\x2\x97\x98"+
		"\av\x2\x2\x98\x99\aw\x2\x2\x99\x9A\at\x2\x2\x9A\x9B\ap\x2\x2\x9B\x18\x3"+
		"\x2\x2\x2\x9C\x9D\ar\x2\x2\x9D\x9E\at\x2\x2\x9E\x9F\ak\x2\x2\x9F\xA0\a"+
		"p\x2\x2\xA0\xA1\av\x2\x2\xA1\x1A\x3\x2\x2\x2\xA2\xA3\a=\x2\x2\xA3\x1C"+
		"\x3\x2\x2\x2\xA4\xA5\a?\x2\x2\xA5\x1E\x3\x2\x2\x2\xA6\xA7\a.\x2\x2\xA7"+
		" \x3\x2\x2\x2\xA8\xA9\a}\x2\x2\xA9\"\x3\x2\x2\x2\xAA\xAB\a\x7F\x2\x2\xAB"+
		"$\x3\x2\x2\x2\xAC\xAD\a]\x2\x2\xAD&\x3\x2\x2\x2\xAE\xAF\a_\x2\x2\xAF("+
		"\x3\x2\x2\x2\xB0\xB1\a*\x2\x2\xB1*\x3\x2\x2\x2\xB2\xB3\a+\x2\x2\xB3,\x3"+
		"\x2\x2\x2\xB4\xB5\a-\x2\x2\xB5.\x3\x2\x2\x2\xB6\xB7\a/\x2\x2\xB7\x30\x3"+
		"\x2\x2\x2\xB8\xB9\a,\x2\x2\xB9\x32\x3\x2\x2\x2\xBA\xBB\a\x31\x2\x2\xBB"+
		"\x34\x3\x2\x2\x2\xBC\xBD\a`\x2\x2\xBD\x36\x3\x2\x2\x2\xBE\xBF\a~\x2\x2"+
		"\xBF\x38\x3\x2\x2\x2\xC0\xC1\a(\x2\x2\xC1:\x3\x2\x2\x2\xC2\xC3\a?\x2\x2"+
		"\xC3\xC4\a?\x2\x2\xC4<\x3\x2\x2\x2\xC5\xC6\a@\x2\x2\xC6>\x3\x2\x2\x2\xC7"+
		"\xC8\a>\x2\x2\xC8@\x3\x2\x2\x2\xC9\xCA\a@\x2\x2\xCA\xCB\a?\x2\x2\xCB\x42"+
		"\x3\x2\x2\x2\xCC\xCD\a>\x2\x2\xCD\xCE\a?\x2\x2\xCE\x44\x3\x2\x2\x2\xCF"+
		"\xD3\t\x5\x2\x2\xD0\xD2\t\x6\x2\x2\xD1\xD0\x3\x2\x2\x2\xD2\xD5\x3\x2\x2"+
		"\x2\xD3\xD1\x3\x2\x2\x2\xD3\xD4\x3\x2\x2\x2\xD4\x46\x3\x2\x2\x2\xD5\xD3"+
		"\x3\x2\x2\x2\xD6\xD7\a\x31\x2\x2\xD7\xD8\a\x31\x2\x2\xD8\xDC\x3\x2\x2"+
		"\x2\xD9\xDB\v\x2\x2\x2\xDA\xD9\x3\x2\x2\x2\xDB\xDE\x3\x2\x2\x2\xDC\xDD"+
		"\x3\x2\x2\x2\xDC\xDA\x3\x2\x2\x2\xDD\xDF\x3\x2\x2\x2\xDE\xDC\x3\x2\x2"+
		"\x2\xDF\xE0\a\f\x2\x2\xE0\xE1\x3\x2\x2\x2\xE1\xE2\b$\x2\x2\xE2H\x3\x2"+
		"\x2\x2\xE3\xE4\t\a\x2\x2\xE4\xE5\x3\x2\x2\x2\xE5\xE6\b%\x2\x2\xE6J\x3"+
		"\x2\x2\x2\xE7\xE8\v\x2\x2\x2\xE8L\x3\x2\x2\x2\f\x2NSY^\x66qw\xD3\xDC\x3"+
		"\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Algo
