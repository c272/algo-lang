//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Z:\Algo\Algo\Parsing\algo.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Algo {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class algoLexer : Lexer {
	public const int
		INTEGER=1, FLOAT=2, BOOLEAN=3, STRING=4, RATIONAL=5, LET_SYM=6, FOR_SYM=7, 
		IN_SYM=8, IF_SYM=9, IMPORT_SYM=10, RETURN_SYM=11, ENDLINE=12, EQUALS=13, 
		COMMA=14, LBRACKET=15, RBRACKET=16, ADD_OP=17, TAKE_OP=18, MUL_OP=19, 
		DIV_OP=20, POW_OP=21, BIN_OR=22, BIN_AND=23, LBRACE=24, RBRACE=25, LSQBR=26, 
		RSQBR=27, IDENTIFIER=28, COMMENT=29, WS=30, UNKNOWN_SYMBOL=31;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"INTEGER", "FLOAT", "BOOLEAN", "STRING", "RATIONAL", "LET_SYM", "FOR_SYM", 
		"IN_SYM", "IF_SYM", "IMPORT_SYM", "RETURN_SYM", "ENDLINE", "EQUALS", "COMMA", 
		"LBRACKET", "RBRACKET", "ADD_OP", "TAKE_OP", "MUL_OP", "DIV_OP", "POW_OP", 
		"BIN_OR", "BIN_AND", "LBRACE", "RBRACE", "LSQBR", "RSQBR", "IDENTIFIER", 
		"COMMENT", "WS", "UNKNOWN_SYMBOL"
	};


	public algoLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'let'", "'for'", "'in'", "'if'", 
		"'import'", "'return'", "';'", "'='", "','", "'('", "')'", "'+'", "'-'", 
		"'*'", "'/'", "'^'", "'||'", "'&&'", "'{'", "'}'", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INTEGER", "FLOAT", "BOOLEAN", "STRING", "RATIONAL", "LET_SYM", 
		"FOR_SYM", "IN_SYM", "IF_SYM", "IMPORT_SYM", "RETURN_SYM", "ENDLINE", 
		"EQUALS", "COMMA", "LBRACKET", "RBRACKET", "ADD_OP", "TAKE_OP", "MUL_OP", 
		"DIV_OP", "POW_OP", "BIN_OR", "BIN_AND", "LBRACE", "RBRACE", "LSQBR", 
		"RSQBR", "IDENTIFIER", "COMMENT", "WS", "UNKNOWN_SYMBOL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "algo.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2!\xCC\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x3\x2"+
		"\x5\x2\x43\n\x2\x3\x2\a\x2\x46\n\x2\f\x2\xE\x2I\v\x2\x3\x2\x3\x2\x3\x3"+
		"\x5\x3N\n\x3\x3\x3\a\x3Q\n\x3\f\x3\xE\x3T\v\x3\x3\x3\x3\x3\x3\x3\x6\x3"+
		"Y\n\x3\r\x3\xE\x3Z\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x5\x4\x66\n\x4\x3\x5\x3\x5\a\x5j\n\x5\f\x5\xE\x5m\v\x5\x3\x5\x3\x5"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\t"+
		"\x3\t\x3\t\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\f\x3\f"+
		"\x3\f\x3\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10\x3"+
		"\x10\x3\x11\x3\x11\x3\x12\x3\x12\x3\x13\x3\x13\x3\x14\x3\x14\x3\x15\x3"+
		"\x15\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18\x3\x19\x3"+
		"\x19\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1D\x3\x1D\a\x1D\xB5"+
		"\n\x1D\f\x1D\xE\x1D\xB8\v\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\a\x1E\xBE\n"+
		"\x1E\f\x1E\xE\x1E\xC1\v\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F"+
		"\x3\x1F\x3\x1F\x3 \x3 \x3\xBF\x2\x2!\x3\x2\x3\x5\x2\x4\a\x2\x5\t\x2\x6"+
		"\v\x2\a\r\x2\b\xF\x2\t\x11\x2\n\x13\x2\v\x15\x2\f\x17\x2\r\x19\x2\xE\x1B"+
		"\x2\xF\x1D\x2\x10\x1F\x2\x11!\x2\x12#\x2\x13%\x2\x14\'\x2\x15)\x2\x16"+
		"+\x2\x17-\x2\x18/\x2\x19\x31\x2\x1A\x33\x2\x1B\x35\x2\x1C\x37\x2\x1D\x39"+
		"\x2\x1E;\x2\x1F=\x2 ?\x2!\x3\x2\b\x3\x2\x33;\x3\x2\x32;\x3\x2$$\x5\x2"+
		"\x43\\\x61\x61\x63|\x6\x2\x32;\x43\\\x61\x61\x63|\x5\x2\v\f\xF\xF\"\""+
		"\xD4\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2"+
		"\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2"+
		"\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3"+
		"\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2"+
		"!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2\x2)\x3"+
		"\x2\x2\x2\x2+\x3\x2\x2\x2\x2-\x3\x2\x2\x2\x2/\x3\x2\x2\x2\x2\x31\x3\x2"+
		"\x2\x2\x2\x33\x3\x2\x2\x2\x2\x35\x3\x2\x2\x2\x2\x37\x3\x2\x2\x2\x2\x39"+
		"\x3\x2\x2\x2\x2;\x3\x2\x2\x2\x2=\x3\x2\x2\x2\x2?\x3\x2\x2\x2\x3\x42\x3"+
		"\x2\x2\x2\x5M\x3\x2\x2\x2\a\x65\x3\x2\x2\x2\tg\x3\x2\x2\x2\vp\x3\x2\x2"+
		"\x2\rt\x3\x2\x2\x2\xFx\x3\x2\x2\x2\x11|\x3\x2\x2\x2\x13\x7F\x3\x2\x2\x2"+
		"\x15\x82\x3\x2\x2\x2\x17\x89\x3\x2\x2\x2\x19\x90\x3\x2\x2\x2\x1B\x92\x3"+
		"\x2\x2\x2\x1D\x94\x3\x2\x2\x2\x1F\x96\x3\x2\x2\x2!\x98\x3\x2\x2\x2#\x9A"+
		"\x3\x2\x2\x2%\x9C\x3\x2\x2\x2\'\x9E\x3\x2\x2\x2)\xA0\x3\x2\x2\x2+\xA2"+
		"\x3\x2\x2\x2-\xA4\x3\x2\x2\x2/\xA7\x3\x2\x2\x2\x31\xAA\x3\x2\x2\x2\x33"+
		"\xAC\x3\x2\x2\x2\x35\xAE\x3\x2\x2\x2\x37\xB0\x3\x2\x2\x2\x39\xB2\x3\x2"+
		"\x2\x2;\xB9\x3\x2\x2\x2=\xC6\x3\x2\x2\x2?\xCA\x3\x2\x2\x2\x41\x43\a/\x2"+
		"\x2\x42\x41\x3\x2\x2\x2\x42\x43\x3\x2\x2\x2\x43G\x3\x2\x2\x2\x44\x46\t"+
		"\x2\x2\x2\x45\x44\x3\x2\x2\x2\x46I\x3\x2\x2\x2G\x45\x3\x2\x2\x2GH\x3\x2"+
		"\x2\x2HJ\x3\x2\x2\x2IG\x3\x2\x2\x2JK\t\x3\x2\x2K\x4\x3\x2\x2\x2LN\a/\x2"+
		"\x2ML\x3\x2\x2\x2MN\x3\x2\x2\x2NR\x3\x2\x2\x2OQ\t\x2\x2\x2PO\x3\x2\x2"+
		"\x2QT\x3\x2\x2\x2RP\x3\x2\x2\x2RS\x3\x2\x2\x2SU\x3\x2\x2\x2TR\x3\x2\x2"+
		"\x2UV\t\x3\x2\x2VX\a\x30\x2\x2WY\t\x3\x2\x2XW\x3\x2\x2\x2YZ\x3\x2\x2\x2"+
		"ZX\x3\x2\x2\x2Z[\x3\x2\x2\x2[\x6\x3\x2\x2\x2\\]\av\x2\x2]^\at\x2\x2^_"+
		"\aw\x2\x2_\x66\ag\x2\x2`\x61\ah\x2\x2\x61\x62\a\x63\x2\x2\x62\x63\an\x2"+
		"\x2\x63\x64\au\x2\x2\x64\x66\ag\x2\x2\x65\\\x3\x2\x2\x2\x65`\x3\x2\x2"+
		"\x2\x66\b\x3\x2\x2\x2gk\a$\x2\x2hj\n\x4\x2\x2ih\x3\x2\x2\x2jm\x3\x2\x2"+
		"\x2ki\x3\x2\x2\x2kl\x3\x2\x2\x2ln\x3\x2\x2\x2mk\x3\x2\x2\x2no\a$\x2\x2"+
		"o\n\x3\x2\x2\x2pq\x5\x3\x2\x2qr\a\x31\x2\x2rs\x5\x3\x2\x2s\f\x3\x2\x2"+
		"\x2tu\an\x2\x2uv\ag\x2\x2vw\av\x2\x2w\xE\x3\x2\x2\x2xy\ah\x2\x2yz\aq\x2"+
		"\x2z{\at\x2\x2{\x10\x3\x2\x2\x2|}\ak\x2\x2}~\ap\x2\x2~\x12\x3\x2\x2\x2"+
		"\x7F\x80\ak\x2\x2\x80\x81\ah\x2\x2\x81\x14\x3\x2\x2\x2\x82\x83\ak\x2\x2"+
		"\x83\x84\ao\x2\x2\x84\x85\ar\x2\x2\x85\x86\aq\x2\x2\x86\x87\at\x2\x2\x87"+
		"\x88\av\x2\x2\x88\x16\x3\x2\x2\x2\x89\x8A\at\x2\x2\x8A\x8B\ag\x2\x2\x8B"+
		"\x8C\av\x2\x2\x8C\x8D\aw\x2\x2\x8D\x8E\at\x2\x2\x8E\x8F\ap\x2\x2\x8F\x18"+
		"\x3\x2\x2\x2\x90\x91\a=\x2\x2\x91\x1A\x3\x2\x2\x2\x92\x93\a?\x2\x2\x93"+
		"\x1C\x3\x2\x2\x2\x94\x95\a.\x2\x2\x95\x1E\x3\x2\x2\x2\x96\x97\a*\x2\x2"+
		"\x97 \x3\x2\x2\x2\x98\x99\a+\x2\x2\x99\"\x3\x2\x2\x2\x9A\x9B\a-\x2\x2"+
		"\x9B$\x3\x2\x2\x2\x9C\x9D\a/\x2\x2\x9D&\x3\x2\x2\x2\x9E\x9F\a,\x2\x2\x9F"+
		"(\x3\x2\x2\x2\xA0\xA1\a\x31\x2\x2\xA1*\x3\x2\x2\x2\xA2\xA3\a`\x2\x2\xA3"+
		",\x3\x2\x2\x2\xA4\xA5\a~\x2\x2\xA5\xA6\a~\x2\x2\xA6.\x3\x2\x2\x2\xA7\xA8"+
		"\a(\x2\x2\xA8\xA9\a(\x2\x2\xA9\x30\x3\x2\x2\x2\xAA\xAB\a}\x2\x2\xAB\x32"+
		"\x3\x2\x2\x2\xAC\xAD\a\x7F\x2\x2\xAD\x34\x3\x2\x2\x2\xAE\xAF\a]\x2\x2"+
		"\xAF\x36\x3\x2\x2\x2\xB0\xB1\a_\x2\x2\xB1\x38\x3\x2\x2\x2\xB2\xB6\t\x5"+
		"\x2\x2\xB3\xB5\t\x6\x2\x2\xB4\xB3\x3\x2\x2\x2\xB5\xB8\x3\x2\x2\x2\xB6"+
		"\xB4\x3\x2\x2\x2\xB6\xB7\x3\x2\x2\x2\xB7:\x3\x2\x2\x2\xB8\xB6\x3\x2\x2"+
		"\x2\xB9\xBA\a\x31\x2\x2\xBA\xBB\a\x31\x2\x2\xBB\xBF\x3\x2\x2\x2\xBC\xBE"+
		"\v\x2\x2\x2\xBD\xBC\x3\x2\x2\x2\xBE\xC1\x3\x2\x2\x2\xBF\xC0\x3\x2\x2\x2"+
		"\xBF\xBD\x3\x2\x2\x2\xC0\xC2\x3\x2\x2\x2\xC1\xBF\x3\x2\x2\x2\xC2\xC3\a"+
		"\f\x2\x2\xC3\xC4\x3\x2\x2\x2\xC4\xC5\b\x1E\x2\x2\xC5<\x3\x2\x2\x2\xC6"+
		"\xC7\t\a\x2\x2\xC7\xC8\x3\x2\x2\x2\xC8\xC9\b\x1F\x2\x2\xC9>\x3\x2\x2\x2"+
		"\xCA\xCB\v\x2\x2\x2\xCB@\x3\x2\x2\x2\f\x2\x42GMRZ\x65k\xB6\xBF\x3\b\x2"+
		"\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Algo
