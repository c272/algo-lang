//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\Files\Programming\GitHub\algo\Algo\Parsing\algo.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Algo {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class algoParser : Parser {
	public const int
		INTEGER=1, FLOAT=2, BOOLEAN=3, STRING=4, RATIONAL=5, NULL=6, LET_SYM=7, 
		FOR_SYM=8, IN_SYM=9, IF_SYM=10, TO_SYM=11, LIB_SYM=12, SIG_FIG_SYM=13, 
		OBJ_SYM=14, ELSE_SYM=15, IMPORT_SYM=16, RETURN_SYM=17, PRINT_SYM=18, DISREGARD_SYM=19, 
		ENDLINE=20, EQUALS=21, COMMA=22, LBRACE=23, RBRACE=24, LSQBR=25, RSQBR=26, 
		LBRACKET=27, RBRACKET=28, ADD_OP=29, TAKE_OP=30, MUL_OP=31, DIV_OP=32, 
		POW_OP=33, POINT=34, ADDFROM_OP=35, TAKEFROM_OP=36, DIVFROM_OP=37, MULFROM_OP=38, 
		BIN_OR=39, BIN_AND=40, BIN_EQUALS=41, GRTR_THAN=42, LESS_THAN=43, GRTR_THAN_ET=44, 
		LESS_THAN_ET=45, IDENTIFIER=46, COMMENT=47, WS=48, UNKNOWN_SYMBOL=49;
	public const int
		RULE_compileUnit = 0, RULE_block = 1, RULE_statement = 2, RULE_stat_define = 3, 
		RULE_stat_setvar = 4, RULE_stat_setvar_op = 5, RULE_stat_deletevar = 6, 
		RULE_stat_functionCall = 7, RULE_stat_functionDef = 8, RULE_stat_return = 9, 
		RULE_stat_forLoop = 10, RULE_stat_if = 11, RULE_stat_print = 12, RULE_stat_library = 13, 
		RULE_stat_elif = 14, RULE_stat_else = 15, RULE_literal_params = 16, RULE_abstract_params = 17, 
		RULE_check = 18, RULE_check_operator = 19, RULE_expr = 20, RULE_rounding_expr = 21, 
		RULE_term = 22, RULE_factor = 23, RULE_sub = 24, RULE_operator = 25, RULE_selfmod_op = 26, 
		RULE_value = 27, RULE_obj_access = 28, RULE_array = 29, RULE_array_access = 30, 
		RULE_object = 31, RULE_obj_child_definitions = 32, RULE_obj_vardefine = 33, 
		RULE_obj_funcdefine = 34;
	public static readonly string[] ruleNames = {
		"compileUnit", "block", "statement", "stat_define", "stat_setvar", "stat_setvar_op", 
		"stat_deletevar", "stat_functionCall", "stat_functionDef", "stat_return", 
		"stat_forLoop", "stat_if", "stat_print", "stat_library", "stat_elif", 
		"stat_else", "literal_params", "abstract_params", "check", "check_operator", 
		"expr", "rounding_expr", "term", "factor", "sub", "operator", "selfmod_op", 
		"value", "obj_access", "array", "array_access", "object", "obj_child_definitions", 
		"obj_vardefine", "obj_funcdefine"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'null'", "'let'", "'for'", "'in'", 
		"'if'", "'to'", "'library'", "'sf'", "'object'", "'else'", "'import'", 
		"'return'", "'print'", "'disregard'", "';'", "'='", "','", "'{'", "'}'", 
		"'['", "']'", "'('", "')'", "'+'", "'-'", "'*'", "'/'", "'^'", "'.'", 
		"'+='", "'-='", "'/='", "'*='", "'|'", "'&'", "'=='", "'>'", "'<'", "'>='", 
		"'<='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INTEGER", "FLOAT", "BOOLEAN", "STRING", "RATIONAL", "NULL", "LET_SYM", 
		"FOR_SYM", "IN_SYM", "IF_SYM", "TO_SYM", "LIB_SYM", "SIG_FIG_SYM", "OBJ_SYM", 
		"ELSE_SYM", "IMPORT_SYM", "RETURN_SYM", "PRINT_SYM", "DISREGARD_SYM", 
		"ENDLINE", "EQUALS", "COMMA", "LBRACE", "RBRACE", "LSQBR", "RSQBR", "LBRACKET", 
		"RBRACKET", "ADD_OP", "TAKE_OP", "MUL_OP", "DIV_OP", "POW_OP", "POINT", 
		"ADDFROM_OP", "TAKEFROM_OP", "DIVFROM_OP", "MULFROM_OP", "BIN_OR", "BIN_AND", 
		"BIN_EQUALS", "GRTR_THAN", "LESS_THAN", "GRTR_THAN_ET", "LESS_THAN_ET", 
		"IDENTIFIER", "COMMENT", "WS", "UNKNOWN_SYMBOL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "algo.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public algoParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompileUnitContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(algoParser.Eof, 0); }
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70; block();
			State = 71; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LET_SYM) | (1L << FOR_SYM) | (1L << IF_SYM) | (1L << LIB_SYM) | (1L << RETURN_SYM) | (1L << PRINT_SYM) | (1L << DISREGARD_SYM) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 73; statement();
				}
				}
				State = 78;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public ITerminalNode ENDLINE() { return GetToken(algoParser.ENDLINE, 0); }
		public Stat_defineContext stat_define() {
			return GetRuleContext<Stat_defineContext>(0);
		}
		public Stat_functionCallContext stat_functionCall() {
			return GetRuleContext<Stat_functionCallContext>(0);
		}
		public Stat_printContext stat_print() {
			return GetRuleContext<Stat_printContext>(0);
		}
		public Stat_setvarContext stat_setvar() {
			return GetRuleContext<Stat_setvarContext>(0);
		}
		public Stat_setvar_opContext stat_setvar_op() {
			return GetRuleContext<Stat_setvar_opContext>(0);
		}
		public Stat_returnContext stat_return() {
			return GetRuleContext<Stat_returnContext>(0);
		}
		public Stat_deletevarContext stat_deletevar() {
			return GetRuleContext<Stat_deletevarContext>(0);
		}
		public Stat_forLoopContext stat_forLoop() {
			return GetRuleContext<Stat_forLoopContext>(0);
		}
		public Stat_functionDefContext stat_functionDef() {
			return GetRuleContext<Stat_functionDefContext>(0);
		}
		public Stat_ifContext stat_if() {
			return GetRuleContext<Stat_ifContext>(0);
		}
		public Stat_libraryContext stat_library() {
			return GetRuleContext<Stat_libraryContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 96;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 86;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
				case 1:
					{
					State = 79; stat_define();
					}
					break;

				case 2:
					{
					State = 80; stat_functionCall();
					}
					break;

				case 3:
					{
					State = 81; stat_print();
					}
					break;

				case 4:
					{
					State = 82; stat_setvar();
					}
					break;

				case 5:
					{
					State = 83; stat_setvar_op();
					}
					break;

				case 6:
					{
					State = 84; stat_return();
					}
					break;

				case 7:
					{
					State = 85; stat_deletevar();
					}
					break;
				}
				State = 88; Match(ENDLINE);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 94;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case FOR_SYM:
					{
					State = 90; stat_forLoop();
					}
					break;
				case LET_SYM:
					{
					State = 91; stat_functionDef();
					}
					break;
				case IF_SYM:
					{
					State = 92; stat_if();
					}
					break;
				case LIB_SYM:
					{
					State = 93; stat_library();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_defineContext : ParserRuleContext {
		public ITerminalNode LET_SYM() { return GetToken(algoParser.LET_SYM, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public ITerminalNode EQUALS() { return GetToken(algoParser.EQUALS, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Stat_defineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_define; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_define(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_define(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_define(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_defineContext stat_define() {
		Stat_defineContext _localctx = new Stat_defineContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_stat_define);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98; Match(LET_SYM);
			State = 99; Match(IDENTIFIER);
			State = 100; Match(EQUALS);
			State = 101; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_setvarContext : ParserRuleContext {
		public ITerminalNode EQUALS() { return GetToken(algoParser.EQUALS, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public Obj_accessContext obj_access() {
			return GetRuleContext<Obj_accessContext>(0);
		}
		public Rounding_exprContext rounding_expr() {
			return GetRuleContext<Rounding_exprContext>(0);
		}
		public Stat_setvarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_setvar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_setvar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_setvar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_setvar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_setvarContext stat_setvar() {
		Stat_setvarContext _localctx = new Stat_setvarContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_stat_setvar);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				{
				State = 103; Match(IDENTIFIER);
				}
				break;

			case 2:
				{
				State = 104; obj_access();
				}
				break;
			}
			State = 107; Match(EQUALS);
			State = 108; expr(0);
			State = 110;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==TO_SYM) {
				{
				State = 109; rounding_expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_setvar_opContext : ParserRuleContext {
		public Selfmod_opContext selfmod_op() {
			return GetRuleContext<Selfmod_opContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public Obj_accessContext obj_access() {
			return GetRuleContext<Obj_accessContext>(0);
		}
		public Stat_setvar_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_setvar_op; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_setvar_op(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_setvar_op(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_setvar_op(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_setvar_opContext stat_setvar_op() {
		Stat_setvar_opContext _localctx = new Stat_setvar_opContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_stat_setvar_op);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				{
				State = 112; Match(IDENTIFIER);
				}
				break;

			case 2:
				{
				State = 113; obj_access();
				}
				break;
			}
			State = 116; selfmod_op();
			State = 117; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_deletevarContext : ParserRuleContext {
		public ITerminalNode DISREGARD_SYM() { return GetToken(algoParser.DISREGARD_SYM, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public Obj_accessContext obj_access() {
			return GetRuleContext<Obj_accessContext>(0);
		}
		public ITerminalNode MUL_OP() { return GetToken(algoParser.MUL_OP, 0); }
		public Stat_deletevarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_deletevar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_deletevar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_deletevar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_deletevar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_deletevarContext stat_deletevar() {
		Stat_deletevarContext _localctx = new Stat_deletevarContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_stat_deletevar);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119; Match(DISREGARD_SYM);
			State = 123;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				{
				State = 120; Match(IDENTIFIER);
				}
				break;

			case 2:
				{
				State = 121; obj_access();
				}
				break;

			case 3:
				{
				State = 122; Match(MUL_OP);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_functionCallContext : ParserRuleContext {
		public ITerminalNode LBRACKET() { return GetToken(algoParser.LBRACKET, 0); }
		public ITerminalNode RBRACKET() { return GetToken(algoParser.RBRACKET, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public Obj_accessContext obj_access() {
			return GetRuleContext<Obj_accessContext>(0);
		}
		public Literal_paramsContext literal_params() {
			return GetRuleContext<Literal_paramsContext>(0);
		}
		public Stat_functionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_functionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_functionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_functionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_functionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_functionCallContext stat_functionCall() {
		Stat_functionCallContext _localctx = new Stat_functionCallContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_stat_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				{
				State = 125; Match(IDENTIFIER);
				}
				break;

			case 2:
				{
				State = 126; obj_access();
				}
				break;
			}
			State = 129; Match(LBRACKET);
			State = 131;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTEGER) | (1L << FLOAT) | (1L << BOOLEAN) | (1L << STRING) | (1L << RATIONAL) | (1L << NULL) | (1L << OBJ_SYM) | (1L << LSQBR) | (1L << LBRACKET) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 130; literal_params();
				}
			}

			State = 133; Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_functionDefContext : ParserRuleContext {
		public ITerminalNode LET_SYM() { return GetToken(algoParser.LET_SYM, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public ITerminalNode LBRACKET() { return GetToken(algoParser.LBRACKET, 0); }
		public ITerminalNode RBRACKET() { return GetToken(algoParser.RBRACKET, 0); }
		public ITerminalNode EQUALS() { return GetToken(algoParser.EQUALS, 0); }
		public ITerminalNode LBRACE() { return GetToken(algoParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(algoParser.RBRACE, 0); }
		public Abstract_paramsContext abstract_params() {
			return GetRuleContext<Abstract_paramsContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Stat_functionDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_functionDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_functionDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_functionDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_functionDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_functionDefContext stat_functionDef() {
		Stat_functionDefContext _localctx = new Stat_functionDefContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_stat_functionDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135; Match(LET_SYM);
			State = 136; Match(IDENTIFIER);
			State = 137; Match(LBRACKET);
			State = 139;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IDENTIFIER) {
				{
				State = 138; abstract_params();
				}
			}

			State = 141; Match(RBRACKET);
			State = 142; Match(EQUALS);
			State = 143; Match(LBRACE);
			State = 147;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LET_SYM) | (1L << FOR_SYM) | (1L << IF_SYM) | (1L << LIB_SYM) | (1L << RETURN_SYM) | (1L << PRINT_SYM) | (1L << DISREGARD_SYM) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 144; statement();
				}
				}
				State = 149;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 150; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_returnContext : ParserRuleContext {
		public ITerminalNode RETURN_SYM() { return GetToken(algoParser.RETURN_SYM, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Stat_returnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_return; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_return(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_return(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_return(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_returnContext stat_return() {
		Stat_returnContext _localctx = new Stat_returnContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_stat_return);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152; Match(RETURN_SYM);
			State = 153; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_forLoopContext : ParserRuleContext {
		public ITerminalNode FOR_SYM() { return GetToken(algoParser.FOR_SYM, 0); }
		public ITerminalNode LBRACKET() { return GetToken(algoParser.LBRACKET, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public ITerminalNode IN_SYM() { return GetToken(algoParser.IN_SYM, 0); }
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ITerminalNode RBRACKET() { return GetToken(algoParser.RBRACKET, 0); }
		public ITerminalNode LBRACE() { return GetToken(algoParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(algoParser.RBRACE, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Stat_forLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_forLoop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_forLoop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_forLoop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_forLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_forLoopContext stat_forLoop() {
		Stat_forLoopContext _localctx = new Stat_forLoopContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_stat_forLoop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155; Match(FOR_SYM);
			State = 156; Match(LBRACKET);
			State = 157; Match(IDENTIFIER);
			State = 158; Match(IN_SYM);
			State = 159; value();
			State = 160; Match(RBRACKET);
			State = 161; Match(LBRACE);
			State = 165;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LET_SYM) | (1L << FOR_SYM) | (1L << IF_SYM) | (1L << LIB_SYM) | (1L << RETURN_SYM) | (1L << PRINT_SYM) | (1L << DISREGARD_SYM) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 162; statement();
				}
				}
				State = 167;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 168; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_ifContext : ParserRuleContext {
		public ITerminalNode IF_SYM() { return GetToken(algoParser.IF_SYM, 0); }
		public ITerminalNode LBRACKET() { return GetToken(algoParser.LBRACKET, 0); }
		public CheckContext check() {
			return GetRuleContext<CheckContext>(0);
		}
		public ITerminalNode RBRACKET() { return GetToken(algoParser.RBRACKET, 0); }
		public ITerminalNode LBRACE() { return GetToken(algoParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(algoParser.RBRACE, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Stat_elifContext[] stat_elif() {
			return GetRuleContexts<Stat_elifContext>();
		}
		public Stat_elifContext stat_elif(int i) {
			return GetRuleContext<Stat_elifContext>(i);
		}
		public Stat_elseContext stat_else() {
			return GetRuleContext<Stat_elseContext>(0);
		}
		public Stat_ifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_if; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_if(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_if(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_if(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_ifContext stat_if() {
		Stat_ifContext _localctx = new Stat_ifContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_stat_if);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 170; Match(IF_SYM);
			State = 171; Match(LBRACKET);
			State = 172; check(0);
			State = 173; Match(RBRACKET);
			State = 174; Match(LBRACE);
			State = 178;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LET_SYM) | (1L << FOR_SYM) | (1L << IF_SYM) | (1L << LIB_SYM) | (1L << RETURN_SYM) | (1L << PRINT_SYM) | (1L << DISREGARD_SYM) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 175; statement();
				}
				}
				State = 180;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 181; Match(RBRACE);
			State = 185;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,14,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 182; stat_elif();
					}
					} 
				}
				State = 187;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,14,_ctx);
			}
			State = 189;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ELSE_SYM) {
				{
				State = 188; stat_else();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_printContext : ParserRuleContext {
		public ITerminalNode PRINT_SYM() { return GetToken(algoParser.PRINT_SYM, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Rounding_exprContext rounding_expr() {
			return GetRuleContext<Rounding_exprContext>(0);
		}
		public Stat_printContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_print; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_print(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_print(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_print(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_printContext stat_print() {
		Stat_printContext _localctx = new Stat_printContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_stat_print);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191; Match(PRINT_SYM);
			State = 192; expr(0);
			State = 194;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==TO_SYM) {
				{
				State = 193; rounding_expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_libraryContext : ParserRuleContext {
		public ITerminalNode LIB_SYM() { return GetToken(algoParser.LIB_SYM, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public ITerminalNode LBRACE() { return GetToken(algoParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(algoParser.RBRACE, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Stat_libraryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_library; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_library(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_library(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_library(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_libraryContext stat_library() {
		Stat_libraryContext _localctx = new Stat_libraryContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_stat_library);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196; Match(LIB_SYM);
			State = 197; Match(IDENTIFIER);
			State = 198; Match(LBRACE);
			State = 202;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LET_SYM) | (1L << FOR_SYM) | (1L << IF_SYM) | (1L << LIB_SYM) | (1L << RETURN_SYM) | (1L << PRINT_SYM) | (1L << DISREGARD_SYM) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 199; statement();
				}
				}
				State = 204;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 205; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_elifContext : ParserRuleContext {
		public ITerminalNode ELSE_SYM() { return GetToken(algoParser.ELSE_SYM, 0); }
		public ITerminalNode IF_SYM() { return GetToken(algoParser.IF_SYM, 0); }
		public ITerminalNode LBRACKET() { return GetToken(algoParser.LBRACKET, 0); }
		public CheckContext check() {
			return GetRuleContext<CheckContext>(0);
		}
		public ITerminalNode RBRACKET() { return GetToken(algoParser.RBRACKET, 0); }
		public ITerminalNode LBRACE() { return GetToken(algoParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(algoParser.RBRACE, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Stat_elifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_elif; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_elif(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_elif(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_elif(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_elifContext stat_elif() {
		Stat_elifContext _localctx = new Stat_elifContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_stat_elif);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207; Match(ELSE_SYM);
			State = 208; Match(IF_SYM);
			State = 209; Match(LBRACKET);
			State = 210; check(0);
			State = 211; Match(RBRACKET);
			State = 212; Match(LBRACE);
			State = 216;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LET_SYM) | (1L << FOR_SYM) | (1L << IF_SYM) | (1L << LIB_SYM) | (1L << RETURN_SYM) | (1L << PRINT_SYM) | (1L << DISREGARD_SYM) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 213; statement();
				}
				}
				State = 218;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 219; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_elseContext : ParserRuleContext {
		public ITerminalNode ELSE_SYM() { return GetToken(algoParser.ELSE_SYM, 0); }
		public ITerminalNode LBRACE() { return GetToken(algoParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(algoParser.RBRACE, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Stat_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_else; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_else(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_else(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_else(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_elseContext stat_else() {
		Stat_elseContext _localctx = new Stat_elseContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_stat_else);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221; Match(ELSE_SYM);
			State = 222; Match(LBRACE);
			State = 226;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LET_SYM) | (1L << FOR_SYM) | (1L << IF_SYM) | (1L << LIB_SYM) | (1L << RETURN_SYM) | (1L << PRINT_SYM) | (1L << DISREGARD_SYM) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 223; statement();
				}
				}
				State = 228;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 229; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Literal_paramsContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(algoParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(algoParser.COMMA, i);
		}
		public Literal_paramsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_params; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterLiteral_params(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitLiteral_params(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral_params(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Literal_paramsContext literal_params() {
		Literal_paramsContext _localctx = new Literal_paramsContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_literal_params);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 236;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,20,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 231; expr(0);
					State = 232; Match(COMMA);
					}
					} 
				}
				State = 238;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,20,_ctx);
			}
			State = 239; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Abstract_paramsContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(algoParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(algoParser.IDENTIFIER, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(algoParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(algoParser.COMMA, i);
		}
		public Abstract_paramsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstract_params; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterAbstract_params(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitAbstract_params(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbstract_params(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Abstract_paramsContext abstract_params() {
		Abstract_paramsContext _localctx = new Abstract_paramsContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_abstract_params);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 245;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,21,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 241; Match(IDENTIFIER);
					State = 242; Match(COMMA);
					}
					} 
				}
				State = 247;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,21,_ctx);
			}
			State = 248; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CheckContext : ParserRuleContext {
		public CheckContext[] check() {
			return GetRuleContexts<CheckContext>();
		}
		public CheckContext check(int i) {
			return GetRuleContext<CheckContext>(i);
		}
		public Check_operatorContext check_operator() {
			return GetRuleContext<Check_operatorContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public CheckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_check; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterCheck(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitCheck(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheck(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CheckContext check() {
		return check(0);
	}

	private CheckContext check(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		CheckContext _localctx = new CheckContext(_ctx, _parentState);
		CheckContext _prevctx = _localctx;
		int _startState = 36;
		EnterRecursionRule(_localctx, 36, RULE_check, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 251; expr(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 259;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,22,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CheckContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_check);
					State = 253;
					if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
					State = 254; check_operator();
					State = 255; check(3);
					}
					} 
				}
				State = 261;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,22,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Check_operatorContext : ParserRuleContext {
		public ITerminalNode BIN_OR() { return GetToken(algoParser.BIN_OR, 0); }
		public ITerminalNode BIN_AND() { return GetToken(algoParser.BIN_AND, 0); }
		public ITerminalNode GRTR_THAN() { return GetToken(algoParser.GRTR_THAN, 0); }
		public ITerminalNode LESS_THAN() { return GetToken(algoParser.LESS_THAN, 0); }
		public ITerminalNode GRTR_THAN_ET() { return GetToken(algoParser.GRTR_THAN_ET, 0); }
		public ITerminalNode LESS_THAN_ET() { return GetToken(algoParser.LESS_THAN_ET, 0); }
		public ITerminalNode BIN_EQUALS() { return GetToken(algoParser.BIN_EQUALS, 0); }
		public Check_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_check_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterCheck_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitCheck_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheck_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Check_operatorContext check_operator() {
		Check_operatorContext _localctx = new Check_operatorContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_check_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BIN_OR) | (1L << BIN_AND) | (1L << BIN_EQUALS) | (1L << GRTR_THAN) | (1L << LESS_THAN) | (1L << GRTR_THAN_ET) | (1L << LESS_THAN_ET))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode ADD_OP() { return GetToken(algoParser.ADD_OP, 0); }
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ITerminalNode TAKE_OP() { return GetToken(algoParser.TAKE_OP, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 40;
		EnterRecursionRule(_localctx, 40, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 265; term(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 275;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,24,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 273;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,23,_ctx) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 267;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 268; Match(ADD_OP);
						State = 269; term(0);
						}
						break;

					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 270;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 271; Match(TAKE_OP);
						State = 272; term(0);
						}
						break;
					}
					} 
				}
				State = 277;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,24,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Rounding_exprContext : ParserRuleContext {
		public ITerminalNode TO_SYM() { return GetToken(algoParser.TO_SYM, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode SIG_FIG_SYM() { return GetToken(algoParser.SIG_FIG_SYM, 0); }
		public Rounding_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rounding_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterRounding_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitRounding_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRounding_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rounding_exprContext rounding_expr() {
		Rounding_exprContext _localctx = new Rounding_exprContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_rounding_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278; Match(TO_SYM);
			State = 279; expr(0);
			State = 280; Match(SIG_FIG_SYM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ITerminalNode MUL_OP() { return GetToken(algoParser.MUL_OP, 0); }
		public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public ITerminalNode DIV_OP() { return GetToken(algoParser.DIV_OP, 0); }
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		return term(0);
	}

	private TermContext term(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		TermContext _localctx = new TermContext(_ctx, _parentState);
		TermContext _prevctx = _localctx;
		int _startState = 44;
		EnterRecursionRule(_localctx, 44, RULE_term, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 283; factor(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 293;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,26,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 291;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,25,_ctx) ) {
					case 1:
						{
						_localctx = new TermContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_term);
						State = 285;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 286; Match(MUL_OP);
						State = 287; factor(0);
						}
						break;

					case 2:
						{
						_localctx = new TermContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_term);
						State = 288;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 289; Match(DIV_OP);
						State = 290; factor(0);
						}
						break;
					}
					} 
				}
				State = 295;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,26,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public ITerminalNode POW_OP() { return GetToken(algoParser.POW_OP, 0); }
		public SubContext sub() {
			return GetRuleContext<SubContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		return factor(0);
	}

	private FactorContext factor(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		FactorContext _localctx = new FactorContext(_ctx, _parentState);
		FactorContext _prevctx = _localctx;
		int _startState = 46;
		EnterRecursionRule(_localctx, 46, RULE_factor, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 297; sub();
			}
			_ctx.stop = _input.Lt(-1);
			State = 304;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,27,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new FactorContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_factor);
					State = 299;
					if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
					State = 300; Match(POW_OP);
					State = 301; sub();
					}
					} 
				}
				State = 306;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,27,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SubContext : ParserRuleContext {
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ITerminalNode LBRACKET() { return GetToken(algoParser.LBRACKET, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RBRACKET() { return GetToken(algoParser.RBRACKET, 0); }
		public SubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sub; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterSub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitSub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubContext sub() {
		SubContext _localctx = new SubContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_sub);
		try {
			State = 312;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case INTEGER:
			case FLOAT:
			case BOOLEAN:
			case STRING:
			case RATIONAL:
			case NULL:
			case OBJ_SYM:
			case LSQBR:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 307; value();
				}
				break;
			case LBRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 308; Match(LBRACKET);
				State = 309; expr(0);
				State = 310; Match(RBRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		public ITerminalNode MUL_OP() { return GetToken(algoParser.MUL_OP, 0); }
		public ITerminalNode DIV_OP() { return GetToken(algoParser.DIV_OP, 0); }
		public ITerminalNode TAKE_OP() { return GetToken(algoParser.TAKE_OP, 0); }
		public ITerminalNode ADD_OP() { return GetToken(algoParser.ADD_OP, 0); }
		public ITerminalNode POW_OP() { return GetToken(algoParser.POW_OP, 0); }
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 314;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD_OP) | (1L << TAKE_OP) | (1L << MUL_OP) | (1L << DIV_OP) | (1L << POW_OP))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Selfmod_opContext : ParserRuleContext {
		public ITerminalNode ADDFROM_OP() { return GetToken(algoParser.ADDFROM_OP, 0); }
		public ITerminalNode TAKEFROM_OP() { return GetToken(algoParser.TAKEFROM_OP, 0); }
		public ITerminalNode MULFROM_OP() { return GetToken(algoParser.MULFROM_OP, 0); }
		public ITerminalNode DIVFROM_OP() { return GetToken(algoParser.DIVFROM_OP, 0); }
		public Selfmod_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selfmod_op; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterSelfmod_op(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitSelfmod_op(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelfmod_op(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Selfmod_opContext selfmod_op() {
		Selfmod_opContext _localctx = new Selfmod_opContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_selfmod_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 316;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADDFROM_OP) | (1L << TAKEFROM_OP) | (1L << DIVFROM_OP) | (1L << MULFROM_OP))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public Stat_functionCallContext stat_functionCall() {
			return GetRuleContext<Stat_functionCallContext>(0);
		}
		public Obj_accessContext obj_access() {
			return GetRuleContext<Obj_accessContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public ITerminalNode INTEGER() { return GetToken(algoParser.INTEGER, 0); }
		public ITerminalNode FLOAT() { return GetToken(algoParser.FLOAT, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(algoParser.BOOLEAN, 0); }
		public ITerminalNode STRING() { return GetToken(algoParser.STRING, 0); }
		public ITerminalNode RATIONAL() { return GetToken(algoParser.RATIONAL, 0); }
		public ITerminalNode NULL() { return GetToken(algoParser.NULL, 0); }
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public Array_accessContext array_access() {
			return GetRuleContext<Array_accessContext>(0);
		}
		public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_value);
		try {
			State = 330;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,29,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 318; stat_functionCall();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 319; obj_access();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 320; Match(IDENTIFIER);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 321; Match(INTEGER);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 322; Match(FLOAT);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 323; Match(BOOLEAN);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 324; Match(STRING);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 325; Match(RATIONAL);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 326; Match(NULL);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 327; array();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 328; array_access();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 329; @object();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Obj_accessContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(algoParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(algoParser.IDENTIFIER, i);
		}
		public ITerminalNode[] POINT() { return GetTokens(algoParser.POINT); }
		public ITerminalNode POINT(int i) {
			return GetToken(algoParser.POINT, i);
		}
		public Obj_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obj_access; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterObj_access(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitObj_access(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObj_access(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Obj_accessContext obj_access() {
		Obj_accessContext _localctx = new Obj_accessContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_obj_access);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 334;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 332; Match(IDENTIFIER);
					State = 333; Match(POINT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 336;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,30,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 338; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterArray(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitArray(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_array);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 340; Match(LSQBR);
			State = 350;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTEGER) | (1L << FLOAT) | (1L << BOOLEAN) | (1L << STRING) | (1L << RATIONAL) | (1L << NULL) | (1L << OBJ_SYM) | (1L << LSQBR) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 346;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,31,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 341; value();
						State = 342; Match(COMMA);
						}
						} 
					}
					State = 348;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,31,_ctx);
				}
				State = 349; value();
				}
			}

			State = 352; Match(RSQBR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_accessContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public Literal_paramsContext literal_params() {
			return GetRuleContext<Literal_paramsContext>(0);
		}
		public Array_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_access; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterArray_access(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitArray_access(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_access(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_accessContext array_access() {
		Array_accessContext _localctx = new Array_accessContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_array_access);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 354; Match(IDENTIFIER);
			State = 355; Match(LSQBR);
			State = 356; literal_params();
			State = 357; Match(RSQBR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectContext : ParserRuleContext {
		public ITerminalNode OBJ_SYM() { return GetToken(algoParser.OBJ_SYM, 0); }
		public ITerminalNode LBRACE() { return GetToken(algoParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(algoParser.RBRACE, 0); }
		public Obj_child_definitionsContext obj_child_definitions() {
			return GetRuleContext<Obj_child_definitionsContext>(0);
		}
		public ObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterObject(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitObject(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectContext @object() {
		ObjectContext _localctx = new ObjectContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_object);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 359; Match(OBJ_SYM);
			State = 360; Match(LBRACE);
			State = 362;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,33,_ctx) ) {
			case 1:
				{
				State = 361; obj_child_definitions();
				}
				break;
			}
			State = 364; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Obj_child_definitionsContext : ParserRuleContext {
		public Obj_vardefineContext[] obj_vardefine() {
			return GetRuleContexts<Obj_vardefineContext>();
		}
		public Obj_vardefineContext obj_vardefine(int i) {
			return GetRuleContext<Obj_vardefineContext>(i);
		}
		public Obj_funcdefineContext[] obj_funcdefine() {
			return GetRuleContexts<Obj_funcdefineContext>();
		}
		public Obj_funcdefineContext obj_funcdefine(int i) {
			return GetRuleContext<Obj_funcdefineContext>(i);
		}
		public Obj_child_definitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obj_child_definitions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterObj_child_definitions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitObj_child_definitions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObj_child_definitions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Obj_child_definitionsContext obj_child_definitions() {
		Obj_child_definitionsContext _localctx = new Obj_child_definitionsContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_obj_child_definitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 370;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==LET_SYM) {
				{
				State = 368;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,34,_ctx) ) {
				case 1:
					{
					State = 366; obj_vardefine();
					}
					break;

				case 2:
					{
					State = 367; obj_funcdefine();
					}
					break;
				}
				}
				State = 372;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Obj_vardefineContext : ParserRuleContext {
		public ITerminalNode LET_SYM() { return GetToken(algoParser.LET_SYM, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public ITerminalNode EQUALS() { return GetToken(algoParser.EQUALS, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode ENDLINE() { return GetToken(algoParser.ENDLINE, 0); }
		public Obj_vardefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obj_vardefine; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterObj_vardefine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitObj_vardefine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObj_vardefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Obj_vardefineContext obj_vardefine() {
		Obj_vardefineContext _localctx = new Obj_vardefineContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_obj_vardefine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 373; Match(LET_SYM);
			State = 374; Match(IDENTIFIER);
			State = 375; Match(EQUALS);
			State = 376; expr(0);
			State = 377; Match(ENDLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Obj_funcdefineContext : ParserRuleContext {
		public ITerminalNode LET_SYM() { return GetToken(algoParser.LET_SYM, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public ITerminalNode LBRACKET() { return GetToken(algoParser.LBRACKET, 0); }
		public ITerminalNode RBRACKET() { return GetToken(algoParser.RBRACKET, 0); }
		public ITerminalNode EQUALS() { return GetToken(algoParser.EQUALS, 0); }
		public ITerminalNode LBRACE() { return GetToken(algoParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(algoParser.RBRACE, 0); }
		public Abstract_paramsContext abstract_params() {
			return GetRuleContext<Abstract_paramsContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Obj_funcdefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obj_funcdefine; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterObj_funcdefine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitObj_funcdefine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObj_funcdefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Obj_funcdefineContext obj_funcdefine() {
		Obj_funcdefineContext _localctx = new Obj_funcdefineContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_obj_funcdefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 379; Match(LET_SYM);
			State = 380; Match(IDENTIFIER);
			State = 381; Match(LBRACKET);
			State = 383;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IDENTIFIER) {
				{
				State = 382; abstract_params();
				}
			}

			State = 385; Match(RBRACKET);
			State = 386; Match(EQUALS);
			State = 387; Match(LBRACE);
			State = 391;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LET_SYM) | (1L << FOR_SYM) | (1L << IF_SYM) | (1L << LIB_SYM) | (1L << RETURN_SYM) | (1L << PRINT_SYM) | (1L << DISREGARD_SYM) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 388; statement();
				}
				}
				State = 393;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 394; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 18: return check_sempred((CheckContext)_localctx, predIndex);

		case 20: return expr_sempred((ExprContext)_localctx, predIndex);

		case 22: return term_sempred((TermContext)_localctx, predIndex);

		case 23: return factor_sempred((FactorContext)_localctx, predIndex);
		}
		return true;
	}
	private bool check_sempred(CheckContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(_ctx, 3);

		case 2: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool term_sempred(TermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(_ctx, 3);

		case 4: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool factor_sempred(FactorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(_ctx, 2);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x33\x18F\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x3\x2\x3\x2\x3\x2\x3\x3\a\x3M\n\x3\f\x3\xE"+
		"\x3P\v\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4Y\n\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4\x61\n\x4\x5\x4\x63\n\x4\x3\x5\x3"+
		"\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x5\x6l\n\x6\x3\x6\x3\x6\x3\x6\x5\x6"+
		"q\n\x6\x3\a\x3\a\x5\au\n\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x5\b~\n"+
		"\b\x3\t\x3\t\x5\t\x82\n\t\x3\t\x3\t\x5\t\x86\n\t\x3\t\x3\t\x3\n\x3\n\x3"+
		"\n\x3\n\x5\n\x8E\n\n\x3\n\x3\n\x3\n\x3\n\a\n\x94\n\n\f\n\xE\n\x97\v\n"+
		"\x3\n\x3\n\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\a\f"+
		"\xA6\n\f\f\f\xE\f\xA9\v\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\a\r"+
		"\xB3\n\r\f\r\xE\r\xB6\v\r\x3\r\x3\r\a\r\xBA\n\r\f\r\xE\r\xBD\v\r\x3\r"+
		"\x5\r\xC0\n\r\x3\xE\x3\xE\x3\xE\x5\xE\xC5\n\xE\x3\xF\x3\xF\x3\xF\x3\xF"+
		"\a\xF\xCB\n\xF\f\xF\xE\xF\xCE\v\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3"+
		"\x10\x3\x10\x3\x10\x3\x10\a\x10\xD9\n\x10\f\x10\xE\x10\xDC\v\x10\x3\x10"+
		"\x3\x10\x3\x11\x3\x11\x3\x11\a\x11\xE3\n\x11\f\x11\xE\x11\xE6\v\x11\x3"+
		"\x11\x3\x11\x3\x12\x3\x12\x3\x12\a\x12\xED\n\x12\f\x12\xE\x12\xF0\v\x12"+
		"\x3\x12\x3\x12\x3\x13\x3\x13\a\x13\xF6\n\x13\f\x13\xE\x13\xF9\v\x13\x3"+
		"\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\a\x14\x104"+
		"\n\x14\f\x14\xE\x14\x107\v\x14\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\x3\x16"+
		"\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\a\x16\x114\n\x16\f\x16\xE\x16\x117"+
		"\v\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18"+
		"\x3\x18\x3\x18\x3\x18\x3\x18\a\x18\x126\n\x18\f\x18\xE\x18\x129\v\x18"+
		"\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\a\x19\x131\n\x19\f\x19\xE\x19"+
		"\x134\v\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x13B\n\x1A\x3\x1B"+
		"\x3\x1B\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D"+
		"\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x14D\n\x1D\x3\x1E\x3\x1E\x6"+
		"\x1E\x151\n\x1E\r\x1E\xE\x1E\x152\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3"+
		"\x1F\a\x1F\x15B\n\x1F\f\x1F\xE\x1F\x15E\v\x1F\x3\x1F\x5\x1F\x161\n\x1F"+
		"\x3\x1F\x3\x1F\x3 \x3 \x3 \x3 \x3 \x3!\x3!\x3!\x5!\x16D\n!\x3!\x3!\x3"+
		"\"\x3\"\a\"\x173\n\"\f\"\xE\"\x176\v\"\x3#\x3#\x3#\x3#\x3#\x3#\x3$\x3"+
		"$\x3$\x3$\x5$\x182\n$\x3$\x3$\x3$\x3$\a$\x188\n$\f$\xE$\x18B\v$\x3$\x3"+
		"$\x3$\x2\x2\x6&*.\x30%\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12"+
		"\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2"+
		",\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44"+
		"\x2\x46\x2\x2\x5\x3\x2)/\x3\x2\x1F#\x3\x2%(\x1A3\x2H\x3\x2\x2\x2\x4N\x3"+
		"\x2\x2\x2\x6\x62\x3\x2\x2\x2\b\x64\x3\x2\x2\x2\nk\x3\x2\x2\x2\ft\x3\x2"+
		"\x2\x2\xEy\x3\x2\x2\x2\x10\x81\x3\x2\x2\x2\x12\x89\x3\x2\x2\x2\x14\x9A"+
		"\x3\x2\x2\x2\x16\x9D\x3\x2\x2\x2\x18\xAC\x3\x2\x2\x2\x1A\xC1\x3\x2\x2"+
		"\x2\x1C\xC6\x3\x2\x2\x2\x1E\xD1\x3\x2\x2\x2 \xDF\x3\x2\x2\x2\"\xEE\x3"+
		"\x2\x2\x2$\xF7\x3\x2\x2\x2&\xFC\x3\x2\x2\x2(\x108\x3\x2\x2\x2*\x10A\x3"+
		"\x2\x2\x2,\x118\x3\x2\x2\x2.\x11C\x3\x2\x2\x2\x30\x12A\x3\x2\x2\x2\x32"+
		"\x13A\x3\x2\x2\x2\x34\x13C\x3\x2\x2\x2\x36\x13E\x3\x2\x2\x2\x38\x14C\x3"+
		"\x2\x2\x2:\x150\x3\x2\x2\x2<\x156\x3\x2\x2\x2>\x164\x3\x2\x2\x2@\x169"+
		"\x3\x2\x2\x2\x42\x174\x3\x2\x2\x2\x44\x177\x3\x2\x2\x2\x46\x17D\x3\x2"+
		"\x2\x2HI\x5\x4\x3\x2IJ\a\x2\x2\x3J\x3\x3\x2\x2\x2KM\x5\x6\x4\x2LK\x3\x2"+
		"\x2\x2MP\x3\x2\x2\x2NL\x3\x2\x2\x2NO\x3\x2\x2\x2O\x5\x3\x2\x2\x2PN\x3"+
		"\x2\x2\x2QY\x5\b\x5\x2RY\x5\x10\t\x2SY\x5\x1A\xE\x2TY\x5\n\x6\x2UY\x5"+
		"\f\a\x2VY\x5\x14\v\x2WY\x5\xE\b\x2XQ\x3\x2\x2\x2XR\x3\x2\x2\x2XS\x3\x2"+
		"\x2\x2XT\x3\x2\x2\x2XU\x3\x2\x2\x2XV\x3\x2\x2\x2XW\x3\x2\x2\x2YZ\x3\x2"+
		"\x2\x2Z[\a\x16\x2\x2[\x63\x3\x2\x2\x2\\\x61\x5\x16\f\x2]\x61\x5\x12\n"+
		"\x2^\x61\x5\x18\r\x2_\x61\x5\x1C\xF\x2`\\\x3\x2\x2\x2`]\x3\x2\x2\x2`^"+
		"\x3\x2\x2\x2`_\x3\x2\x2\x2\x61\x63\x3\x2\x2\x2\x62X\x3\x2\x2\x2\x62`\x3"+
		"\x2\x2\x2\x63\a\x3\x2\x2\x2\x64\x65\a\t\x2\x2\x65\x66\a\x30\x2\x2\x66"+
		"g\a\x17\x2\x2gh\x5*\x16\x2h\t\x3\x2\x2\x2il\a\x30\x2\x2jl\x5:\x1E\x2k"+
		"i\x3\x2\x2\x2kj\x3\x2\x2\x2lm\x3\x2\x2\x2mn\a\x17\x2\x2np\x5*\x16\x2o"+
		"q\x5,\x17\x2po\x3\x2\x2\x2pq\x3\x2\x2\x2q\v\x3\x2\x2\x2ru\a\x30\x2\x2"+
		"su\x5:\x1E\x2tr\x3\x2\x2\x2ts\x3\x2\x2\x2uv\x3\x2\x2\x2vw\x5\x36\x1C\x2"+
		"wx\x5*\x16\x2x\r\x3\x2\x2\x2y}\a\x15\x2\x2z~\a\x30\x2\x2{~\x5:\x1E\x2"+
		"|~\a!\x2\x2}z\x3\x2\x2\x2}{\x3\x2\x2\x2}|\x3\x2\x2\x2~\xF\x3\x2\x2\x2"+
		"\x7F\x82\a\x30\x2\x2\x80\x82\x5:\x1E\x2\x81\x7F\x3\x2\x2\x2\x81\x80\x3"+
		"\x2\x2\x2\x82\x83\x3\x2\x2\x2\x83\x85\a\x1D\x2\x2\x84\x86\x5\"\x12\x2"+
		"\x85\x84\x3\x2\x2\x2\x85\x86\x3\x2\x2\x2\x86\x87\x3\x2\x2\x2\x87\x88\a"+
		"\x1E\x2\x2\x88\x11\x3\x2\x2\x2\x89\x8A\a\t\x2\x2\x8A\x8B\a\x30\x2\x2\x8B"+
		"\x8D\a\x1D\x2\x2\x8C\x8E\x5$\x13\x2\x8D\x8C\x3\x2\x2\x2\x8D\x8E\x3\x2"+
		"\x2\x2\x8E\x8F\x3\x2\x2\x2\x8F\x90\a\x1E\x2\x2\x90\x91\a\x17\x2\x2\x91"+
		"\x95\a\x19\x2\x2\x92\x94\x5\x6\x4\x2\x93\x92\x3\x2\x2\x2\x94\x97\x3\x2"+
		"\x2\x2\x95\x93\x3\x2\x2\x2\x95\x96\x3\x2\x2\x2\x96\x98\x3\x2\x2\x2\x97"+
		"\x95\x3\x2\x2\x2\x98\x99\a\x1A\x2\x2\x99\x13\x3\x2\x2\x2\x9A\x9B\a\x13"+
		"\x2\x2\x9B\x9C\x5*\x16\x2\x9C\x15\x3\x2\x2\x2\x9D\x9E\a\n\x2\x2\x9E\x9F"+
		"\a\x1D\x2\x2\x9F\xA0\a\x30\x2\x2\xA0\xA1\a\v\x2\x2\xA1\xA2\x5\x38\x1D"+
		"\x2\xA2\xA3\a\x1E\x2\x2\xA3\xA7\a\x19\x2\x2\xA4\xA6\x5\x6\x4\x2\xA5\xA4"+
		"\x3\x2\x2\x2\xA6\xA9\x3\x2\x2\x2\xA7\xA5\x3\x2\x2\x2\xA7\xA8\x3\x2\x2"+
		"\x2\xA8\xAA\x3\x2\x2\x2\xA9\xA7\x3\x2\x2\x2\xAA\xAB\a\x1A\x2\x2\xAB\x17"+
		"\x3\x2\x2\x2\xAC\xAD\a\f\x2\x2\xAD\xAE\a\x1D\x2\x2\xAE\xAF\x5&\x14\x2"+
		"\xAF\xB0\a\x1E\x2\x2\xB0\xB4\a\x19\x2\x2\xB1\xB3\x5\x6\x4\x2\xB2\xB1\x3"+
		"\x2\x2\x2\xB3\xB6\x3\x2\x2\x2\xB4\xB2\x3\x2\x2\x2\xB4\xB5\x3\x2\x2\x2"+
		"\xB5\xB7\x3\x2\x2\x2\xB6\xB4\x3\x2\x2\x2\xB7\xBB\a\x1A\x2\x2\xB8\xBA\x5"+
		"\x1E\x10\x2\xB9\xB8\x3\x2\x2\x2\xBA\xBD\x3\x2\x2\x2\xBB\xB9\x3\x2\x2\x2"+
		"\xBB\xBC\x3\x2\x2\x2\xBC\xBF\x3\x2\x2\x2\xBD\xBB\x3\x2\x2\x2\xBE\xC0\x5"+
		" \x11\x2\xBF\xBE\x3\x2\x2\x2\xBF\xC0\x3\x2\x2\x2\xC0\x19\x3\x2\x2\x2\xC1"+
		"\xC2\a\x14\x2\x2\xC2\xC4\x5*\x16\x2\xC3\xC5\x5,\x17\x2\xC4\xC3\x3\x2\x2"+
		"\x2\xC4\xC5\x3\x2\x2\x2\xC5\x1B\x3\x2\x2\x2\xC6\xC7\a\xE\x2\x2\xC7\xC8"+
		"\a\x30\x2\x2\xC8\xCC\a\x19\x2\x2\xC9\xCB\x5\x6\x4\x2\xCA\xC9\x3\x2\x2"+
		"\x2\xCB\xCE\x3\x2\x2\x2\xCC\xCA\x3\x2\x2\x2\xCC\xCD\x3\x2\x2\x2\xCD\xCF"+
		"\x3\x2\x2\x2\xCE\xCC\x3\x2\x2\x2\xCF\xD0\a\x1A\x2\x2\xD0\x1D\x3\x2\x2"+
		"\x2\xD1\xD2\a\x11\x2\x2\xD2\xD3\a\f\x2\x2\xD3\xD4\a\x1D\x2\x2\xD4\xD5"+
		"\x5&\x14\x2\xD5\xD6\a\x1E\x2\x2\xD6\xDA\a\x19\x2\x2\xD7\xD9\x5\x6\x4\x2"+
		"\xD8\xD7\x3\x2\x2\x2\xD9\xDC\x3\x2\x2\x2\xDA\xD8\x3\x2\x2\x2\xDA\xDB\x3"+
		"\x2\x2\x2\xDB\xDD\x3\x2\x2\x2\xDC\xDA\x3\x2\x2\x2\xDD\xDE\a\x1A\x2\x2"+
		"\xDE\x1F\x3\x2\x2\x2\xDF\xE0\a\x11\x2\x2\xE0\xE4\a\x19\x2\x2\xE1\xE3\x5"+
		"\x6\x4\x2\xE2\xE1\x3\x2\x2\x2\xE3\xE6\x3\x2\x2\x2\xE4\xE2\x3\x2\x2\x2"+
		"\xE4\xE5\x3\x2\x2\x2\xE5\xE7\x3\x2\x2\x2\xE6\xE4\x3\x2\x2\x2\xE7\xE8\a"+
		"\x1A\x2\x2\xE8!\x3\x2\x2\x2\xE9\xEA\x5*\x16\x2\xEA\xEB\a\x18\x2\x2\xEB"+
		"\xED\x3\x2\x2\x2\xEC\xE9\x3\x2\x2\x2\xED\xF0\x3\x2\x2\x2\xEE\xEC\x3\x2"+
		"\x2\x2\xEE\xEF\x3\x2\x2\x2\xEF\xF1\x3\x2\x2\x2\xF0\xEE\x3\x2\x2\x2\xF1"+
		"\xF2\x5*\x16\x2\xF2#\x3\x2\x2\x2\xF3\xF4\a\x30\x2\x2\xF4\xF6\a\x18\x2"+
		"\x2\xF5\xF3\x3\x2\x2\x2\xF6\xF9\x3\x2\x2\x2\xF7\xF5\x3\x2\x2\x2\xF7\xF8"+
		"\x3\x2\x2\x2\xF8\xFA\x3\x2\x2\x2\xF9\xF7\x3\x2\x2\x2\xFA\xFB\a\x30\x2"+
		"\x2\xFB%\x3\x2\x2\x2\xFC\xFD\b\x14\x1\x2\xFD\xFE\x5*\x16\x2\xFE\x105\x3"+
		"\x2\x2\x2\xFF\x100\f\x4\x2\x2\x100\x101\x5(\x15\x2\x101\x102\x5&\x14\x5"+
		"\x102\x104\x3\x2\x2\x2\x103\xFF\x3\x2\x2\x2\x104\x107\x3\x2\x2\x2\x105"+
		"\x103\x3\x2\x2\x2\x105\x106\x3\x2\x2\x2\x106\'\x3\x2\x2\x2\x107\x105\x3"+
		"\x2\x2\x2\x108\x109\t\x2\x2\x2\x109)\x3\x2\x2\x2\x10A\x10B\b\x16\x1\x2"+
		"\x10B\x10C\x5.\x18\x2\x10C\x115\x3\x2\x2\x2\x10D\x10E\f\x5\x2\x2\x10E"+
		"\x10F\a\x1F\x2\x2\x10F\x114\x5.\x18\x2\x110\x111\f\x4\x2\x2\x111\x112"+
		"\a \x2\x2\x112\x114\x5.\x18\x2\x113\x10D\x3\x2\x2\x2\x113\x110\x3\x2\x2"+
		"\x2\x114\x117\x3\x2\x2\x2\x115\x113\x3\x2\x2\x2\x115\x116\x3\x2\x2\x2"+
		"\x116+\x3\x2\x2\x2\x117\x115\x3\x2\x2\x2\x118\x119\a\r\x2\x2\x119\x11A"+
		"\x5*\x16\x2\x11A\x11B\a\xF\x2\x2\x11B-\x3\x2\x2\x2\x11C\x11D\b\x18\x1"+
		"\x2\x11D\x11E\x5\x30\x19\x2\x11E\x127\x3\x2\x2\x2\x11F\x120\f\x5\x2\x2"+
		"\x120\x121\a!\x2\x2\x121\x126\x5\x30\x19\x2\x122\x123\f\x4\x2\x2\x123"+
		"\x124\a\"\x2\x2\x124\x126\x5\x30\x19\x2\x125\x11F\x3\x2\x2\x2\x125\x122"+
		"\x3\x2\x2\x2\x126\x129\x3\x2\x2\x2\x127\x125\x3\x2\x2\x2\x127\x128\x3"+
		"\x2\x2\x2\x128/\x3\x2\x2\x2\x129\x127\x3\x2\x2\x2\x12A\x12B\b\x19\x1\x2"+
		"\x12B\x12C\x5\x32\x1A\x2\x12C\x132\x3\x2\x2\x2\x12D\x12E\f\x4\x2\x2\x12E"+
		"\x12F\a#\x2\x2\x12F\x131\x5\x32\x1A\x2\x130\x12D\x3\x2\x2\x2\x131\x134"+
		"\x3\x2\x2\x2\x132\x130\x3\x2\x2\x2\x132\x133\x3\x2\x2\x2\x133\x31\x3\x2"+
		"\x2\x2\x134\x132\x3\x2\x2\x2\x135\x13B\x5\x38\x1D\x2\x136\x137\a\x1D\x2"+
		"\x2\x137\x138\x5*\x16\x2\x138\x139\a\x1E\x2\x2\x139\x13B\x3\x2\x2\x2\x13A"+
		"\x135\x3\x2\x2\x2\x13A\x136\x3\x2\x2\x2\x13B\x33\x3\x2\x2\x2\x13C\x13D"+
		"\t\x3\x2\x2\x13D\x35\x3\x2\x2\x2\x13E\x13F\t\x4\x2\x2\x13F\x37\x3\x2\x2"+
		"\x2\x140\x14D\x5\x10\t\x2\x141\x14D\x5:\x1E\x2\x142\x14D\a\x30\x2\x2\x143"+
		"\x14D\a\x3\x2\x2\x144\x14D\a\x4\x2\x2\x145\x14D\a\x5\x2\x2\x146\x14D\a"+
		"\x6\x2\x2\x147\x14D\a\a\x2\x2\x148\x14D\a\b\x2\x2\x149\x14D\x5<\x1F\x2"+
		"\x14A\x14D\x5> \x2\x14B\x14D\x5@!\x2\x14C\x140\x3\x2\x2\x2\x14C\x141\x3"+
		"\x2\x2\x2\x14C\x142\x3\x2\x2\x2\x14C\x143\x3\x2\x2\x2\x14C\x144\x3\x2"+
		"\x2\x2\x14C\x145\x3\x2\x2\x2\x14C\x146\x3\x2\x2\x2\x14C\x147\x3\x2\x2"+
		"\x2\x14C\x148\x3\x2\x2\x2\x14C\x149\x3\x2\x2\x2\x14C\x14A\x3\x2\x2\x2"+
		"\x14C\x14B\x3\x2\x2\x2\x14D\x39\x3\x2\x2\x2\x14E\x14F\a\x30\x2\x2\x14F"+
		"\x151\a$\x2\x2\x150\x14E\x3\x2\x2\x2\x151\x152\x3\x2\x2\x2\x152\x150\x3"+
		"\x2\x2\x2\x152\x153\x3\x2\x2\x2\x153\x154\x3\x2\x2\x2\x154\x155\a\x30"+
		"\x2\x2\x155;\x3\x2\x2\x2\x156\x160\a\x1B\x2\x2\x157\x158\x5\x38\x1D\x2"+
		"\x158\x159\a\x18\x2\x2\x159\x15B\x3\x2\x2\x2\x15A\x157\x3\x2\x2\x2\x15B"+
		"\x15E\x3\x2\x2\x2\x15C\x15A\x3\x2\x2\x2\x15C\x15D\x3\x2\x2\x2\x15D\x15F"+
		"\x3\x2\x2\x2\x15E\x15C\x3\x2\x2\x2\x15F\x161\x5\x38\x1D\x2\x160\x15C\x3"+
		"\x2\x2\x2\x160\x161\x3\x2\x2\x2\x161\x162\x3\x2\x2\x2\x162\x163\a\x1C"+
		"\x2\x2\x163=\x3\x2\x2\x2\x164\x165\a\x30\x2\x2\x165\x166\a\x1B\x2\x2\x166"+
		"\x167\x5\"\x12\x2\x167\x168\a\x1C\x2\x2\x168?\x3\x2\x2\x2\x169\x16A\a"+
		"\x10\x2\x2\x16A\x16C\a\x19\x2\x2\x16B\x16D\x5\x42\"\x2\x16C\x16B\x3\x2"+
		"\x2\x2\x16C\x16D\x3\x2\x2\x2\x16D\x16E\x3\x2\x2\x2\x16E\x16F\a\x1A\x2"+
		"\x2\x16F\x41\x3\x2\x2\x2\x170\x173\x5\x44#\x2\x171\x173\x5\x46$\x2\x172"+
		"\x170\x3\x2\x2\x2\x172\x171\x3\x2\x2\x2\x173\x176\x3\x2\x2\x2\x174\x172"+
		"\x3\x2\x2\x2\x174\x175\x3\x2\x2\x2\x175\x43\x3\x2\x2\x2\x176\x174\x3\x2"+
		"\x2\x2\x177\x178\a\t\x2\x2\x178\x179\a\x30\x2\x2\x179\x17A\a\x17\x2\x2"+
		"\x17A\x17B\x5*\x16\x2\x17B\x17C\a\x16\x2\x2\x17C\x45\x3\x2\x2\x2\x17D"+
		"\x17E\a\t\x2\x2\x17E\x17F\a\x30\x2\x2\x17F\x181\a\x1D\x2\x2\x180\x182"+
		"\x5$\x13\x2\x181\x180\x3\x2\x2\x2\x181\x182\x3\x2\x2\x2\x182\x183\x3\x2"+
		"\x2\x2\x183\x184\a\x1E\x2\x2\x184\x185\a\x17\x2\x2\x185\x189\a\x19\x2"+
		"\x2\x186\x188\x5\x6\x4\x2\x187\x186\x3\x2\x2\x2\x188\x18B\x3\x2\x2\x2"+
		"\x189\x187\x3\x2\x2\x2\x189\x18A\x3\x2\x2\x2\x18A\x18C\x3\x2\x2\x2\x18B"+
		"\x189\x3\x2\x2\x2\x18C\x18D\a\x1A\x2\x2\x18DG\x3\x2\x2\x2(NX`\x62kpt}"+
		"\x81\x85\x8D\x95\xA7\xB4\xBB\xBF\xC4\xCC\xDA\xE4\xEE\xF7\x105\x113\x115"+
		"\x125\x127\x132\x13A\x14C\x152\x15C\x160\x16C\x172\x174\x181\x189";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Algo
