//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\Files\Programming\GitHub\algo\Algo\Parsing\algo.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Algo {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class algoParser : Parser {
	public const int
		INTEGER=1, FLOAT=2, BOOLEAN=3, STRING=4, RATIONAL=5, LET_SYM=6, FOR_SYM=7, 
		IN_SYM=8, IF_SYM=9, TO_SYM=10, SIG_FIG_SYM=11, ELSE_SYM=12, IMPORT_SYM=13, 
		RETURN_SYM=14, PRINT_SYM=15, ENDLINE=16, EQUALS=17, COMMA=18, LBRACE=19, 
		RBRACE=20, LSQBR=21, RSQBR=22, LBRACKET=23, RBRACKET=24, ADD_OP=25, TAKE_OP=26, 
		MUL_OP=27, DIV_OP=28, POW_OP=29, BIN_OR=30, BIN_AND=31, BIN_EQUALS=32, 
		GRTR_THAN=33, LESS_THAN=34, GRTR_THAN_ET=35, LESS_THAN_ET=36, IDENTIFIER=37, 
		COMMENT=38, WS=39, UNKNOWN_SYMBOL=40;
	public const int
		RULE_compileUnit = 0, RULE_block = 1, RULE_statement = 2, RULE_stat_define = 3, 
		RULE_stat_setvar = 4, RULE_stat_functionCall = 5, RULE_stat_functionDef = 6, 
		RULE_stat_return = 7, RULE_stat_forLoop = 8, RULE_stat_if = 9, RULE_stat_print = 10, 
		RULE_stat_elif = 11, RULE_stat_else = 12, RULE_literal_params = 13, RULE_abstract_params = 14, 
		RULE_check = 15, RULE_check_operator = 16, RULE_expr = 17, RULE_rounding_expr = 18, 
		RULE_term = 19, RULE_factor = 20, RULE_sub = 21, RULE_operator = 22, RULE_value = 23, 
		RULE_array = 24, RULE_array_access = 25;
	public static readonly string[] ruleNames = {
		"compileUnit", "block", "statement", "stat_define", "stat_setvar", "stat_functionCall", 
		"stat_functionDef", "stat_return", "stat_forLoop", "stat_if", "stat_print", 
		"stat_elif", "stat_else", "literal_params", "abstract_params", "check", 
		"check_operator", "expr", "rounding_expr", "term", "factor", "sub", "operator", 
		"value", "array", "array_access"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'let'", "'for'", "'in'", "'if'", 
		"'to'", "'sf'", "'else'", "'import'", "'return'", "'print'", "';'", "'='", 
		"','", "'{'", "'}'", "'['", "']'", "'('", "')'", "'+'", "'-'", "'*'", 
		"'/'", "'^'", "'|'", "'&'", "'=='", "'>'", "'<'", "'>='", "'<='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INTEGER", "FLOAT", "BOOLEAN", "STRING", "RATIONAL", "LET_SYM", 
		"FOR_SYM", "IN_SYM", "IF_SYM", "TO_SYM", "SIG_FIG_SYM", "ELSE_SYM", "IMPORT_SYM", 
		"RETURN_SYM", "PRINT_SYM", "ENDLINE", "EQUALS", "COMMA", "LBRACE", "RBRACE", 
		"LSQBR", "RSQBR", "LBRACKET", "RBRACKET", "ADD_OP", "TAKE_OP", "MUL_OP", 
		"DIV_OP", "POW_OP", "BIN_OR", "BIN_AND", "BIN_EQUALS", "GRTR_THAN", "LESS_THAN", 
		"GRTR_THAN_ET", "LESS_THAN_ET", "IDENTIFIER", "COMMENT", "WS", "UNKNOWN_SYMBOL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "algo.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public algoParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompileUnitContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(algoParser.Eof, 0); }
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52; block();
			State = 53; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LET_SYM) | (1L << FOR_SYM) | (1L << IF_SYM) | (1L << RETURN_SYM) | (1L << PRINT_SYM) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 55; statement();
				}
				}
				State = 60;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public ITerminalNode ENDLINE() { return GetToken(algoParser.ENDLINE, 0); }
		public Stat_defineContext stat_define() {
			return GetRuleContext<Stat_defineContext>(0);
		}
		public Stat_functionCallContext stat_functionCall() {
			return GetRuleContext<Stat_functionCallContext>(0);
		}
		public Stat_printContext stat_print() {
			return GetRuleContext<Stat_printContext>(0);
		}
		public Stat_setvarContext stat_setvar() {
			return GetRuleContext<Stat_setvarContext>(0);
		}
		public Stat_returnContext stat_return() {
			return GetRuleContext<Stat_returnContext>(0);
		}
		public Stat_forLoopContext stat_forLoop() {
			return GetRuleContext<Stat_forLoopContext>(0);
		}
		public Stat_functionDefContext stat_functionDef() {
			return GetRuleContext<Stat_functionDefContext>(0);
		}
		public Stat_ifContext stat_if() {
			return GetRuleContext<Stat_ifContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 75;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 66;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
				case 1:
					{
					State = 61; stat_define();
					}
					break;

				case 2:
					{
					State = 62; stat_functionCall();
					}
					break;

				case 3:
					{
					State = 63; stat_print();
					}
					break;

				case 4:
					{
					State = 64; stat_setvar();
					}
					break;

				case 5:
					{
					State = 65; stat_return();
					}
					break;
				}
				State = 68; Match(ENDLINE);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 73;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case FOR_SYM:
					{
					State = 70; stat_forLoop();
					}
					break;
				case LET_SYM:
					{
					State = 71; stat_functionDef();
					}
					break;
				case IF_SYM:
					{
					State = 72; stat_if();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_defineContext : ParserRuleContext {
		public ITerminalNode LET_SYM() { return GetToken(algoParser.LET_SYM, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public ITerminalNode EQUALS() { return GetToken(algoParser.EQUALS, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Stat_defineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_define; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_define(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_define(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_define(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_defineContext stat_define() {
		Stat_defineContext _localctx = new Stat_defineContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_stat_define);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77; Match(LET_SYM);
			State = 78; Match(IDENTIFIER);
			State = 79; Match(EQUALS);
			State = 80; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_setvarContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public ITerminalNode EQUALS() { return GetToken(algoParser.EQUALS, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Rounding_exprContext rounding_expr() {
			return GetRuleContext<Rounding_exprContext>(0);
		}
		public Stat_setvarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_setvar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_setvar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_setvar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_setvar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_setvarContext stat_setvar() {
		Stat_setvarContext _localctx = new Stat_setvarContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_stat_setvar);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82; Match(IDENTIFIER);
			State = 83; Match(EQUALS);
			State = 84; expr(0);
			State = 86;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==TO_SYM) {
				{
				State = 85; rounding_expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_functionCallContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public ITerminalNode LBRACKET() { return GetToken(algoParser.LBRACKET, 0); }
		public ITerminalNode RBRACKET() { return GetToken(algoParser.RBRACKET, 0); }
		public Literal_paramsContext literal_params() {
			return GetRuleContext<Literal_paramsContext>(0);
		}
		public Stat_functionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_functionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_functionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_functionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_functionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_functionCallContext stat_functionCall() {
		Stat_functionCallContext _localctx = new Stat_functionCallContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_stat_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88; Match(IDENTIFIER);
			State = 89; Match(LBRACKET);
			State = 91;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTEGER) | (1L << FLOAT) | (1L << BOOLEAN) | (1L << STRING) | (1L << RATIONAL) | (1L << LSQBR) | (1L << LBRACKET) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 90; literal_params();
				}
			}

			State = 93; Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_functionDefContext : ParserRuleContext {
		public ITerminalNode LET_SYM() { return GetToken(algoParser.LET_SYM, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public ITerminalNode LBRACKET() { return GetToken(algoParser.LBRACKET, 0); }
		public ITerminalNode RBRACKET() { return GetToken(algoParser.RBRACKET, 0); }
		public ITerminalNode EQUALS() { return GetToken(algoParser.EQUALS, 0); }
		public ITerminalNode LBRACE() { return GetToken(algoParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(algoParser.RBRACE, 0); }
		public Abstract_paramsContext abstract_params() {
			return GetRuleContext<Abstract_paramsContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Stat_functionDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_functionDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_functionDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_functionDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_functionDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_functionDefContext stat_functionDef() {
		Stat_functionDefContext _localctx = new Stat_functionDefContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_stat_functionDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95; Match(LET_SYM);
			State = 96; Match(IDENTIFIER);
			State = 97; Match(LBRACKET);
			State = 99;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IDENTIFIER) {
				{
				State = 98; abstract_params();
				}
			}

			State = 101; Match(RBRACKET);
			State = 102; Match(EQUALS);
			State = 103; Match(LBRACE);
			State = 107;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LET_SYM) | (1L << FOR_SYM) | (1L << IF_SYM) | (1L << RETURN_SYM) | (1L << PRINT_SYM) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 104; statement();
				}
				}
				State = 109;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 110; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_returnContext : ParserRuleContext {
		public ITerminalNode RETURN_SYM() { return GetToken(algoParser.RETURN_SYM, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Stat_returnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_return; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_return(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_return(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_return(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_returnContext stat_return() {
		Stat_returnContext _localctx = new Stat_returnContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_stat_return);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112; Match(RETURN_SYM);
			State = 113; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_forLoopContext : ParserRuleContext {
		public ITerminalNode FOR_SYM() { return GetToken(algoParser.FOR_SYM, 0); }
		public ITerminalNode LBRACKET() { return GetToken(algoParser.LBRACKET, 0); }
		public ITerminalNode[] IDENTIFIER() { return GetTokens(algoParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(algoParser.IDENTIFIER, i);
		}
		public ITerminalNode IN_SYM() { return GetToken(algoParser.IN_SYM, 0); }
		public ITerminalNode RBRACKET() { return GetToken(algoParser.RBRACKET, 0); }
		public ITerminalNode LBRACE() { return GetToken(algoParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(algoParser.RBRACE, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Stat_forLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_forLoop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_forLoop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_forLoop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_forLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_forLoopContext stat_forLoop() {
		Stat_forLoopContext _localctx = new Stat_forLoopContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_stat_forLoop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115; Match(FOR_SYM);
			State = 116; Match(LBRACKET);
			State = 117; Match(IDENTIFIER);
			State = 118; Match(IN_SYM);
			State = 119; Match(IDENTIFIER);
			State = 120; Match(RBRACKET);
			State = 121; Match(LBRACE);
			State = 125;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LET_SYM) | (1L << FOR_SYM) | (1L << IF_SYM) | (1L << RETURN_SYM) | (1L << PRINT_SYM) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 122; statement();
				}
				}
				State = 127;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 128; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_ifContext : ParserRuleContext {
		public ITerminalNode IF_SYM() { return GetToken(algoParser.IF_SYM, 0); }
		public ITerminalNode LBRACKET() { return GetToken(algoParser.LBRACKET, 0); }
		public CheckContext check() {
			return GetRuleContext<CheckContext>(0);
		}
		public ITerminalNode RBRACKET() { return GetToken(algoParser.RBRACKET, 0); }
		public ITerminalNode LBRACE() { return GetToken(algoParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(algoParser.RBRACE, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Stat_elifContext[] stat_elif() {
			return GetRuleContexts<Stat_elifContext>();
		}
		public Stat_elifContext stat_elif(int i) {
			return GetRuleContext<Stat_elifContext>(i);
		}
		public Stat_elseContext stat_else() {
			return GetRuleContext<Stat_elseContext>(0);
		}
		public Stat_ifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_if; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_if(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_if(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_if(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_ifContext stat_if() {
		Stat_ifContext _localctx = new Stat_ifContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_stat_if);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 130; Match(IF_SYM);
			State = 131; Match(LBRACKET);
			State = 132; check(0);
			State = 133; Match(RBRACKET);
			State = 134; Match(LBRACE);
			State = 138;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LET_SYM) | (1L << FOR_SYM) | (1L << IF_SYM) | (1L << RETURN_SYM) | (1L << PRINT_SYM) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 135; statement();
				}
				}
				State = 140;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 141; Match(RBRACE);
			State = 145;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,10,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 142; stat_elif();
					}
					} 
				}
				State = 147;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,10,_ctx);
			}
			State = 149;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ELSE_SYM) {
				{
				State = 148; stat_else();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_printContext : ParserRuleContext {
		public ITerminalNode PRINT_SYM() { return GetToken(algoParser.PRINT_SYM, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Rounding_exprContext rounding_expr() {
			return GetRuleContext<Rounding_exprContext>(0);
		}
		public Stat_printContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_print; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_print(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_print(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_print(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_printContext stat_print() {
		Stat_printContext _localctx = new Stat_printContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_stat_print);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151; Match(PRINT_SYM);
			State = 152; expr(0);
			State = 154;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==TO_SYM) {
				{
				State = 153; rounding_expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_elifContext : ParserRuleContext {
		public ITerminalNode ELSE_SYM() { return GetToken(algoParser.ELSE_SYM, 0); }
		public ITerminalNode IF_SYM() { return GetToken(algoParser.IF_SYM, 0); }
		public ITerminalNode LBRACKET() { return GetToken(algoParser.LBRACKET, 0); }
		public CheckContext check() {
			return GetRuleContext<CheckContext>(0);
		}
		public ITerminalNode RBRACKET() { return GetToken(algoParser.RBRACKET, 0); }
		public ITerminalNode LBRACE() { return GetToken(algoParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(algoParser.RBRACE, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Stat_elifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_elif; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_elif(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_elif(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_elif(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_elifContext stat_elif() {
		Stat_elifContext _localctx = new Stat_elifContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_stat_elif);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156; Match(ELSE_SYM);
			State = 157; Match(IF_SYM);
			State = 158; Match(LBRACKET);
			State = 159; check(0);
			State = 160; Match(RBRACKET);
			State = 161; Match(LBRACE);
			State = 165;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LET_SYM) | (1L << FOR_SYM) | (1L << IF_SYM) | (1L << RETURN_SYM) | (1L << PRINT_SYM) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 162; statement();
				}
				}
				State = 167;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 168; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_elseContext : ParserRuleContext {
		public ITerminalNode ELSE_SYM() { return GetToken(algoParser.ELSE_SYM, 0); }
		public ITerminalNode LBRACE() { return GetToken(algoParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(algoParser.RBRACE, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Stat_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_else; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_else(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_else(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_else(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_elseContext stat_else() {
		Stat_elseContext _localctx = new Stat_elseContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_stat_else);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170; Match(ELSE_SYM);
			State = 171; Match(LBRACE);
			State = 175;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LET_SYM) | (1L << FOR_SYM) | (1L << IF_SYM) | (1L << RETURN_SYM) | (1L << PRINT_SYM) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 172; statement();
				}
				}
				State = 177;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 178; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Literal_paramsContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(algoParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(algoParser.COMMA, i);
		}
		public Literal_paramsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_params; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterLiteral_params(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitLiteral_params(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral_params(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Literal_paramsContext literal_params() {
		Literal_paramsContext _localctx = new Literal_paramsContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_literal_params);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,15,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 180; expr(0);
					State = 181; Match(COMMA);
					}
					} 
				}
				State = 187;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,15,_ctx);
			}
			State = 188; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Abstract_paramsContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(algoParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(algoParser.IDENTIFIER, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(algoParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(algoParser.COMMA, i);
		}
		public Abstract_paramsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstract_params; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterAbstract_params(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitAbstract_params(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbstract_params(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Abstract_paramsContext abstract_params() {
		Abstract_paramsContext _localctx = new Abstract_paramsContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_abstract_params);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,16,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 190; Match(IDENTIFIER);
					State = 191; Match(COMMA);
					}
					} 
				}
				State = 196;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,16,_ctx);
			}
			State = 197; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CheckContext : ParserRuleContext {
		public CheckContext[] check() {
			return GetRuleContexts<CheckContext>();
		}
		public CheckContext check(int i) {
			return GetRuleContext<CheckContext>(i);
		}
		public Check_operatorContext check_operator() {
			return GetRuleContext<Check_operatorContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public CheckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_check; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterCheck(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitCheck(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheck(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CheckContext check() {
		return check(0);
	}

	private CheckContext check(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		CheckContext _localctx = new CheckContext(_ctx, _parentState);
		CheckContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_check, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 200; expr(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 208;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,17,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CheckContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_check);
					State = 202;
					if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
					State = 203; check_operator();
					State = 204; check(3);
					}
					} 
				}
				State = 210;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,17,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Check_operatorContext : ParserRuleContext {
		public ITerminalNode BIN_OR() { return GetToken(algoParser.BIN_OR, 0); }
		public ITerminalNode BIN_AND() { return GetToken(algoParser.BIN_AND, 0); }
		public ITerminalNode GRTR_THAN() { return GetToken(algoParser.GRTR_THAN, 0); }
		public ITerminalNode LESS_THAN() { return GetToken(algoParser.LESS_THAN, 0); }
		public ITerminalNode GRTR_THAN_ET() { return GetToken(algoParser.GRTR_THAN_ET, 0); }
		public ITerminalNode LESS_THAN_ET() { return GetToken(algoParser.LESS_THAN_ET, 0); }
		public ITerminalNode BIN_EQUALS() { return GetToken(algoParser.BIN_EQUALS, 0); }
		public Check_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_check_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterCheck_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitCheck_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheck_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Check_operatorContext check_operator() {
		Check_operatorContext _localctx = new Check_operatorContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_check_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BIN_OR) | (1L << BIN_AND) | (1L << BIN_EQUALS) | (1L << GRTR_THAN) | (1L << LESS_THAN) | (1L << GRTR_THAN_ET) | (1L << LESS_THAN_ET))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode ADD_OP() { return GetToken(algoParser.ADD_OP, 0); }
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ITerminalNode TAKE_OP() { return GetToken(algoParser.TAKE_OP, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 34;
		EnterRecursionRule(_localctx, 34, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 214; term(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 224;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,19,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 222;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,18,_ctx) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 216;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 217; Match(ADD_OP);
						State = 218; term(0);
						}
						break;

					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 219;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 220; Match(TAKE_OP);
						State = 221; term(0);
						}
						break;
					}
					} 
				}
				State = 226;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,19,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Rounding_exprContext : ParserRuleContext {
		public ITerminalNode TO_SYM() { return GetToken(algoParser.TO_SYM, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode SIG_FIG_SYM() { return GetToken(algoParser.SIG_FIG_SYM, 0); }
		public Rounding_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rounding_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterRounding_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitRounding_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRounding_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rounding_exprContext rounding_expr() {
		Rounding_exprContext _localctx = new Rounding_exprContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_rounding_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 227; Match(TO_SYM);
			State = 228; expr(0);
			State = 229; Match(SIG_FIG_SYM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ITerminalNode MUL_OP() { return GetToken(algoParser.MUL_OP, 0); }
		public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public ITerminalNode DIV_OP() { return GetToken(algoParser.DIV_OP, 0); }
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		return term(0);
	}

	private TermContext term(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		TermContext _localctx = new TermContext(_ctx, _parentState);
		TermContext _prevctx = _localctx;
		int _startState = 38;
		EnterRecursionRule(_localctx, 38, RULE_term, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 232; factor(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 242;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,21,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 240;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,20,_ctx) ) {
					case 1:
						{
						_localctx = new TermContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_term);
						State = 234;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 235; Match(MUL_OP);
						State = 236; factor(0);
						}
						break;

					case 2:
						{
						_localctx = new TermContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_term);
						State = 237;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 238; Match(DIV_OP);
						State = 239; factor(0);
						}
						break;
					}
					} 
				}
				State = 244;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,21,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public ITerminalNode POW_OP() { return GetToken(algoParser.POW_OP, 0); }
		public SubContext sub() {
			return GetRuleContext<SubContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		return factor(0);
	}

	private FactorContext factor(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		FactorContext _localctx = new FactorContext(_ctx, _parentState);
		FactorContext _prevctx = _localctx;
		int _startState = 40;
		EnterRecursionRule(_localctx, 40, RULE_factor, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 246; sub();
			}
			_ctx.stop = _input.Lt(-1);
			State = 253;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,22,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new FactorContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_factor);
					State = 248;
					if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
					State = 249; Match(POW_OP);
					State = 250; sub();
					}
					} 
				}
				State = 255;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,22,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SubContext : ParserRuleContext {
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ITerminalNode LBRACKET() { return GetToken(algoParser.LBRACKET, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RBRACKET() { return GetToken(algoParser.RBRACKET, 0); }
		public SubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sub; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterSub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitSub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubContext sub() {
		SubContext _localctx = new SubContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_sub);
		try {
			State = 261;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case INTEGER:
			case FLOAT:
			case BOOLEAN:
			case STRING:
			case RATIONAL:
			case LSQBR:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 256; value();
				}
				break;
			case LBRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 257; Match(LBRACKET);
				State = 258; expr(0);
				State = 259; Match(RBRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		public ITerminalNode MUL_OP() { return GetToken(algoParser.MUL_OP, 0); }
		public ITerminalNode DIV_OP() { return GetToken(algoParser.DIV_OP, 0); }
		public ITerminalNode TAKE_OP() { return GetToken(algoParser.TAKE_OP, 0); }
		public ITerminalNode ADD_OP() { return GetToken(algoParser.ADD_OP, 0); }
		public ITerminalNode POW_OP() { return GetToken(algoParser.POW_OP, 0); }
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD_OP) | (1L << TAKE_OP) | (1L << MUL_OP) | (1L << DIV_OP) | (1L << POW_OP))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public Stat_functionCallContext stat_functionCall() {
			return GetRuleContext<Stat_functionCallContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public ITerminalNode INTEGER() { return GetToken(algoParser.INTEGER, 0); }
		public ITerminalNode FLOAT() { return GetToken(algoParser.FLOAT, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(algoParser.BOOLEAN, 0); }
		public ITerminalNode STRING() { return GetToken(algoParser.STRING, 0); }
		public ITerminalNode RATIONAL() { return GetToken(algoParser.RATIONAL, 0); }
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public Array_accessContext array_access() {
			return GetRuleContext<Array_accessContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_value);
		try {
			State = 274;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,24,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 265; stat_functionCall();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 266; Match(IDENTIFIER);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 267; Match(INTEGER);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 268; Match(FLOAT);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 269; Match(BOOLEAN);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 270; Match(STRING);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 271; Match(RATIONAL);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 272; array();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 273; array_access();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterArray(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitArray(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_array);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 276; Match(LSQBR);
			State = 286;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTEGER) | (1L << FLOAT) | (1L << BOOLEAN) | (1L << STRING) | (1L << RATIONAL) | (1L << LSQBR) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 282;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,25,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 277; value();
						State = 278; Match(COMMA);
						}
						} 
					}
					State = 284;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,25,_ctx);
				}
				State = 285; value();
				}
			}

			State = 288; Match(RSQBR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_accessContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public Literal_paramsContext literal_params() {
			return GetRuleContext<Literal_paramsContext>(0);
		}
		public Array_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_access; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterArray_access(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitArray_access(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_access(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_accessContext array_access() {
		Array_accessContext _localctx = new Array_accessContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_array_access);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 290; Match(IDENTIFIER);
			State = 291; Match(LSQBR);
			State = 292; literal_params();
			State = 293; Match(RSQBR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 15: return check_sempred((CheckContext)_localctx, predIndex);

		case 17: return expr_sempred((ExprContext)_localctx, predIndex);

		case 19: return term_sempred((TermContext)_localctx, predIndex);

		case 20: return factor_sempred((FactorContext)_localctx, predIndex);
		}
		return true;
	}
	private bool check_sempred(CheckContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(_ctx, 3);

		case 2: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool term_sempred(TermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(_ctx, 3);

		case 4: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool factor_sempred(FactorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(_ctx, 2);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3*\x12A\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x3\x2\x3\x2\x3\x2\x3\x3\a\x3;\n\x3\f\x3\xE\x3>\v\x3\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x5\x4\x45\n\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4"+
		"L\n\x4\x5\x4N\n\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x5\x6Y\n\x6\x3\a\x3\a\x3\a\x5\a^\n\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b"+
		"\x5\b\x66\n\b\x3\b\x3\b\x3\b\x3\b\a\bl\n\b\f\b\xE\bo\v\b\x3\b\x3\b\x3"+
		"\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\a\n~\n\n\f\n\xE\n"+
		"\x81\v\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\a\v\x8B\n\v\f\v\xE\v"+
		"\x8E\v\v\x3\v\x3\v\a\v\x92\n\v\f\v\xE\v\x95\v\v\x3\v\x5\v\x98\n\v\x3\f"+
		"\x3\f\x3\f\x5\f\x9D\n\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\a\r\xA6\n\r"+
		"\f\r\xE\r\xA9\v\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\a\xE\xB0\n\xE\f\xE\xE\xE"+
		"\xB3\v\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\a\xF\xBA\n\xF\f\xF\xE\xF\xBD\v"+
		"\xF\x3\xF\x3\xF\x3\x10\x3\x10\a\x10\xC3\n\x10\f\x10\xE\x10\xC6\v\x10\x3"+
		"\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\a\x11\xD1"+
		"\n\x11\f\x11\xE\x11\xD4\v\x11\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3\x13"+
		"\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\a\x13\xE1\n\x13\f\x13\xE\x13\xE4\v"+
		"\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3"+
		"\x15\x3\x15\x3\x15\x3\x15\a\x15\xF3\n\x15\f\x15\xE\x15\xF6\v\x15\x3\x16"+
		"\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\a\x16\xFE\n\x16\f\x16\xE\x16\x101"+
		"\v\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x5\x17\x108\n\x17\x3\x18\x3"+
		"\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x5"+
		"\x19\x115\n\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\a\x1A\x11B\n\x1A\f\x1A\xE"+
		"\x1A\x11E\v\x1A\x3\x1A\x5\x1A\x121\n\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3"+
		"\x1B\x3\x1B\x3\x1B\x3\x1B\x2\x2\x6 $(*\x1C\x2\x2\x4\x2\x6\x2\b\x2\n\x2"+
		"\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2"+
		"\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x2\x4\x3\x2 &\x3\x2"+
		"\x1B\x1F\x135\x2\x36\x3\x2\x2\x2\x4<\x3\x2\x2\x2\x6M\x3\x2\x2\x2\bO\x3"+
		"\x2\x2\x2\nT\x3\x2\x2\x2\fZ\x3\x2\x2\x2\xE\x61\x3\x2\x2\x2\x10r\x3\x2"+
		"\x2\x2\x12u\x3\x2\x2\x2\x14\x84\x3\x2\x2\x2\x16\x99\x3\x2\x2\x2\x18\x9E"+
		"\x3\x2\x2\x2\x1A\xAC\x3\x2\x2\x2\x1C\xBB\x3\x2\x2\x2\x1E\xC4\x3\x2\x2"+
		"\x2 \xC9\x3\x2\x2\x2\"\xD5\x3\x2\x2\x2$\xD7\x3\x2\x2\x2&\xE5\x3\x2\x2"+
		"\x2(\xE9\x3\x2\x2\x2*\xF7\x3\x2\x2\x2,\x107\x3\x2\x2\x2.\x109\x3\x2\x2"+
		"\x2\x30\x114\x3\x2\x2\x2\x32\x116\x3\x2\x2\x2\x34\x124\x3\x2\x2\x2\x36"+
		"\x37\x5\x4\x3\x2\x37\x38\a\x2\x2\x3\x38\x3\x3\x2\x2\x2\x39;\x5\x6\x4\x2"+
		":\x39\x3\x2\x2\x2;>\x3\x2\x2\x2<:\x3\x2\x2\x2<=\x3\x2\x2\x2=\x5\x3\x2"+
		"\x2\x2><\x3\x2\x2\x2?\x45\x5\b\x5\x2@\x45\x5\f\a\x2\x41\x45\x5\x16\f\x2"+
		"\x42\x45\x5\n\x6\x2\x43\x45\x5\x10\t\x2\x44?\x3\x2\x2\x2\x44@\x3\x2\x2"+
		"\x2\x44\x41\x3\x2\x2\x2\x44\x42\x3\x2\x2\x2\x44\x43\x3\x2\x2\x2\x45\x46"+
		"\x3\x2\x2\x2\x46G\a\x12\x2\x2GN\x3\x2\x2\x2HL\x5\x12\n\x2IL\x5\xE\b\x2"+
		"JL\x5\x14\v\x2KH\x3\x2\x2\x2KI\x3\x2\x2\x2KJ\x3\x2\x2\x2LN\x3\x2\x2\x2"+
		"M\x44\x3\x2\x2\x2MK\x3\x2\x2\x2N\a\x3\x2\x2\x2OP\a\b\x2\x2PQ\a\'\x2\x2"+
		"QR\a\x13\x2\x2RS\x5$\x13\x2S\t\x3\x2\x2\x2TU\a\'\x2\x2UV\a\x13\x2\x2V"+
		"X\x5$\x13\x2WY\x5&\x14\x2XW\x3\x2\x2\x2XY\x3\x2\x2\x2Y\v\x3\x2\x2\x2Z"+
		"[\a\'\x2\x2[]\a\x19\x2\x2\\^\x5\x1C\xF\x2]\\\x3\x2\x2\x2]^\x3\x2\x2\x2"+
		"^_\x3\x2\x2\x2_`\a\x1A\x2\x2`\r\x3\x2\x2\x2\x61\x62\a\b\x2\x2\x62\x63"+
		"\a\'\x2\x2\x63\x65\a\x19\x2\x2\x64\x66\x5\x1E\x10\x2\x65\x64\x3\x2\x2"+
		"\x2\x65\x66\x3\x2\x2\x2\x66g\x3\x2\x2\x2gh\a\x1A\x2\x2hi\a\x13\x2\x2i"+
		"m\a\x15\x2\x2jl\x5\x6\x4\x2kj\x3\x2\x2\x2lo\x3\x2\x2\x2mk\x3\x2\x2\x2"+
		"mn\x3\x2\x2\x2np\x3\x2\x2\x2om\x3\x2\x2\x2pq\a\x16\x2\x2q\xF\x3\x2\x2"+
		"\x2rs\a\x10\x2\x2st\x5$\x13\x2t\x11\x3\x2\x2\x2uv\a\t\x2\x2vw\a\x19\x2"+
		"\x2wx\a\'\x2\x2xy\a\n\x2\x2yz\a\'\x2\x2z{\a\x1A\x2\x2{\x7F\a\x15\x2\x2"+
		"|~\x5\x6\x4\x2}|\x3\x2\x2\x2~\x81\x3\x2\x2\x2\x7F}\x3\x2\x2\x2\x7F\x80"+
		"\x3\x2\x2\x2\x80\x82\x3\x2\x2\x2\x81\x7F\x3\x2\x2\x2\x82\x83\a\x16\x2"+
		"\x2\x83\x13\x3\x2\x2\x2\x84\x85\a\v\x2\x2\x85\x86\a\x19\x2\x2\x86\x87"+
		"\x5 \x11\x2\x87\x88\a\x1A\x2\x2\x88\x8C\a\x15\x2\x2\x89\x8B\x5\x6\x4\x2"+
		"\x8A\x89\x3\x2\x2\x2\x8B\x8E\x3\x2\x2\x2\x8C\x8A\x3\x2\x2\x2\x8C\x8D\x3"+
		"\x2\x2\x2\x8D\x8F\x3\x2\x2\x2\x8E\x8C\x3\x2\x2\x2\x8F\x93\a\x16\x2\x2"+
		"\x90\x92\x5\x18\r\x2\x91\x90\x3\x2\x2\x2\x92\x95\x3\x2\x2\x2\x93\x91\x3"+
		"\x2\x2\x2\x93\x94\x3\x2\x2\x2\x94\x97\x3\x2\x2\x2\x95\x93\x3\x2\x2\x2"+
		"\x96\x98\x5\x1A\xE\x2\x97\x96\x3\x2\x2\x2\x97\x98\x3\x2\x2\x2\x98\x15"+
		"\x3\x2\x2\x2\x99\x9A\a\x11\x2\x2\x9A\x9C\x5$\x13\x2\x9B\x9D\x5&\x14\x2"+
		"\x9C\x9B\x3\x2\x2\x2\x9C\x9D\x3\x2\x2\x2\x9D\x17\x3\x2\x2\x2\x9E\x9F\a"+
		"\xE\x2\x2\x9F\xA0\a\v\x2\x2\xA0\xA1\a\x19\x2\x2\xA1\xA2\x5 \x11\x2\xA2"+
		"\xA3\a\x1A\x2\x2\xA3\xA7\a\x15\x2\x2\xA4\xA6\x5\x6\x4\x2\xA5\xA4\x3\x2"+
		"\x2\x2\xA6\xA9\x3\x2\x2\x2\xA7\xA5\x3\x2\x2\x2\xA7\xA8\x3\x2\x2\x2\xA8"+
		"\xAA\x3\x2\x2\x2\xA9\xA7\x3\x2\x2\x2\xAA\xAB\a\x16\x2\x2\xAB\x19\x3\x2"+
		"\x2\x2\xAC\xAD\a\xE\x2\x2\xAD\xB1\a\x15\x2\x2\xAE\xB0\x5\x6\x4\x2\xAF"+
		"\xAE\x3\x2\x2\x2\xB0\xB3\x3\x2\x2\x2\xB1\xAF\x3\x2\x2\x2\xB1\xB2\x3\x2"+
		"\x2\x2\xB2\xB4\x3\x2\x2\x2\xB3\xB1\x3\x2\x2\x2\xB4\xB5\a\x16\x2\x2\xB5"+
		"\x1B\x3\x2\x2\x2\xB6\xB7\x5$\x13\x2\xB7\xB8\a\x14\x2\x2\xB8\xBA\x3\x2"+
		"\x2\x2\xB9\xB6\x3\x2\x2\x2\xBA\xBD\x3\x2\x2\x2\xBB\xB9\x3\x2\x2\x2\xBB"+
		"\xBC\x3\x2\x2\x2\xBC\xBE\x3\x2\x2\x2\xBD\xBB\x3\x2\x2\x2\xBE\xBF\x5$\x13"+
		"\x2\xBF\x1D\x3\x2\x2\x2\xC0\xC1\a\'\x2\x2\xC1\xC3\a\x14\x2\x2\xC2\xC0"+
		"\x3\x2\x2\x2\xC3\xC6\x3\x2\x2\x2\xC4\xC2\x3\x2\x2\x2\xC4\xC5\x3\x2\x2"+
		"\x2\xC5\xC7\x3\x2\x2\x2\xC6\xC4\x3\x2\x2\x2\xC7\xC8\a\'\x2\x2\xC8\x1F"+
		"\x3\x2\x2\x2\xC9\xCA\b\x11\x1\x2\xCA\xCB\x5$\x13\x2\xCB\xD2\x3\x2\x2\x2"+
		"\xCC\xCD\f\x4\x2\x2\xCD\xCE\x5\"\x12\x2\xCE\xCF\x5 \x11\x5\xCF\xD1\x3"+
		"\x2\x2\x2\xD0\xCC\x3\x2\x2\x2\xD1\xD4\x3\x2\x2\x2\xD2\xD0\x3\x2\x2\x2"+
		"\xD2\xD3\x3\x2\x2\x2\xD3!\x3\x2\x2\x2\xD4\xD2\x3\x2\x2\x2\xD5\xD6\t\x2"+
		"\x2\x2\xD6#\x3\x2\x2\x2\xD7\xD8\b\x13\x1\x2\xD8\xD9\x5(\x15\x2\xD9\xE2"+
		"\x3\x2\x2\x2\xDA\xDB\f\x5\x2\x2\xDB\xDC\a\x1B\x2\x2\xDC\xE1\x5(\x15\x2"+
		"\xDD\xDE\f\x4\x2\x2\xDE\xDF\a\x1C\x2\x2\xDF\xE1\x5(\x15\x2\xE0\xDA\x3"+
		"\x2\x2\x2\xE0\xDD\x3\x2\x2\x2\xE1\xE4\x3\x2\x2\x2\xE2\xE0\x3\x2\x2\x2"+
		"\xE2\xE3\x3\x2\x2\x2\xE3%\x3\x2\x2\x2\xE4\xE2\x3\x2\x2\x2\xE5\xE6\a\f"+
		"\x2\x2\xE6\xE7\x5$\x13\x2\xE7\xE8\a\r\x2\x2\xE8\'\x3\x2\x2\x2\xE9\xEA"+
		"\b\x15\x1\x2\xEA\xEB\x5*\x16\x2\xEB\xF4\x3\x2\x2\x2\xEC\xED\f\x5\x2\x2"+
		"\xED\xEE\a\x1D\x2\x2\xEE\xF3\x5*\x16\x2\xEF\xF0\f\x4\x2\x2\xF0\xF1\a\x1E"+
		"\x2\x2\xF1\xF3\x5*\x16\x2\xF2\xEC\x3\x2\x2\x2\xF2\xEF\x3\x2\x2\x2\xF3"+
		"\xF6\x3\x2\x2\x2\xF4\xF2\x3\x2\x2\x2\xF4\xF5\x3\x2\x2\x2\xF5)\x3\x2\x2"+
		"\x2\xF6\xF4\x3\x2\x2\x2\xF7\xF8\b\x16\x1\x2\xF8\xF9\x5,\x17\x2\xF9\xFF"+
		"\x3\x2\x2\x2\xFA\xFB\f\x4\x2\x2\xFB\xFC\a\x1F\x2\x2\xFC\xFE\x5,\x17\x2"+
		"\xFD\xFA\x3\x2\x2\x2\xFE\x101\x3\x2\x2\x2\xFF\xFD\x3\x2\x2\x2\xFF\x100"+
		"\x3\x2\x2\x2\x100+\x3\x2\x2\x2\x101\xFF\x3\x2\x2\x2\x102\x108\x5\x30\x19"+
		"\x2\x103\x104\a\x19\x2\x2\x104\x105\x5$\x13\x2\x105\x106\a\x1A\x2\x2\x106"+
		"\x108\x3\x2\x2\x2\x107\x102\x3\x2\x2\x2\x107\x103\x3\x2\x2\x2\x108-\x3"+
		"\x2\x2\x2\x109\x10A\t\x3\x2\x2\x10A/\x3\x2\x2\x2\x10B\x115\x5\f\a\x2\x10C"+
		"\x115\a\'\x2\x2\x10D\x115\a\x3\x2\x2\x10E\x115\a\x4\x2\x2\x10F\x115\a"+
		"\x5\x2\x2\x110\x115\a\x6\x2\x2\x111\x115\a\a\x2\x2\x112\x115\x5\x32\x1A"+
		"\x2\x113\x115\x5\x34\x1B\x2\x114\x10B\x3\x2\x2\x2\x114\x10C\x3\x2\x2\x2"+
		"\x114\x10D\x3\x2\x2\x2\x114\x10E\x3\x2\x2\x2\x114\x10F\x3\x2\x2\x2\x114"+
		"\x110\x3\x2\x2\x2\x114\x111\x3\x2\x2\x2\x114\x112\x3\x2\x2\x2\x114\x113"+
		"\x3\x2\x2\x2\x115\x31\x3\x2\x2\x2\x116\x120\a\x17\x2\x2\x117\x118\x5\x30"+
		"\x19\x2\x118\x119\a\x14\x2\x2\x119\x11B\x3\x2\x2\x2\x11A\x117\x3\x2\x2"+
		"\x2\x11B\x11E\x3\x2\x2\x2\x11C\x11A\x3\x2\x2\x2\x11C\x11D\x3\x2\x2\x2"+
		"\x11D\x11F\x3\x2\x2\x2\x11E\x11C\x3\x2\x2\x2\x11F\x121\x5\x30\x19\x2\x120"+
		"\x11C\x3\x2\x2\x2\x120\x121\x3\x2\x2\x2\x121\x122\x3\x2\x2\x2\x122\x123"+
		"\a\x18\x2\x2\x123\x33\x3\x2\x2\x2\x124\x125\a\'\x2\x2\x125\x126\a\x17"+
		"\x2\x2\x126\x127\x5\x1C\xF\x2\x127\x128\a\x18\x2\x2\x128\x35\x3\x2\x2"+
		"\x2\x1D<\x44KMX]\x65m\x7F\x8C\x93\x97\x9C\xA7\xB1\xBB\xC4\xD2\xE0\xE2"+
		"\xF2\xF4\xFF\x107\x114\x11C\x120";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Algo
