//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\Files\Programming\GitHub\algo\Algo\Parsing\algo.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Algo {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class algoParser : Parser {
	public const int
		INTEGER=1, FLOAT=2, BOOLEAN=3, STRING=4, RATIONAL=5, NULL=6, LET_SYM=7, 
		FOR_SYM=8, FOREACH_SYM=9, ADD_SYM=10, BREAK_SYM=11, CONTINUE_SYM=12, AT_SYM=13, 
		REMOVE_SYM=14, FROM_SYM=15, WHILE_SYM=16, IN_SYM=17, IF_SYM=18, UP_SYM=19, 
		TO_SYM=20, AS_SYM=21, ENUM_SYM=22, LIB_SYM=23, SIG_FIG_SYM=24, OBJ_SYM=25, 
		ELSE_SYM=26, IMPORT_SYM=27, RETURN_SYM=28, PRINT_SYM=29, DISREGARD_SYM=30, 
		EXTERNAL_SYM=31, ENDLINE=32, EQUALS=33, COMMA=34, LBRACE=35, RBRACE=36, 
		LSQBR=37, RSQBR=38, INVERT_SYM=39, STREAMING_SYM=40, LBRACKET=41, RBRACKET=42, 
		ADD_OP=43, TAKE_OP=44, MUL_OP=45, DIV_OP=46, POW_OP=47, MOD_OP=48, POINT=49, 
		ADDFROM_OP=50, TAKEFROM_OP=51, DIVFROM_OP=52, MULFROM_OP=53, ADD_PFOP=54, 
		TAKE_PFOP=55, BIN_OR=56, BIN_AND=57, BIN_NET=58, BIN_EQUALS=59, GRTR_THAN=60, 
		LESS_THAN=61, GRTR_THAN_ET=62, LESS_THAN_ET=63, IDENTIFIER=64, COMMENT=65, 
		WS=66, UNKNOWN_SYMBOL=67;
	public const int
		RULE_compileUnit = 0, RULE_block = 1, RULE_statement = 2, RULE_stat_define = 3, 
		RULE_stat_setvar = 4, RULE_stat_setvar_op = 5, RULE_stat_setvar_postfix = 6, 
		RULE_stat_deletevar = 7, RULE_stat_enumDef = 8, RULE_stat_functionCall = 9, 
		RULE_stat_functionDef = 10, RULE_stat_loadFuncExt = 11, RULE_stat_return = 12, 
		RULE_stat_forLoop = 13, RULE_stat_whileLoop = 14, RULE_stat_if = 15, RULE_stat_print = 16, 
		RULE_stat_library = 17, RULE_stat_import = 18, RULE_stat_list_add = 19, 
		RULE_stat_list_remove = 20, RULE_stat_break = 21, RULE_stat_continue = 22, 
		RULE_stat_elif = 23, RULE_stat_else = 24, RULE_literal_params = 25, RULE_abstract_params = 26, 
		RULE_check = 27, RULE_checkfrag = 28, RULE_expr = 29, RULE_rounding_expr = 30, 
		RULE_term = 31, RULE_factor = 32, RULE_sub = 33, RULE_operator = 34, RULE_selfmod_op = 35, 
		RULE_postfix_op = 36, RULE_value = 37, RULE_obj_access = 38, RULE_array = 39, 
		RULE_array_access = 40, RULE_object = 41, RULE_obj_child_definitions = 42, 
		RULE_obj_vardefine = 43, RULE_obj_funcdefine = 44, RULE_obj_externdefine = 45;
	public static readonly string[] ruleNames = {
		"compileUnit", "block", "statement", "stat_define", "stat_setvar", "stat_setvar_op", 
		"stat_setvar_postfix", "stat_deletevar", "stat_enumDef", "stat_functionCall", 
		"stat_functionDef", "stat_loadFuncExt", "stat_return", "stat_forLoop", 
		"stat_whileLoop", "stat_if", "stat_print", "stat_library", "stat_import", 
		"stat_list_add", "stat_list_remove", "stat_break", "stat_continue", "stat_elif", 
		"stat_else", "literal_params", "abstract_params", "check", "checkfrag", 
		"expr", "rounding_expr", "term", "factor", "sub", "operator", "selfmod_op", 
		"postfix_op", "value", "obj_access", "array", "array_access", "object", 
		"obj_child_definitions", "obj_vardefine", "obj_funcdefine", "obj_externdefine"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'null'", "'let'", "'for'", "'foreach'", 
		"'add'", "'break'", "'continue'", "'at'", "'remove'", "'from'", "'while'", 
		"'in'", "'if'", "'up'", "'to'", "'as'", "'enum'", "'library'", "'sf'", 
		"'object'", "'else'", "'import'", "'return'", "'print '", "'disregard'", 
		"'external'", "';'", "'='", "','", "'{'", "'}'", "'['", "']'", "'!'", 
		"'<-'", "'('", "')'", "'+'", "'-'", "'*'", "'/'", "'^'", "'%'", "'.'", 
		"'+='", "'-='", "'/='", "'*='", "'++'", "'--'", "'|'", "'&'", "'!='", 
		"'=='", "'>'", "'<'", "'>='", "'<='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INTEGER", "FLOAT", "BOOLEAN", "STRING", "RATIONAL", "NULL", "LET_SYM", 
		"FOR_SYM", "FOREACH_SYM", "ADD_SYM", "BREAK_SYM", "CONTINUE_SYM", "AT_SYM", 
		"REMOVE_SYM", "FROM_SYM", "WHILE_SYM", "IN_SYM", "IF_SYM", "UP_SYM", "TO_SYM", 
		"AS_SYM", "ENUM_SYM", "LIB_SYM", "SIG_FIG_SYM", "OBJ_SYM", "ELSE_SYM", 
		"IMPORT_SYM", "RETURN_SYM", "PRINT_SYM", "DISREGARD_SYM", "EXTERNAL_SYM", 
		"ENDLINE", "EQUALS", "COMMA", "LBRACE", "RBRACE", "LSQBR", "RSQBR", "INVERT_SYM", 
		"STREAMING_SYM", "LBRACKET", "RBRACKET", "ADD_OP", "TAKE_OP", "MUL_OP", 
		"DIV_OP", "POW_OP", "MOD_OP", "POINT", "ADDFROM_OP", "TAKEFROM_OP", "DIVFROM_OP", 
		"MULFROM_OP", "ADD_PFOP", "TAKE_PFOP", "BIN_OR", "BIN_AND", "BIN_NET", 
		"BIN_EQUALS", "GRTR_THAN", "LESS_THAN", "GRTR_THAN_ET", "LESS_THAN_ET", 
		"IDENTIFIER", "COMMENT", "WS", "UNKNOWN_SYMBOL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "algo.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public algoParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompileUnitContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(algoParser.Eof, 0); }
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92; block();
			State = 93; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (LET_SYM - 7)) | (1L << (FOR_SYM - 7)) | (1L << (FOREACH_SYM - 7)) | (1L << (ADD_SYM - 7)) | (1L << (BREAK_SYM - 7)) | (1L << (CONTINUE_SYM - 7)) | (1L << (REMOVE_SYM - 7)) | (1L << (WHILE_SYM - 7)) | (1L << (IF_SYM - 7)) | (1L << (LIB_SYM - 7)) | (1L << (IMPORT_SYM - 7)) | (1L << (RETURN_SYM - 7)) | (1L << (PRINT_SYM - 7)) | (1L << (DISREGARD_SYM - 7)) | (1L << (EXTERNAL_SYM - 7)) | (1L << (LSQBR - 7)) | (1L << (IDENTIFIER - 7)))) != 0)) {
				{
				{
				State = 95; statement();
				}
				}
				State = 100;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public ITerminalNode ENDLINE() { return GetToken(algoParser.ENDLINE, 0); }
		public Stat_defineContext stat_define() {
			return GetRuleContext<Stat_defineContext>(0);
		}
		public Stat_enumDefContext stat_enumDef() {
			return GetRuleContext<Stat_enumDefContext>(0);
		}
		public Stat_functionCallContext stat_functionCall() {
			return GetRuleContext<Stat_functionCallContext>(0);
		}
		public Stat_printContext stat_print() {
			return GetRuleContext<Stat_printContext>(0);
		}
		public Stat_setvarContext stat_setvar() {
			return GetRuleContext<Stat_setvarContext>(0);
		}
		public Stat_setvar_opContext stat_setvar_op() {
			return GetRuleContext<Stat_setvar_opContext>(0);
		}
		public Stat_setvar_postfixContext stat_setvar_postfix() {
			return GetRuleContext<Stat_setvar_postfixContext>(0);
		}
		public Stat_returnContext stat_return() {
			return GetRuleContext<Stat_returnContext>(0);
		}
		public Stat_deletevarContext stat_deletevar() {
			return GetRuleContext<Stat_deletevarContext>(0);
		}
		public Stat_importContext stat_import() {
			return GetRuleContext<Stat_importContext>(0);
		}
		public Stat_loadFuncExtContext stat_loadFuncExt() {
			return GetRuleContext<Stat_loadFuncExtContext>(0);
		}
		public Stat_list_addContext stat_list_add() {
			return GetRuleContext<Stat_list_addContext>(0);
		}
		public Stat_list_removeContext stat_list_remove() {
			return GetRuleContext<Stat_list_removeContext>(0);
		}
		public Stat_breakContext stat_break() {
			return GetRuleContext<Stat_breakContext>(0);
		}
		public Stat_continueContext stat_continue() {
			return GetRuleContext<Stat_continueContext>(0);
		}
		public Stat_forLoopContext stat_forLoop() {
			return GetRuleContext<Stat_forLoopContext>(0);
		}
		public Stat_functionDefContext stat_functionDef() {
			return GetRuleContext<Stat_functionDefContext>(0);
		}
		public Stat_ifContext stat_if() {
			return GetRuleContext<Stat_ifContext>(0);
		}
		public Stat_libraryContext stat_library() {
			return GetRuleContext<Stat_libraryContext>(0);
		}
		public Stat_whileLoopContext stat_whileLoop() {
			return GetRuleContext<Stat_whileLoopContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 127;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 116;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
				case 1:
					{
					State = 101; stat_define();
					}
					break;

				case 2:
					{
					State = 102; stat_enumDef();
					}
					break;

				case 3:
					{
					State = 103; stat_functionCall();
					}
					break;

				case 4:
					{
					State = 104; stat_print();
					}
					break;

				case 5:
					{
					State = 105; stat_setvar();
					}
					break;

				case 6:
					{
					State = 106; stat_setvar_op();
					}
					break;

				case 7:
					{
					State = 107; stat_setvar_postfix();
					}
					break;

				case 8:
					{
					State = 108; stat_return();
					}
					break;

				case 9:
					{
					State = 109; stat_deletevar();
					}
					break;

				case 10:
					{
					State = 110; stat_import();
					}
					break;

				case 11:
					{
					State = 111; stat_loadFuncExt();
					}
					break;

				case 12:
					{
					State = 112; stat_list_add();
					}
					break;

				case 13:
					{
					State = 113; stat_list_remove();
					}
					break;

				case 14:
					{
					State = 114; stat_break();
					}
					break;

				case 15:
					{
					State = 115; stat_continue();
					}
					break;
				}
				State = 118; Match(ENDLINE);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 125;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case FOR_SYM:
				case FOREACH_SYM:
					{
					State = 120; stat_forLoop();
					}
					break;
				case LET_SYM:
					{
					State = 121; stat_functionDef();
					}
					break;
				case IF_SYM:
					{
					State = 122; stat_if();
					}
					break;
				case LIB_SYM:
					{
					State = 123; stat_library();
					}
					break;
				case WHILE_SYM:
					{
					State = 124; stat_whileLoop();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_defineContext : ParserRuleContext {
		public ITerminalNode LET_SYM() { return GetToken(algoParser.LET_SYM, 0); }
		public ITerminalNode EQUALS() { return GetToken(algoParser.EQUALS, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public Obj_accessContext obj_access() {
			return GetRuleContext<Obj_accessContext>(0);
		}
		public Stat_defineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_define; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_define(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_define(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_define(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_defineContext stat_define() {
		Stat_defineContext _localctx = new Stat_defineContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_stat_define);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129; Match(LET_SYM);
			State = 132;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				{
				State = 130; Match(IDENTIFIER);
				}
				break;

			case 2:
				{
				State = 131; obj_access();
				}
				break;
			}
			State = 134; Match(EQUALS);
			State = 135; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_setvarContext : ParserRuleContext {
		public ITerminalNode EQUALS() { return GetToken(algoParser.EQUALS, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public Obj_accessContext obj_access() {
			return GetRuleContext<Obj_accessContext>(0);
		}
		public Array_accessContext array_access() {
			return GetRuleContext<Array_accessContext>(0);
		}
		public Rounding_exprContext rounding_expr() {
			return GetRuleContext<Rounding_exprContext>(0);
		}
		public Stat_setvarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_setvar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_setvar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_setvar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_setvar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_setvarContext stat_setvar() {
		Stat_setvarContext _localctx = new Stat_setvarContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_stat_setvar);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				{
				State = 137; Match(IDENTIFIER);
				}
				break;

			case 2:
				{
				State = 138; obj_access();
				}
				break;

			case 3:
				{
				State = 139; array_access();
				}
				break;
			}
			State = 142; Match(EQUALS);
			State = 143; expr(0);
			State = 145;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==TO_SYM) {
				{
				State = 144; rounding_expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_setvar_opContext : ParserRuleContext {
		public Selfmod_opContext selfmod_op() {
			return GetRuleContext<Selfmod_opContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public Obj_accessContext obj_access() {
			return GetRuleContext<Obj_accessContext>(0);
		}
		public Array_accessContext array_access() {
			return GetRuleContext<Array_accessContext>(0);
		}
		public Stat_setvar_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_setvar_op; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_setvar_op(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_setvar_op(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_setvar_op(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_setvar_opContext stat_setvar_op() {
		Stat_setvar_opContext _localctx = new Stat_setvar_opContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_stat_setvar_op);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				{
				State = 147; Match(IDENTIFIER);
				}
				break;

			case 2:
				{
				State = 148; obj_access();
				}
				break;

			case 3:
				{
				State = 149; array_access();
				}
				break;
			}
			State = 152; selfmod_op();
			State = 153; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_setvar_postfixContext : ParserRuleContext {
		public Postfix_opContext postfix_op() {
			return GetRuleContext<Postfix_opContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public Obj_accessContext obj_access() {
			return GetRuleContext<Obj_accessContext>(0);
		}
		public Array_accessContext array_access() {
			return GetRuleContext<Array_accessContext>(0);
		}
		public Stat_setvar_postfixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_setvar_postfix; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_setvar_postfix(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_setvar_postfix(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_setvar_postfix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_setvar_postfixContext stat_setvar_postfix() {
		Stat_setvar_postfixContext _localctx = new Stat_setvar_postfixContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_stat_setvar_postfix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				{
				State = 155; Match(IDENTIFIER);
				}
				break;

			case 2:
				{
				State = 156; obj_access();
				}
				break;

			case 3:
				{
				State = 157; array_access();
				}
				break;
			}
			State = 160; postfix_op();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_deletevarContext : ParserRuleContext {
		public ITerminalNode DISREGARD_SYM() { return GetToken(algoParser.DISREGARD_SYM, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public Obj_accessContext obj_access() {
			return GetRuleContext<Obj_accessContext>(0);
		}
		public ITerminalNode MUL_OP() { return GetToken(algoParser.MUL_OP, 0); }
		public Stat_deletevarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_deletevar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_deletevar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_deletevar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_deletevar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_deletevarContext stat_deletevar() {
		Stat_deletevarContext _localctx = new Stat_deletevarContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_stat_deletevar);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162; Match(DISREGARD_SYM);
			State = 166;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				{
				State = 163; Match(IDENTIFIER);
				}
				break;

			case 2:
				{
				State = 164; obj_access();
				}
				break;

			case 3:
				{
				State = 165; Match(MUL_OP);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_enumDefContext : ParserRuleContext {
		public ITerminalNode LET_SYM() { return GetToken(algoParser.LET_SYM, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public ITerminalNode EQUALS() { return GetToken(algoParser.EQUALS, 0); }
		public ITerminalNode ENUM_SYM() { return GetToken(algoParser.ENUM_SYM, 0); }
		public ITerminalNode LBRACE() { return GetToken(algoParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(algoParser.RBRACE, 0); }
		public Abstract_paramsContext abstract_params() {
			return GetRuleContext<Abstract_paramsContext>(0);
		}
		public Stat_enumDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_enumDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_enumDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_enumDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_enumDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_enumDefContext stat_enumDef() {
		Stat_enumDefContext _localctx = new Stat_enumDefContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_stat_enumDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168; Match(LET_SYM);
			State = 169; Match(IDENTIFIER);
			State = 170; Match(EQUALS);
			State = 171; Match(ENUM_SYM);
			State = 172; Match(LBRACE);
			State = 174;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IDENTIFIER) {
				{
				State = 173; abstract_params();
				}
			}

			State = 176; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_functionCallContext : ParserRuleContext {
		public ITerminalNode LBRACKET() { return GetToken(algoParser.LBRACKET, 0); }
		public ITerminalNode RBRACKET() { return GetToken(algoParser.RBRACKET, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public Obj_accessContext obj_access() {
			return GetRuleContext<Obj_accessContext>(0);
		}
		public Literal_paramsContext literal_params() {
			return GetRuleContext<Literal_paramsContext>(0);
		}
		public Stat_functionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_functionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_functionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_functionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_functionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_functionCallContext stat_functionCall() {
		Stat_functionCallContext _localctx = new Stat_functionCallContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_stat_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
			case 1:
				{
				State = 178; Match(IDENTIFIER);
				}
				break;

			case 2:
				{
				State = 179; obj_access();
				}
				break;
			}
			State = 182; Match(LBRACKET);
			State = 184;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & ((1L << (INTEGER - 1)) | (1L << (FLOAT - 1)) | (1L << (BOOLEAN - 1)) | (1L << (STRING - 1)) | (1L << (RATIONAL - 1)) | (1L << (NULL - 1)) | (1L << (OBJ_SYM - 1)) | (1L << (LSQBR - 1)) | (1L << (LBRACKET - 1)) | (1L << (IDENTIFIER - 1)))) != 0)) {
				{
				State = 183; literal_params();
				}
			}

			State = 186; Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_functionDefContext : ParserRuleContext {
		public ITerminalNode LET_SYM() { return GetToken(algoParser.LET_SYM, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public ITerminalNode LBRACKET() { return GetToken(algoParser.LBRACKET, 0); }
		public ITerminalNode RBRACKET() { return GetToken(algoParser.RBRACKET, 0); }
		public ITerminalNode EQUALS() { return GetToken(algoParser.EQUALS, 0); }
		public ITerminalNode LBRACE() { return GetToken(algoParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(algoParser.RBRACE, 0); }
		public Abstract_paramsContext abstract_params() {
			return GetRuleContext<Abstract_paramsContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Stat_functionDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_functionDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_functionDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_functionDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_functionDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_functionDefContext stat_functionDef() {
		Stat_functionDefContext _localctx = new Stat_functionDefContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_stat_functionDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188; Match(LET_SYM);
			State = 189; Match(IDENTIFIER);
			State = 190; Match(LBRACKET);
			State = 192;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IDENTIFIER) {
				{
				State = 191; abstract_params();
				}
			}

			State = 194; Match(RBRACKET);
			State = 195; Match(EQUALS);
			State = 196; Match(LBRACE);
			State = 200;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (LET_SYM - 7)) | (1L << (FOR_SYM - 7)) | (1L << (FOREACH_SYM - 7)) | (1L << (ADD_SYM - 7)) | (1L << (BREAK_SYM - 7)) | (1L << (CONTINUE_SYM - 7)) | (1L << (REMOVE_SYM - 7)) | (1L << (WHILE_SYM - 7)) | (1L << (IF_SYM - 7)) | (1L << (LIB_SYM - 7)) | (1L << (IMPORT_SYM - 7)) | (1L << (RETURN_SYM - 7)) | (1L << (PRINT_SYM - 7)) | (1L << (DISREGARD_SYM - 7)) | (1L << (EXTERNAL_SYM - 7)) | (1L << (LSQBR - 7)) | (1L << (IDENTIFIER - 7)))) != 0)) {
				{
				{
				State = 197; statement();
				}
				}
				State = 202;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 203; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_loadFuncExtContext : ParserRuleContext {
		public ITerminalNode EXTERNAL_SYM() { return GetToken(algoParser.EXTERNAL_SYM, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public ITerminalNode STREAMING_SYM() { return GetToken(algoParser.STREAMING_SYM, 0); }
		public Obj_accessContext obj_access() {
			return GetRuleContext<Obj_accessContext>(0);
		}
		public Stat_loadFuncExtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_loadFuncExt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_loadFuncExt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_loadFuncExt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_loadFuncExt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_loadFuncExtContext stat_loadFuncExt() {
		Stat_loadFuncExtContext _localctx = new Stat_loadFuncExtContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_stat_loadFuncExt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205; Match(EXTERNAL_SYM);
			State = 206; Match(IDENTIFIER);
			State = 207; Match(STREAMING_SYM);
			State = 208; obj_access();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_returnContext : ParserRuleContext {
		public ITerminalNode RETURN_SYM() { return GetToken(algoParser.RETURN_SYM, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Stat_returnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_return; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_return(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_return(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_return(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_returnContext stat_return() {
		Stat_returnContext _localctx = new Stat_returnContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_stat_return);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210; Match(RETURN_SYM);
			State = 212;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & ((1L << (INTEGER - 1)) | (1L << (FLOAT - 1)) | (1L << (BOOLEAN - 1)) | (1L << (STRING - 1)) | (1L << (RATIONAL - 1)) | (1L << (NULL - 1)) | (1L << (OBJ_SYM - 1)) | (1L << (LSQBR - 1)) | (1L << (LBRACKET - 1)) | (1L << (IDENTIFIER - 1)))) != 0)) {
				{
				State = 211; expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_forLoopContext : ParserRuleContext {
		public ITerminalNode LBRACKET() { return GetToken(algoParser.LBRACKET, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public ITerminalNode RBRACKET() { return GetToken(algoParser.RBRACKET, 0); }
		public ITerminalNode LBRACE() { return GetToken(algoParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(algoParser.RBRACE, 0); }
		public ITerminalNode FOR_SYM() { return GetToken(algoParser.FOR_SYM, 0); }
		public ITerminalNode FOREACH_SYM() { return GetToken(algoParser.FOREACH_SYM, 0); }
		public ITerminalNode UP_SYM() { return GetToken(algoParser.UP_SYM, 0); }
		public ITerminalNode TO_SYM() { return GetToken(algoParser.TO_SYM, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode IN_SYM() { return GetToken(algoParser.IN_SYM, 0); }
		public Stat_forLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_forLoop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_forLoop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_forLoop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_forLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_forLoopContext stat_forLoop() {
		Stat_forLoopContext _localctx = new Stat_forLoopContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_stat_forLoop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			_la = _input.La(1);
			if ( !(_la==FOR_SYM || _la==FOREACH_SYM) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 215; Match(LBRACKET);
			State = 216; Match(IDENTIFIER);
			State = 222;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case IN_SYM:
				{
				{
				State = 217; Match(IN_SYM);
				State = 218; expr(0);
				}
				}
				break;
			case UP_SYM:
				{
				State = 219; Match(UP_SYM);
				State = 220; Match(TO_SYM);
				State = 221; expr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 224; Match(RBRACKET);
			State = 225; Match(LBRACE);
			State = 229;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (LET_SYM - 7)) | (1L << (FOR_SYM - 7)) | (1L << (FOREACH_SYM - 7)) | (1L << (ADD_SYM - 7)) | (1L << (BREAK_SYM - 7)) | (1L << (CONTINUE_SYM - 7)) | (1L << (REMOVE_SYM - 7)) | (1L << (WHILE_SYM - 7)) | (1L << (IF_SYM - 7)) | (1L << (LIB_SYM - 7)) | (1L << (IMPORT_SYM - 7)) | (1L << (RETURN_SYM - 7)) | (1L << (PRINT_SYM - 7)) | (1L << (DISREGARD_SYM - 7)) | (1L << (EXTERNAL_SYM - 7)) | (1L << (LSQBR - 7)) | (1L << (IDENTIFIER - 7)))) != 0)) {
				{
				{
				State = 226; statement();
				}
				}
				State = 231;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 232; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_whileLoopContext : ParserRuleContext {
		public ITerminalNode WHILE_SYM() { return GetToken(algoParser.WHILE_SYM, 0); }
		public ITerminalNode LBRACKET() { return GetToken(algoParser.LBRACKET, 0); }
		public CheckContext check() {
			return GetRuleContext<CheckContext>(0);
		}
		public ITerminalNode RBRACKET() { return GetToken(algoParser.RBRACKET, 0); }
		public ITerminalNode LBRACE() { return GetToken(algoParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(algoParser.RBRACE, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Stat_whileLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_whileLoop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_whileLoop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_whileLoop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_whileLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_whileLoopContext stat_whileLoop() {
		Stat_whileLoopContext _localctx = new Stat_whileLoopContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_stat_whileLoop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234; Match(WHILE_SYM);
			State = 235; Match(LBRACKET);
			State = 236; check(0);
			State = 237; Match(RBRACKET);
			State = 238; Match(LBRACE);
			State = 242;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (LET_SYM - 7)) | (1L << (FOR_SYM - 7)) | (1L << (FOREACH_SYM - 7)) | (1L << (ADD_SYM - 7)) | (1L << (BREAK_SYM - 7)) | (1L << (CONTINUE_SYM - 7)) | (1L << (REMOVE_SYM - 7)) | (1L << (WHILE_SYM - 7)) | (1L << (IF_SYM - 7)) | (1L << (LIB_SYM - 7)) | (1L << (IMPORT_SYM - 7)) | (1L << (RETURN_SYM - 7)) | (1L << (PRINT_SYM - 7)) | (1L << (DISREGARD_SYM - 7)) | (1L << (EXTERNAL_SYM - 7)) | (1L << (LSQBR - 7)) | (1L << (IDENTIFIER - 7)))) != 0)) {
				{
				{
				State = 239; statement();
				}
				}
				State = 244;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 245; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_ifContext : ParserRuleContext {
		public ITerminalNode IF_SYM() { return GetToken(algoParser.IF_SYM, 0); }
		public ITerminalNode LBRACKET() { return GetToken(algoParser.LBRACKET, 0); }
		public CheckContext check() {
			return GetRuleContext<CheckContext>(0);
		}
		public ITerminalNode RBRACKET() { return GetToken(algoParser.RBRACKET, 0); }
		public ITerminalNode LBRACE() { return GetToken(algoParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(algoParser.RBRACE, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Stat_elifContext[] stat_elif() {
			return GetRuleContexts<Stat_elifContext>();
		}
		public Stat_elifContext stat_elif(int i) {
			return GetRuleContext<Stat_elifContext>(i);
		}
		public Stat_elseContext stat_else() {
			return GetRuleContext<Stat_elseContext>(0);
		}
		public Stat_ifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_if; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_if(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_if(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_if(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_ifContext stat_if() {
		Stat_ifContext _localctx = new Stat_ifContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_stat_if);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 247; Match(IF_SYM);
			State = 248; Match(LBRACKET);
			State = 249; check(0);
			State = 250; Match(RBRACKET);
			State = 251; Match(LBRACE);
			State = 255;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (LET_SYM - 7)) | (1L << (FOR_SYM - 7)) | (1L << (FOREACH_SYM - 7)) | (1L << (ADD_SYM - 7)) | (1L << (BREAK_SYM - 7)) | (1L << (CONTINUE_SYM - 7)) | (1L << (REMOVE_SYM - 7)) | (1L << (WHILE_SYM - 7)) | (1L << (IF_SYM - 7)) | (1L << (LIB_SYM - 7)) | (1L << (IMPORT_SYM - 7)) | (1L << (RETURN_SYM - 7)) | (1L << (PRINT_SYM - 7)) | (1L << (DISREGARD_SYM - 7)) | (1L << (EXTERNAL_SYM - 7)) | (1L << (LSQBR - 7)) | (1L << (IDENTIFIER - 7)))) != 0)) {
				{
				{
				State = 252; statement();
				}
				}
				State = 257;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 258; Match(RBRACE);
			State = 262;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,20,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 259; stat_elif();
					}
					} 
				}
				State = 264;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,20,_ctx);
			}
			State = 266;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ELSE_SYM) {
				{
				State = 265; stat_else();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_printContext : ParserRuleContext {
		public ITerminalNode PRINT_SYM() { return GetToken(algoParser.PRINT_SYM, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Rounding_exprContext rounding_expr() {
			return GetRuleContext<Rounding_exprContext>(0);
		}
		public Stat_printContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_print; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_print(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_print(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_print(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_printContext stat_print() {
		Stat_printContext _localctx = new Stat_printContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_stat_print);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268; Match(PRINT_SYM);
			State = 269; expr(0);
			State = 271;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==TO_SYM) {
				{
				State = 270; rounding_expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_libraryContext : ParserRuleContext {
		public ITerminalNode LIB_SYM() { return GetToken(algoParser.LIB_SYM, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public ITerminalNode LBRACE() { return GetToken(algoParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(algoParser.RBRACE, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Stat_libraryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_library; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_library(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_library(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_library(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_libraryContext stat_library() {
		Stat_libraryContext _localctx = new Stat_libraryContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_stat_library);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273; Match(LIB_SYM);
			State = 274; Match(IDENTIFIER);
			State = 275; Match(LBRACE);
			State = 279;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (LET_SYM - 7)) | (1L << (FOR_SYM - 7)) | (1L << (FOREACH_SYM - 7)) | (1L << (ADD_SYM - 7)) | (1L << (BREAK_SYM - 7)) | (1L << (CONTINUE_SYM - 7)) | (1L << (REMOVE_SYM - 7)) | (1L << (WHILE_SYM - 7)) | (1L << (IF_SYM - 7)) | (1L << (LIB_SYM - 7)) | (1L << (IMPORT_SYM - 7)) | (1L << (RETURN_SYM - 7)) | (1L << (PRINT_SYM - 7)) | (1L << (DISREGARD_SYM - 7)) | (1L << (EXTERNAL_SYM - 7)) | (1L << (LSQBR - 7)) | (1L << (IDENTIFIER - 7)))) != 0)) {
				{
				{
				State = 276; statement();
				}
				}
				State = 281;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 282; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_importContext : ParserRuleContext {
		public ITerminalNode IMPORT_SYM() { return GetToken(algoParser.IMPORT_SYM, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode AS_SYM() { return GetToken(algoParser.AS_SYM, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public Stat_importContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_import; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_import(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_import(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_import(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_importContext stat_import() {
		Stat_importContext _localctx = new Stat_importContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_stat_import);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 284; Match(IMPORT_SYM);
			State = 285; expr(0);
			State = 288;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS_SYM) {
				{
				State = 286; Match(AS_SYM);
				State = 287; Match(IDENTIFIER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_list_addContext : ParserRuleContext {
		public ITerminalNode ADD_SYM() { return GetToken(algoParser.ADD_SYM, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode TO_SYM() { return GetToken(algoParser.TO_SYM, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public Obj_accessContext obj_access() {
			return GetRuleContext<Obj_accessContext>(0);
		}
		public ITerminalNode AT_SYM() { return GetToken(algoParser.AT_SYM, 0); }
		public Stat_list_addContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_list_add; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_list_add(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_list_add(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_list_add(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_list_addContext stat_list_add() {
		Stat_list_addContext _localctx = new Stat_list_addContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_stat_list_add);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 290; Match(ADD_SYM);
			State = 291; expr(0);
			State = 292; Match(TO_SYM);
			State = 295;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,25,_ctx) ) {
			case 1:
				{
				State = 293; Match(IDENTIFIER);
				}
				break;

			case 2:
				{
				State = 294; obj_access();
				}
				break;
			}
			State = 299;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AT_SYM) {
				{
				State = 297; Match(AT_SYM);
				State = 298; expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_list_removeContext : ParserRuleContext {
		public ITerminalNode REMOVE_SYM() { return GetToken(algoParser.REMOVE_SYM, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode FROM_SYM() { return GetToken(algoParser.FROM_SYM, 0); }
		public ITerminalNode IN_SYM() { return GetToken(algoParser.IN_SYM, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public Obj_accessContext obj_access() {
			return GetRuleContext<Obj_accessContext>(0);
		}
		public Stat_list_removeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_list_remove; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_list_remove(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_list_remove(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_list_remove(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_list_removeContext stat_list_remove() {
		Stat_list_removeContext _localctx = new Stat_list_removeContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_stat_list_remove);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301; Match(REMOVE_SYM);
			State = 302; expr(0);
			State = 303;
			_la = _input.La(1);
			if ( !(_la==FROM_SYM || _la==IN_SYM) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 306;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,27,_ctx) ) {
			case 1:
				{
				State = 304; Match(IDENTIFIER);
				}
				break;

			case 2:
				{
				State = 305; obj_access();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_breakContext : ParserRuleContext {
		public ITerminalNode BREAK_SYM() { return GetToken(algoParser.BREAK_SYM, 0); }
		public Stat_breakContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_break; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_break(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_break(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_break(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_breakContext stat_break() {
		Stat_breakContext _localctx = new Stat_breakContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_stat_break);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 308; Match(BREAK_SYM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_continueContext : ParserRuleContext {
		public ITerminalNode CONTINUE_SYM() { return GetToken(algoParser.CONTINUE_SYM, 0); }
		public Stat_continueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_continue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_continue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_continue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_continue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_continueContext stat_continue() {
		Stat_continueContext _localctx = new Stat_continueContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_stat_continue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 310; Match(CONTINUE_SYM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_elifContext : ParserRuleContext {
		public ITerminalNode ELSE_SYM() { return GetToken(algoParser.ELSE_SYM, 0); }
		public ITerminalNode IF_SYM() { return GetToken(algoParser.IF_SYM, 0); }
		public ITerminalNode LBRACKET() { return GetToken(algoParser.LBRACKET, 0); }
		public CheckContext check() {
			return GetRuleContext<CheckContext>(0);
		}
		public ITerminalNode RBRACKET() { return GetToken(algoParser.RBRACKET, 0); }
		public ITerminalNode LBRACE() { return GetToken(algoParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(algoParser.RBRACE, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Stat_elifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_elif; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_elif(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_elif(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_elif(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_elifContext stat_elif() {
		Stat_elifContext _localctx = new Stat_elifContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_stat_elif);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 312; Match(ELSE_SYM);
			State = 313; Match(IF_SYM);
			State = 314; Match(LBRACKET);
			State = 315; check(0);
			State = 316; Match(RBRACKET);
			State = 317; Match(LBRACE);
			State = 321;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (LET_SYM - 7)) | (1L << (FOR_SYM - 7)) | (1L << (FOREACH_SYM - 7)) | (1L << (ADD_SYM - 7)) | (1L << (BREAK_SYM - 7)) | (1L << (CONTINUE_SYM - 7)) | (1L << (REMOVE_SYM - 7)) | (1L << (WHILE_SYM - 7)) | (1L << (IF_SYM - 7)) | (1L << (LIB_SYM - 7)) | (1L << (IMPORT_SYM - 7)) | (1L << (RETURN_SYM - 7)) | (1L << (PRINT_SYM - 7)) | (1L << (DISREGARD_SYM - 7)) | (1L << (EXTERNAL_SYM - 7)) | (1L << (LSQBR - 7)) | (1L << (IDENTIFIER - 7)))) != 0)) {
				{
				{
				State = 318; statement();
				}
				}
				State = 323;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 324; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_elseContext : ParserRuleContext {
		public ITerminalNode ELSE_SYM() { return GetToken(algoParser.ELSE_SYM, 0); }
		public ITerminalNode LBRACE() { return GetToken(algoParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(algoParser.RBRACE, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Stat_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_else; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_else(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_else(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_else(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_elseContext stat_else() {
		Stat_elseContext _localctx = new Stat_elseContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_stat_else);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 326; Match(ELSE_SYM);
			State = 327; Match(LBRACE);
			State = 331;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (LET_SYM - 7)) | (1L << (FOR_SYM - 7)) | (1L << (FOREACH_SYM - 7)) | (1L << (ADD_SYM - 7)) | (1L << (BREAK_SYM - 7)) | (1L << (CONTINUE_SYM - 7)) | (1L << (REMOVE_SYM - 7)) | (1L << (WHILE_SYM - 7)) | (1L << (IF_SYM - 7)) | (1L << (LIB_SYM - 7)) | (1L << (IMPORT_SYM - 7)) | (1L << (RETURN_SYM - 7)) | (1L << (PRINT_SYM - 7)) | (1L << (DISREGARD_SYM - 7)) | (1L << (EXTERNAL_SYM - 7)) | (1L << (LSQBR - 7)) | (1L << (IDENTIFIER - 7)))) != 0)) {
				{
				{
				State = 328; statement();
				}
				}
				State = 333;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 334; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Literal_paramsContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(algoParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(algoParser.COMMA, i);
		}
		public Literal_paramsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_params; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterLiteral_params(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitLiteral_params(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral_params(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Literal_paramsContext literal_params() {
		Literal_paramsContext _localctx = new Literal_paramsContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_literal_params);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 341;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,30,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 336; expr(0);
					State = 337; Match(COMMA);
					}
					} 
				}
				State = 343;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,30,_ctx);
			}
			State = 344; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Abstract_paramsContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(algoParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(algoParser.IDENTIFIER, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(algoParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(algoParser.COMMA, i);
		}
		public Abstract_paramsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstract_params; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterAbstract_params(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitAbstract_params(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbstract_params(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Abstract_paramsContext abstract_params() {
		Abstract_paramsContext _localctx = new Abstract_paramsContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_abstract_params);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 350;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,31,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 346; Match(IDENTIFIER);
					State = 347; Match(COMMA);
					}
					} 
				}
				State = 352;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,31,_ctx);
			}
			State = 353; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CheckContext : ParserRuleContext {
		public CheckContext check() {
			return GetRuleContext<CheckContext>(0);
		}
		public ITerminalNode BIN_OR() { return GetToken(algoParser.BIN_OR, 0); }
		public CheckfragContext checkfrag() {
			return GetRuleContext<CheckfragContext>(0);
		}
		public ITerminalNode BIN_AND() { return GetToken(algoParser.BIN_AND, 0); }
		public ITerminalNode LBRACKET() { return GetToken(algoParser.LBRACKET, 0); }
		public ITerminalNode RBRACKET() { return GetToken(algoParser.RBRACKET, 0); }
		public ITerminalNode INVERT_SYM() { return GetToken(algoParser.INVERT_SYM, 0); }
		public CheckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_check; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterCheck(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitCheck(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheck(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CheckContext check() {
		return check(0);
	}

	private CheckContext check(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		CheckContext _localctx = new CheckContext(_ctx, _parentState);
		CheckContext _prevctx = _localctx;
		int _startState = 54;
		EnterRecursionRule(_localctx, 54, RULE_check, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 363;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,32,_ctx) ) {
			case 1:
				{
				State = 356; Match(LBRACKET);
				State = 357; check(0);
				State = 358; Match(RBRACKET);
				}
				break;

			case 2:
				{
				State = 360; Match(INVERT_SYM);
				State = 361; check(2);
				}
				break;

			case 3:
				{
				State = 362; checkfrag();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 373;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,34,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 371;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,33,_ctx) ) {
					case 1:
						{
						_localctx = new CheckContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_check);
						State = 365;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 366; Match(BIN_OR);
						State = 367; checkfrag();
						}
						break;

					case 2:
						{
						_localctx = new CheckContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_check);
						State = 368;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 369; Match(BIN_AND);
						State = 370; checkfrag();
						}
						break;
					}
					} 
				}
				State = 375;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,34,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CheckfragContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode GRTR_THAN() { return GetToken(algoParser.GRTR_THAN, 0); }
		public ITerminalNode LESS_THAN() { return GetToken(algoParser.LESS_THAN, 0); }
		public ITerminalNode GRTR_THAN_ET() { return GetToken(algoParser.GRTR_THAN_ET, 0); }
		public ITerminalNode LESS_THAN_ET() { return GetToken(algoParser.LESS_THAN_ET, 0); }
		public ITerminalNode BIN_EQUALS() { return GetToken(algoParser.BIN_EQUALS, 0); }
		public ITerminalNode BIN_NET() { return GetToken(algoParser.BIN_NET, 0); }
		public CheckfragContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checkfrag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterCheckfrag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitCheckfrag(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheckfrag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CheckfragContext checkfrag() {
		CheckfragContext _localctx = new CheckfragContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_checkfrag);
		try {
			State = 401;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,35,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 376; expr(0);
				State = 377; Match(GRTR_THAN);
				State = 378; expr(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 380; expr(0);
				State = 381; Match(LESS_THAN);
				State = 382; expr(0);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 384; expr(0);
				State = 385; Match(GRTR_THAN_ET);
				State = 386; expr(0);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 388; expr(0);
				State = 389; Match(LESS_THAN_ET);
				State = 390; expr(0);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 392; expr(0);
				State = 393; Match(BIN_EQUALS);
				State = 394; expr(0);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 396; expr(0);
				State = 397; Match(BIN_NET);
				State = 398; expr(0);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 400; expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode ADD_OP() { return GetToken(algoParser.ADD_OP, 0); }
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ITerminalNode TAKE_OP() { return GetToken(algoParser.TAKE_OP, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 58;
		EnterRecursionRule(_localctx, 58, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 404; term(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 414;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,37,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 412;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,36,_ctx) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 406;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 407; Match(ADD_OP);
						State = 408; term(0);
						}
						break;

					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 409;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 410; Match(TAKE_OP);
						State = 411; term(0);
						}
						break;
					}
					} 
				}
				State = 416;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,37,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Rounding_exprContext : ParserRuleContext {
		public ITerminalNode TO_SYM() { return GetToken(algoParser.TO_SYM, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode SIG_FIG_SYM() { return GetToken(algoParser.SIG_FIG_SYM, 0); }
		public Rounding_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rounding_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterRounding_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitRounding_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRounding_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rounding_exprContext rounding_expr() {
		Rounding_exprContext _localctx = new Rounding_exprContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_rounding_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 417; Match(TO_SYM);
			State = 418; expr(0);
			State = 419; Match(SIG_FIG_SYM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ITerminalNode MUL_OP() { return GetToken(algoParser.MUL_OP, 0); }
		public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public ITerminalNode DIV_OP() { return GetToken(algoParser.DIV_OP, 0); }
		public ITerminalNode MOD_OP() { return GetToken(algoParser.MOD_OP, 0); }
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		return term(0);
	}

	private TermContext term(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		TermContext _localctx = new TermContext(_ctx, _parentState);
		TermContext _prevctx = _localctx;
		int _startState = 62;
		EnterRecursionRule(_localctx, 62, RULE_term, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 422; factor(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 435;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,39,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 433;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,38,_ctx) ) {
					case 1:
						{
						_localctx = new TermContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_term);
						State = 424;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 425; Match(MUL_OP);
						State = 426; factor(0);
						}
						break;

					case 2:
						{
						_localctx = new TermContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_term);
						State = 427;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 428; Match(DIV_OP);
						State = 429; factor(0);
						}
						break;

					case 3:
						{
						_localctx = new TermContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_term);
						State = 430;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 431; Match(MOD_OP);
						State = 432; factor(0);
						}
						break;
					}
					} 
				}
				State = 437;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,39,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public ITerminalNode POW_OP() { return GetToken(algoParser.POW_OP, 0); }
		public SubContext sub() {
			return GetRuleContext<SubContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		return factor(0);
	}

	private FactorContext factor(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		FactorContext _localctx = new FactorContext(_ctx, _parentState);
		FactorContext _prevctx = _localctx;
		int _startState = 64;
		EnterRecursionRule(_localctx, 64, RULE_factor, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 439; sub();
			}
			_ctx.stop = _input.Lt(-1);
			State = 446;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,40,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new FactorContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_factor);
					State = 441;
					if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
					State = 442; Match(POW_OP);
					State = 443; sub();
					}
					} 
				}
				State = 448;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,40,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SubContext : ParserRuleContext {
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ITerminalNode LBRACKET() { return GetToken(algoParser.LBRACKET, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RBRACKET() { return GetToken(algoParser.RBRACKET, 0); }
		public SubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sub; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterSub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitSub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubContext sub() {
		SubContext _localctx = new SubContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_sub);
		try {
			State = 454;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case INTEGER:
			case FLOAT:
			case BOOLEAN:
			case STRING:
			case RATIONAL:
			case NULL:
			case OBJ_SYM:
			case LSQBR:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 449; value();
				}
				break;
			case LBRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 450; Match(LBRACKET);
				State = 451; expr(0);
				State = 452; Match(RBRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		public ITerminalNode MUL_OP() { return GetToken(algoParser.MUL_OP, 0); }
		public ITerminalNode DIV_OP() { return GetToken(algoParser.DIV_OP, 0); }
		public ITerminalNode TAKE_OP() { return GetToken(algoParser.TAKE_OP, 0); }
		public ITerminalNode ADD_OP() { return GetToken(algoParser.ADD_OP, 0); }
		public ITerminalNode POW_OP() { return GetToken(algoParser.POW_OP, 0); }
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 456;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD_OP) | (1L << TAKE_OP) | (1L << MUL_OP) | (1L << DIV_OP) | (1L << POW_OP))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Selfmod_opContext : ParserRuleContext {
		public ITerminalNode ADDFROM_OP() { return GetToken(algoParser.ADDFROM_OP, 0); }
		public ITerminalNode TAKEFROM_OP() { return GetToken(algoParser.TAKEFROM_OP, 0); }
		public ITerminalNode MULFROM_OP() { return GetToken(algoParser.MULFROM_OP, 0); }
		public ITerminalNode DIVFROM_OP() { return GetToken(algoParser.DIVFROM_OP, 0); }
		public Selfmod_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selfmod_op; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterSelfmod_op(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitSelfmod_op(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelfmod_op(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Selfmod_opContext selfmod_op() {
		Selfmod_opContext _localctx = new Selfmod_opContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_selfmod_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 458;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADDFROM_OP) | (1L << TAKEFROM_OP) | (1L << DIVFROM_OP) | (1L << MULFROM_OP))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Postfix_opContext : ParserRuleContext {
		public ITerminalNode ADD_PFOP() { return GetToken(algoParser.ADD_PFOP, 0); }
		public ITerminalNode TAKE_PFOP() { return GetToken(algoParser.TAKE_PFOP, 0); }
		public Postfix_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfix_op; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterPostfix_op(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitPostfix_op(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfix_op(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Postfix_opContext postfix_op() {
		Postfix_opContext _localctx = new Postfix_opContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_postfix_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 460;
			_la = _input.La(1);
			if ( !(_la==ADD_PFOP || _la==TAKE_PFOP) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public Stat_functionCallContext stat_functionCall() {
			return GetRuleContext<Stat_functionCallContext>(0);
		}
		public Obj_accessContext obj_access() {
			return GetRuleContext<Obj_accessContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public ITerminalNode INTEGER() { return GetToken(algoParser.INTEGER, 0); }
		public ITerminalNode FLOAT() { return GetToken(algoParser.FLOAT, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(algoParser.BOOLEAN, 0); }
		public ITerminalNode STRING() { return GetToken(algoParser.STRING, 0); }
		public ITerminalNode RATIONAL() { return GetToken(algoParser.RATIONAL, 0); }
		public ITerminalNode NULL() { return GetToken(algoParser.NULL, 0); }
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public Array_accessContext array_access() {
			return GetRuleContext<Array_accessContext>(0);
		}
		public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_value);
		try {
			State = 474;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,42,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 462; stat_functionCall();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 463; obj_access();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 464; Match(IDENTIFIER);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 465; Match(INTEGER);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 466; Match(FLOAT);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 467; Match(BOOLEAN);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 468; Match(STRING);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 469; Match(RATIONAL);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 470; Match(NULL);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 471; array();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 472; array_access();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 473; @object();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Obj_accessContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(algoParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(algoParser.IDENTIFIER, i);
		}
		public ITerminalNode[] POINT() { return GetTokens(algoParser.POINT); }
		public ITerminalNode POINT(int i) {
			return GetToken(algoParser.POINT, i);
		}
		public Obj_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obj_access; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterObj_access(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitObj_access(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObj_access(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Obj_accessContext obj_access() {
		Obj_accessContext _localctx = new Obj_accessContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_obj_access);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 478;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 476; Match(IDENTIFIER);
					State = 477; Match(POINT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 480;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,43,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 482; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterArray(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitArray(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_array);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 484; Match(LSQBR);
			State = 494;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & ((1L << (INTEGER - 1)) | (1L << (FLOAT - 1)) | (1L << (BOOLEAN - 1)) | (1L << (STRING - 1)) | (1L << (RATIONAL - 1)) | (1L << (NULL - 1)) | (1L << (OBJ_SYM - 1)) | (1L << (LSQBR - 1)) | (1L << (IDENTIFIER - 1)))) != 0)) {
				{
				State = 490;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,44,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 485; value();
						State = 486; Match(COMMA);
						}
						} 
					}
					State = 492;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,44,_ctx);
				}
				State = 493; value();
				}
			}

			State = 496; Match(RSQBR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_accessContext : ParserRuleContext {
		public Literal_paramsContext literal_params() {
			return GetRuleContext<Literal_paramsContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public Obj_accessContext obj_access() {
			return GetRuleContext<Obj_accessContext>(0);
		}
		public Stat_functionCallContext stat_functionCall() {
			return GetRuleContext<Stat_functionCallContext>(0);
		}
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public Array_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_access; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterArray_access(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitArray_access(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_access(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_accessContext array_access() {
		Array_accessContext _localctx = new Array_accessContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_array_access);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 502;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,46,_ctx) ) {
			case 1:
				{
				State = 498; Match(IDENTIFIER);
				}
				break;

			case 2:
				{
				State = 499; obj_access();
				}
				break;

			case 3:
				{
				State = 500; stat_functionCall();
				}
				break;

			case 4:
				{
				State = 501; array();
				}
				break;
			}
			State = 504; Match(LSQBR);
			State = 505; literal_params();
			State = 506; Match(RSQBR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectContext : ParserRuleContext {
		public ITerminalNode OBJ_SYM() { return GetToken(algoParser.OBJ_SYM, 0); }
		public ITerminalNode LBRACE() { return GetToken(algoParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(algoParser.RBRACE, 0); }
		public Obj_child_definitionsContext obj_child_definitions() {
			return GetRuleContext<Obj_child_definitionsContext>(0);
		}
		public ObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterObject(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitObject(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectContext @object() {
		ObjectContext _localctx = new ObjectContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_object);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 508; Match(OBJ_SYM);
			State = 509; Match(LBRACE);
			State = 511;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LET_SYM || _la==EXTERNAL_SYM) {
				{
				State = 510; obj_child_definitions();
				}
			}

			State = 513; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Obj_child_definitionsContext : ParserRuleContext {
		public Obj_vardefineContext[] obj_vardefine() {
			return GetRuleContexts<Obj_vardefineContext>();
		}
		public Obj_vardefineContext obj_vardefine(int i) {
			return GetRuleContext<Obj_vardefineContext>(i);
		}
		public Obj_funcdefineContext[] obj_funcdefine() {
			return GetRuleContexts<Obj_funcdefineContext>();
		}
		public Obj_funcdefineContext obj_funcdefine(int i) {
			return GetRuleContext<Obj_funcdefineContext>(i);
		}
		public Obj_externdefineContext[] obj_externdefine() {
			return GetRuleContexts<Obj_externdefineContext>();
		}
		public Obj_externdefineContext obj_externdefine(int i) {
			return GetRuleContext<Obj_externdefineContext>(i);
		}
		public Obj_child_definitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obj_child_definitions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterObj_child_definitions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitObj_child_definitions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObj_child_definitions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Obj_child_definitionsContext obj_child_definitions() {
		Obj_child_definitionsContext _localctx = new Obj_child_definitionsContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_obj_child_definitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 518;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				State = 518;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,48,_ctx) ) {
				case 1:
					{
					State = 515; obj_vardefine();
					}
					break;

				case 2:
					{
					State = 516; obj_funcdefine();
					}
					break;

				case 3:
					{
					State = 517; obj_externdefine();
					}
					break;
				}
				}
				State = 520;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==LET_SYM || _la==EXTERNAL_SYM );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Obj_vardefineContext : ParserRuleContext {
		public ITerminalNode LET_SYM() { return GetToken(algoParser.LET_SYM, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public ITerminalNode EQUALS() { return GetToken(algoParser.EQUALS, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode ENDLINE() { return GetToken(algoParser.ENDLINE, 0); }
		public Obj_vardefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obj_vardefine; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterObj_vardefine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitObj_vardefine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObj_vardefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Obj_vardefineContext obj_vardefine() {
		Obj_vardefineContext _localctx = new Obj_vardefineContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_obj_vardefine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 522; Match(LET_SYM);
			State = 523; Match(IDENTIFIER);
			State = 524; Match(EQUALS);
			State = 525; expr(0);
			State = 526; Match(ENDLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Obj_funcdefineContext : ParserRuleContext {
		public ITerminalNode LET_SYM() { return GetToken(algoParser.LET_SYM, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public ITerminalNode LBRACKET() { return GetToken(algoParser.LBRACKET, 0); }
		public ITerminalNode RBRACKET() { return GetToken(algoParser.RBRACKET, 0); }
		public ITerminalNode EQUALS() { return GetToken(algoParser.EQUALS, 0); }
		public ITerminalNode LBRACE() { return GetToken(algoParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(algoParser.RBRACE, 0); }
		public Abstract_paramsContext abstract_params() {
			return GetRuleContext<Abstract_paramsContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Obj_funcdefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obj_funcdefine; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterObj_funcdefine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitObj_funcdefine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObj_funcdefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Obj_funcdefineContext obj_funcdefine() {
		Obj_funcdefineContext _localctx = new Obj_funcdefineContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_obj_funcdefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 528; Match(LET_SYM);
			State = 529; Match(IDENTIFIER);
			State = 530; Match(LBRACKET);
			State = 532;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IDENTIFIER) {
				{
				State = 531; abstract_params();
				}
			}

			State = 534; Match(RBRACKET);
			State = 535; Match(EQUALS);
			State = 536; Match(LBRACE);
			State = 540;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (LET_SYM - 7)) | (1L << (FOR_SYM - 7)) | (1L << (FOREACH_SYM - 7)) | (1L << (ADD_SYM - 7)) | (1L << (BREAK_SYM - 7)) | (1L << (CONTINUE_SYM - 7)) | (1L << (REMOVE_SYM - 7)) | (1L << (WHILE_SYM - 7)) | (1L << (IF_SYM - 7)) | (1L << (LIB_SYM - 7)) | (1L << (IMPORT_SYM - 7)) | (1L << (RETURN_SYM - 7)) | (1L << (PRINT_SYM - 7)) | (1L << (DISREGARD_SYM - 7)) | (1L << (EXTERNAL_SYM - 7)) | (1L << (LSQBR - 7)) | (1L << (IDENTIFIER - 7)))) != 0)) {
				{
				{
				State = 537; statement();
				}
				}
				State = 542;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 543; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Obj_externdefineContext : ParserRuleContext {
		public Stat_loadFuncExtContext stat_loadFuncExt() {
			return GetRuleContext<Stat_loadFuncExtContext>(0);
		}
		public ITerminalNode ENDLINE() { return GetToken(algoParser.ENDLINE, 0); }
		public Obj_externdefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obj_externdefine; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterObj_externdefine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitObj_externdefine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObj_externdefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Obj_externdefineContext obj_externdefine() {
		Obj_externdefineContext _localctx = new Obj_externdefineContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_obj_externdefine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 545; stat_loadFuncExt();
			State = 546; Match(ENDLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 27: return check_sempred((CheckContext)_localctx, predIndex);

		case 29: return expr_sempred((ExprContext)_localctx, predIndex);

		case 31: return term_sempred((TermContext)_localctx, predIndex);

		case 32: return factor_sempred((FactorContext)_localctx, predIndex);
		}
		return true;
	}
	private bool check_sempred(CheckContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 5);

		case 1: return Precpred(_ctx, 4);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(_ctx, 3);

		case 3: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool term_sempred(TermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(_ctx, 4);

		case 5: return Precpred(_ctx, 3);

		case 6: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool factor_sempred(FactorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(_ctx, 2);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x45\x227\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x3\x2\x3\x2\x3\x2\x3\x3\a\x3\x63"+
		"\n\x3\f\x3\xE\x3\x66\v\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4w\n\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4\x80\n\x4\x5\x4\x82\n\x4\x3\x5\x3"+
		"\x5\x3\x5\x5\x5\x87\n\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x5\x6\x8F"+
		"\n\x6\x3\x6\x3\x6\x3\x6\x5\x6\x94\n\x6\x3\a\x3\a\x3\a\x5\a\x99\n\a\x3"+
		"\a\x3\a\x3\a\x3\b\x3\b\x3\b\x5\b\xA1\n\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t"+
		"\x5\t\xA9\n\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x5\n\xB1\n\n\x3\n\x3\n\x3"+
		"\v\x3\v\x5\v\xB7\n\v\x3\v\x3\v\x5\v\xBB\n\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3"+
		"\f\x5\f\xC3\n\f\x3\f\x3\f\x3\f\x3\f\a\f\xC9\n\f\f\f\xE\f\xCC\v\f\x3\f"+
		"\x3\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x5\xE\xD7\n\xE\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\xE1\n\xF\x3\xF\x3\xF\x3\xF"+
		"\a\xF\xE6\n\xF\f\xF\xE\xF\xE9\v\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3"+
		"\x10\x3\x10\x3\x10\a\x10\xF3\n\x10\f\x10\xE\x10\xF6\v\x10\x3\x10\x3\x10"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\a\x11\x100\n\x11\f\x11\xE\x11"+
		"\x103\v\x11\x3\x11\x3\x11\a\x11\x107\n\x11\f\x11\xE\x11\x10A\v\x11\x3"+
		"\x11\x5\x11\x10D\n\x11\x3\x12\x3\x12\x3\x12\x5\x12\x112\n\x12\x3\x13\x3"+
		"\x13\x3\x13\x3\x13\a\x13\x118\n\x13\f\x13\xE\x13\x11B\v\x13\x3\x13\x3"+
		"\x13\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\x123\n\x14\x3\x15\x3\x15\x3\x15"+
		"\x3\x15\x3\x15\x5\x15\x12A\n\x15\x3\x15\x3\x15\x5\x15\x12E\n\x15\x3\x16"+
		"\x3\x16\x3\x16\x3\x16\x3\x16\x5\x16\x135\n\x16\x3\x17\x3\x17\x3\x18\x3"+
		"\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\a\x19\x142\n\x19"+
		"\f\x19\xE\x19\x145\v\x19\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\a\x1A\x14C"+
		"\n\x1A\f\x1A\xE\x1A\x14F\v\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B\a\x1B"+
		"\x156\n\x1B\f\x1B\xE\x1B\x159\v\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\a\x1C"+
		"\x15F\n\x1C\f\x1C\xE\x1C\x162\v\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D"+
		"\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x16E\n\x1D\x3\x1D\x3\x1D\x3"+
		"\x1D\x3\x1D\x3\x1D\x3\x1D\a\x1D\x176\n\x1D\f\x1D\xE\x1D\x179\v\x1D\x3"+
		"\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3"+
		"\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3"+
		"\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x194\n\x1E\x3\x1F\x3\x1F\x3\x1F"+
		"\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\a\x1F\x19F\n\x1F\f\x1F\xE\x1F"+
		"\x1A2\v\x1F\x3 \x3 \x3 \x3 \x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3"+
		"!\x3!\a!\x1B4\n!\f!\xE!\x1B7\v!\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\a\"\x1BF"+
		"\n\"\f\"\xE\"\x1C2\v\"\x3#\x3#\x3#\x3#\x3#\x5#\x1C9\n#\x3$\x3$\x3%\x3"+
		"%\x3&\x3&\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'"+
		"\x5\'\x1DD\n\'\x3(\x3(\x6(\x1E1\n(\r(\xE(\x1E2\x3(\x3(\x3)\x3)\x3)\x3"+
		")\a)\x1EB\n)\f)\xE)\x1EE\v)\x3)\x5)\x1F1\n)\x3)\x3)\x3*\x3*\x3*\x3*\x5"+
		"*\x1F9\n*\x3*\x3*\x3*\x3*\x3+\x3+\x3+\x5+\x202\n+\x3+\x3+\x3,\x3,\x3,"+
		"\x6,\x209\n,\r,\xE,\x20A\x3-\x3-\x3-\x3-\x3-\x3-\x3.\x3.\x3.\x3.\x5.\x217"+
		"\n.\x3.\x3.\x3.\x3.\a.\x21D\n.\f.\xE.\x220\v.\x3.\x3.\x3/\x3/\x3/\x3/"+
		"\x2\x2\x6\x38<@\x42\x30\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2"+
		"\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2"+
		"*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2"+
		"\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2X\x2Z\x2\\\x2\x2\a\x3\x2"+
		"\n\v\x4\x2\x11\x11\x13\x13\x3\x2-\x31\x3\x2\x34\x37\x3\x2\x38\x39\x254"+
		"\x2^\x3\x2\x2\x2\x4\x64\x3\x2\x2\x2\x6\x81\x3\x2\x2\x2\b\x83\x3\x2\x2"+
		"\x2\n\x8E\x3\x2\x2\x2\f\x98\x3\x2\x2\x2\xE\xA0\x3\x2\x2\x2\x10\xA4\x3"+
		"\x2\x2\x2\x12\xAA\x3\x2\x2\x2\x14\xB6\x3\x2\x2\x2\x16\xBE\x3\x2\x2\x2"+
		"\x18\xCF\x3\x2\x2\x2\x1A\xD4\x3\x2\x2\x2\x1C\xD8\x3\x2\x2\x2\x1E\xEC\x3"+
		"\x2\x2\x2 \xF9\x3\x2\x2\x2\"\x10E\x3\x2\x2\x2$\x113\x3\x2\x2\x2&\x11E"+
		"\x3\x2\x2\x2(\x124\x3\x2\x2\x2*\x12F\x3\x2\x2\x2,\x136\x3\x2\x2\x2.\x138"+
		"\x3\x2\x2\x2\x30\x13A\x3\x2\x2\x2\x32\x148\x3\x2\x2\x2\x34\x157\x3\x2"+
		"\x2\x2\x36\x160\x3\x2\x2\x2\x38\x16D\x3\x2\x2\x2:\x193\x3\x2\x2\x2<\x195"+
		"\x3\x2\x2\x2>\x1A3\x3\x2\x2\x2@\x1A7\x3\x2\x2\x2\x42\x1B8\x3\x2\x2\x2"+
		"\x44\x1C8\x3\x2\x2\x2\x46\x1CA\x3\x2\x2\x2H\x1CC\x3\x2\x2\x2J\x1CE\x3"+
		"\x2\x2\x2L\x1DC\x3\x2\x2\x2N\x1E0\x3\x2\x2\x2P\x1E6\x3\x2\x2\x2R\x1F8"+
		"\x3\x2\x2\x2T\x1FE\x3\x2\x2\x2V\x208\x3\x2\x2\x2X\x20C\x3\x2\x2\x2Z\x212"+
		"\x3\x2\x2\x2\\\x223\x3\x2\x2\x2^_\x5\x4\x3\x2_`\a\x2\x2\x3`\x3\x3\x2\x2"+
		"\x2\x61\x63\x5\x6\x4\x2\x62\x61\x3\x2\x2\x2\x63\x66\x3\x2\x2\x2\x64\x62"+
		"\x3\x2\x2\x2\x64\x65\x3\x2\x2\x2\x65\x5\x3\x2\x2\x2\x66\x64\x3\x2\x2\x2"+
		"gw\x5\b\x5\x2hw\x5\x12\n\x2iw\x5\x14\v\x2jw\x5\"\x12\x2kw\x5\n\x6\x2l"+
		"w\x5\f\a\x2mw\x5\xE\b\x2nw\x5\x1A\xE\x2ow\x5\x10\t\x2pw\x5&\x14\x2qw\x5"+
		"\x18\r\x2rw\x5(\x15\x2sw\x5*\x16\x2tw\x5,\x17\x2uw\x5.\x18\x2vg\x3\x2"+
		"\x2\x2vh\x3\x2\x2\x2vi\x3\x2\x2\x2vj\x3\x2\x2\x2vk\x3\x2\x2\x2vl\x3\x2"+
		"\x2\x2vm\x3\x2\x2\x2vn\x3\x2\x2\x2vo\x3\x2\x2\x2vp\x3\x2\x2\x2vq\x3\x2"+
		"\x2\x2vr\x3\x2\x2\x2vs\x3\x2\x2\x2vt\x3\x2\x2\x2vu\x3\x2\x2\x2wx\x3\x2"+
		"\x2\x2xy\a\"\x2\x2y\x82\x3\x2\x2\x2z\x80\x5\x1C\xF\x2{\x80\x5\x16\f\x2"+
		"|\x80\x5 \x11\x2}\x80\x5$\x13\x2~\x80\x5\x1E\x10\x2\x7Fz\x3\x2\x2\x2\x7F"+
		"{\x3\x2\x2\x2\x7F|\x3\x2\x2\x2\x7F}\x3\x2\x2\x2\x7F~\x3\x2\x2\x2\x80\x82"+
		"\x3\x2\x2\x2\x81v\x3\x2\x2\x2\x81\x7F\x3\x2\x2\x2\x82\a\x3\x2\x2\x2\x83"+
		"\x86\a\t\x2\x2\x84\x87\a\x42\x2\x2\x85\x87\x5N(\x2\x86\x84\x3\x2\x2\x2"+
		"\x86\x85\x3\x2\x2\x2\x87\x88\x3\x2\x2\x2\x88\x89\a#\x2\x2\x89\x8A\x5<"+
		"\x1F\x2\x8A\t\x3\x2\x2\x2\x8B\x8F\a\x42\x2\x2\x8C\x8F\x5N(\x2\x8D\x8F"+
		"\x5R*\x2\x8E\x8B\x3\x2\x2\x2\x8E\x8C\x3\x2\x2\x2\x8E\x8D\x3\x2\x2\x2\x8F"+
		"\x90\x3\x2\x2\x2\x90\x91\a#\x2\x2\x91\x93\x5<\x1F\x2\x92\x94\x5> \x2\x93"+
		"\x92\x3\x2\x2\x2\x93\x94\x3\x2\x2\x2\x94\v\x3\x2\x2\x2\x95\x99\a\x42\x2"+
		"\x2\x96\x99\x5N(\x2\x97\x99\x5R*\x2\x98\x95\x3\x2\x2\x2\x98\x96\x3\x2"+
		"\x2\x2\x98\x97\x3\x2\x2\x2\x99\x9A\x3\x2\x2\x2\x9A\x9B\x5H%\x2\x9B\x9C"+
		"\x5<\x1F\x2\x9C\r\x3\x2\x2\x2\x9D\xA1\a\x42\x2\x2\x9E\xA1\x5N(\x2\x9F"+
		"\xA1\x5R*\x2\xA0\x9D\x3\x2\x2\x2\xA0\x9E\x3\x2\x2\x2\xA0\x9F\x3\x2\x2"+
		"\x2\xA1\xA2\x3\x2\x2\x2\xA2\xA3\x5J&\x2\xA3\xF\x3\x2\x2\x2\xA4\xA8\a "+
		"\x2\x2\xA5\xA9\a\x42\x2\x2\xA6\xA9\x5N(\x2\xA7\xA9\a/\x2\x2\xA8\xA5\x3"+
		"\x2\x2\x2\xA8\xA6\x3\x2\x2\x2\xA8\xA7\x3\x2\x2\x2\xA9\x11\x3\x2\x2\x2"+
		"\xAA\xAB\a\t\x2\x2\xAB\xAC\a\x42\x2\x2\xAC\xAD\a#\x2\x2\xAD\xAE\a\x18"+
		"\x2\x2\xAE\xB0\a%\x2\x2\xAF\xB1\x5\x36\x1C\x2\xB0\xAF\x3\x2\x2\x2\xB0"+
		"\xB1\x3\x2\x2\x2\xB1\xB2\x3\x2\x2\x2\xB2\xB3\a&\x2\x2\xB3\x13\x3\x2\x2"+
		"\x2\xB4\xB7\a\x42\x2\x2\xB5\xB7\x5N(\x2\xB6\xB4\x3\x2\x2\x2\xB6\xB5\x3"+
		"\x2\x2\x2\xB7\xB8\x3\x2\x2\x2\xB8\xBA\a+\x2\x2\xB9\xBB\x5\x34\x1B\x2\xBA"+
		"\xB9\x3\x2\x2\x2\xBA\xBB\x3\x2\x2\x2\xBB\xBC\x3\x2\x2\x2\xBC\xBD\a,\x2"+
		"\x2\xBD\x15\x3\x2\x2\x2\xBE\xBF\a\t\x2\x2\xBF\xC0\a\x42\x2\x2\xC0\xC2"+
		"\a+\x2\x2\xC1\xC3\x5\x36\x1C\x2\xC2\xC1\x3\x2\x2\x2\xC2\xC3\x3\x2\x2\x2"+
		"\xC3\xC4\x3\x2\x2\x2\xC4\xC5\a,\x2\x2\xC5\xC6\a#\x2\x2\xC6\xCA\a%\x2\x2"+
		"\xC7\xC9\x5\x6\x4\x2\xC8\xC7\x3\x2\x2\x2\xC9\xCC\x3\x2\x2\x2\xCA\xC8\x3"+
		"\x2\x2\x2\xCA\xCB\x3\x2\x2\x2\xCB\xCD\x3\x2\x2\x2\xCC\xCA\x3\x2\x2\x2"+
		"\xCD\xCE\a&\x2\x2\xCE\x17\x3\x2\x2\x2\xCF\xD0\a!\x2\x2\xD0\xD1\a\x42\x2"+
		"\x2\xD1\xD2\a*\x2\x2\xD2\xD3\x5N(\x2\xD3\x19\x3\x2\x2\x2\xD4\xD6\a\x1E"+
		"\x2\x2\xD5\xD7\x5<\x1F\x2\xD6\xD5\x3\x2\x2\x2\xD6\xD7\x3\x2\x2\x2\xD7"+
		"\x1B\x3\x2\x2\x2\xD8\xD9\t\x2\x2\x2\xD9\xDA\a+\x2\x2\xDA\xE0\a\x42\x2"+
		"\x2\xDB\xDC\a\x13\x2\x2\xDC\xE1\x5<\x1F\x2\xDD\xDE\a\x15\x2\x2\xDE\xDF"+
		"\a\x16\x2\x2\xDF\xE1\x5<\x1F\x2\xE0\xDB\x3\x2\x2\x2\xE0\xDD\x3\x2\x2\x2"+
		"\xE1\xE2\x3\x2\x2\x2\xE2\xE3\a,\x2\x2\xE3\xE7\a%\x2\x2\xE4\xE6\x5\x6\x4"+
		"\x2\xE5\xE4\x3\x2\x2\x2\xE6\xE9\x3\x2\x2\x2\xE7\xE5\x3\x2\x2\x2\xE7\xE8"+
		"\x3\x2\x2\x2\xE8\xEA\x3\x2\x2\x2\xE9\xE7\x3\x2\x2\x2\xEA\xEB\a&\x2\x2"+
		"\xEB\x1D\x3\x2\x2\x2\xEC\xED\a\x12\x2\x2\xED\xEE\a+\x2\x2\xEE\xEF\x5\x38"+
		"\x1D\x2\xEF\xF0\a,\x2\x2\xF0\xF4\a%\x2\x2\xF1\xF3\x5\x6\x4\x2\xF2\xF1"+
		"\x3\x2\x2\x2\xF3\xF6\x3\x2\x2\x2\xF4\xF2\x3\x2\x2\x2\xF4\xF5\x3\x2\x2"+
		"\x2\xF5\xF7\x3\x2\x2\x2\xF6\xF4\x3\x2\x2\x2\xF7\xF8\a&\x2\x2\xF8\x1F\x3"+
		"\x2\x2\x2\xF9\xFA\a\x14\x2\x2\xFA\xFB\a+\x2\x2\xFB\xFC\x5\x38\x1D\x2\xFC"+
		"\xFD\a,\x2\x2\xFD\x101\a%\x2\x2\xFE\x100\x5\x6\x4\x2\xFF\xFE\x3\x2\x2"+
		"\x2\x100\x103\x3\x2\x2\x2\x101\xFF\x3\x2\x2\x2\x101\x102\x3\x2\x2\x2\x102"+
		"\x104\x3\x2\x2\x2\x103\x101\x3\x2\x2\x2\x104\x108\a&\x2\x2\x105\x107\x5"+
		"\x30\x19\x2\x106\x105\x3\x2\x2\x2\x107\x10A\x3\x2\x2\x2\x108\x106\x3\x2"+
		"\x2\x2\x108\x109\x3\x2\x2\x2\x109\x10C\x3\x2\x2\x2\x10A\x108\x3\x2\x2"+
		"\x2\x10B\x10D\x5\x32\x1A\x2\x10C\x10B\x3\x2\x2\x2\x10C\x10D\x3\x2\x2\x2"+
		"\x10D!\x3\x2\x2\x2\x10E\x10F\a\x1F\x2\x2\x10F\x111\x5<\x1F\x2\x110\x112"+
		"\x5> \x2\x111\x110\x3\x2\x2\x2\x111\x112\x3\x2\x2\x2\x112#\x3\x2\x2\x2"+
		"\x113\x114\a\x19\x2\x2\x114\x115\a\x42\x2\x2\x115\x119\a%\x2\x2\x116\x118"+
		"\x5\x6\x4\x2\x117\x116\x3\x2\x2\x2\x118\x11B\x3\x2\x2\x2\x119\x117\x3"+
		"\x2\x2\x2\x119\x11A\x3\x2\x2\x2\x11A\x11C\x3\x2\x2\x2\x11B\x119\x3\x2"+
		"\x2\x2\x11C\x11D\a&\x2\x2\x11D%\x3\x2\x2\x2\x11E\x11F\a\x1D\x2\x2\x11F"+
		"\x122\x5<\x1F\x2\x120\x121\a\x17\x2\x2\x121\x123\a\x42\x2\x2\x122\x120"+
		"\x3\x2\x2\x2\x122\x123\x3\x2\x2\x2\x123\'\x3\x2\x2\x2\x124\x125\a\f\x2"+
		"\x2\x125\x126\x5<\x1F\x2\x126\x129\a\x16\x2\x2\x127\x12A\a\x42\x2\x2\x128"+
		"\x12A\x5N(\x2\x129\x127\x3\x2\x2\x2\x129\x128\x3\x2\x2\x2\x12A\x12D\x3"+
		"\x2\x2\x2\x12B\x12C\a\xF\x2\x2\x12C\x12E\x5<\x1F\x2\x12D\x12B\x3\x2\x2"+
		"\x2\x12D\x12E\x3\x2\x2\x2\x12E)\x3\x2\x2\x2\x12F\x130\a\x10\x2\x2\x130"+
		"\x131\x5<\x1F\x2\x131\x134\t\x3\x2\x2\x132\x135\a\x42\x2\x2\x133\x135"+
		"\x5N(\x2\x134\x132\x3\x2\x2\x2\x134\x133\x3\x2\x2\x2\x135+\x3\x2\x2\x2"+
		"\x136\x137\a\r\x2\x2\x137-\x3\x2\x2\x2\x138\x139\a\xE\x2\x2\x139/\x3\x2"+
		"\x2\x2\x13A\x13B\a\x1C\x2\x2\x13B\x13C\a\x14\x2\x2\x13C\x13D\a+\x2\x2"+
		"\x13D\x13E\x5\x38\x1D\x2\x13E\x13F\a,\x2\x2\x13F\x143\a%\x2\x2\x140\x142"+
		"\x5\x6\x4\x2\x141\x140\x3\x2\x2\x2\x142\x145\x3\x2\x2\x2\x143\x141\x3"+
		"\x2\x2\x2\x143\x144\x3\x2\x2\x2\x144\x146\x3\x2\x2\x2\x145\x143\x3\x2"+
		"\x2\x2\x146\x147\a&\x2\x2\x147\x31\x3\x2\x2\x2\x148\x149\a\x1C\x2\x2\x149"+
		"\x14D\a%\x2\x2\x14A\x14C\x5\x6\x4\x2\x14B\x14A\x3\x2\x2\x2\x14C\x14F\x3"+
		"\x2\x2\x2\x14D\x14B\x3\x2\x2\x2\x14D\x14E\x3\x2\x2\x2\x14E\x150\x3\x2"+
		"\x2\x2\x14F\x14D\x3\x2\x2\x2\x150\x151\a&\x2\x2\x151\x33\x3\x2\x2\x2\x152"+
		"\x153\x5<\x1F\x2\x153\x154\a$\x2\x2\x154\x156\x3\x2\x2\x2\x155\x152\x3"+
		"\x2\x2\x2\x156\x159\x3\x2\x2\x2\x157\x155\x3\x2\x2\x2\x157\x158\x3\x2"+
		"\x2\x2\x158\x15A\x3\x2\x2\x2\x159\x157\x3\x2\x2\x2\x15A\x15B\x5<\x1F\x2"+
		"\x15B\x35\x3\x2\x2\x2\x15C\x15D\a\x42\x2\x2\x15D\x15F\a$\x2\x2\x15E\x15C"+
		"\x3\x2\x2\x2\x15F\x162\x3\x2\x2\x2\x160\x15E\x3\x2\x2\x2\x160\x161\x3"+
		"\x2\x2\x2\x161\x163\x3\x2\x2\x2\x162\x160\x3\x2\x2\x2\x163\x164\a\x42"+
		"\x2\x2\x164\x37\x3\x2\x2\x2\x165\x166\b\x1D\x1\x2\x166\x167\a+\x2\x2\x167"+
		"\x168\x5\x38\x1D\x2\x168\x169\a,\x2\x2\x169\x16E\x3\x2\x2\x2\x16A\x16B"+
		"\a)\x2\x2\x16B\x16E\x5\x38\x1D\x4\x16C\x16E\x5:\x1E\x2\x16D\x165\x3\x2"+
		"\x2\x2\x16D\x16A\x3\x2\x2\x2\x16D\x16C\x3\x2\x2\x2\x16E\x177\x3\x2\x2"+
		"\x2\x16F\x170\f\a\x2\x2\x170\x171\a:\x2\x2\x171\x176\x5:\x1E\x2\x172\x173"+
		"\f\x6\x2\x2\x173\x174\a;\x2\x2\x174\x176\x5:\x1E\x2\x175\x16F\x3\x2\x2"+
		"\x2\x175\x172\x3\x2\x2\x2\x176\x179\x3\x2\x2\x2\x177\x175\x3\x2\x2\x2"+
		"\x177\x178\x3\x2\x2\x2\x178\x39\x3\x2\x2\x2\x179\x177\x3\x2\x2\x2\x17A"+
		"\x17B\x5<\x1F\x2\x17B\x17C\a>\x2\x2\x17C\x17D\x5<\x1F\x2\x17D\x194\x3"+
		"\x2\x2\x2\x17E\x17F\x5<\x1F\x2\x17F\x180\a?\x2\x2\x180\x181\x5<\x1F\x2"+
		"\x181\x194\x3\x2\x2\x2\x182\x183\x5<\x1F\x2\x183\x184\a@\x2\x2\x184\x185"+
		"\x5<\x1F\x2\x185\x194\x3\x2\x2\x2\x186\x187\x5<\x1F\x2\x187\x188\a\x41"+
		"\x2\x2\x188\x189\x5<\x1F\x2\x189\x194\x3\x2\x2\x2\x18A\x18B\x5<\x1F\x2"+
		"\x18B\x18C\a=\x2\x2\x18C\x18D\x5<\x1F\x2\x18D\x194\x3\x2\x2\x2\x18E\x18F"+
		"\x5<\x1F\x2\x18F\x190\a<\x2\x2\x190\x191\x5<\x1F\x2\x191\x194\x3\x2\x2"+
		"\x2\x192\x194\x5<\x1F\x2\x193\x17A\x3\x2\x2\x2\x193\x17E\x3\x2\x2\x2\x193"+
		"\x182\x3\x2\x2\x2\x193\x186\x3\x2\x2\x2\x193\x18A\x3\x2\x2\x2\x193\x18E"+
		"\x3\x2\x2\x2\x193\x192\x3\x2\x2\x2\x194;\x3\x2\x2\x2\x195\x196\b\x1F\x1"+
		"\x2\x196\x197\x5@!\x2\x197\x1A0\x3\x2\x2\x2\x198\x199\f\x5\x2\x2\x199"+
		"\x19A\a-\x2\x2\x19A\x19F\x5@!\x2\x19B\x19C\f\x4\x2\x2\x19C\x19D\a.\x2"+
		"\x2\x19D\x19F\x5@!\x2\x19E\x198\x3\x2\x2\x2\x19E\x19B\x3\x2\x2\x2\x19F"+
		"\x1A2\x3\x2\x2\x2\x1A0\x19E\x3\x2\x2\x2\x1A0\x1A1\x3\x2\x2\x2\x1A1=\x3"+
		"\x2\x2\x2\x1A2\x1A0\x3\x2\x2\x2\x1A3\x1A4\a\x16\x2\x2\x1A4\x1A5\x5<\x1F"+
		"\x2\x1A5\x1A6\a\x1A\x2\x2\x1A6?\x3\x2\x2\x2\x1A7\x1A8\b!\x1\x2\x1A8\x1A9"+
		"\x5\x42\"\x2\x1A9\x1B5\x3\x2\x2\x2\x1AA\x1AB\f\x6\x2\x2\x1AB\x1AC\a/\x2"+
		"\x2\x1AC\x1B4\x5\x42\"\x2\x1AD\x1AE\f\x5\x2\x2\x1AE\x1AF\a\x30\x2\x2\x1AF"+
		"\x1B4\x5\x42\"\x2\x1B0\x1B1\f\x4\x2\x2\x1B1\x1B2\a\x32\x2\x2\x1B2\x1B4"+
		"\x5\x42\"\x2\x1B3\x1AA\x3\x2\x2\x2\x1B3\x1AD\x3\x2\x2\x2\x1B3\x1B0\x3"+
		"\x2\x2\x2\x1B4\x1B7\x3\x2\x2\x2\x1B5\x1B3\x3\x2\x2\x2\x1B5\x1B6\x3\x2"+
		"\x2\x2\x1B6\x41\x3\x2\x2\x2\x1B7\x1B5\x3\x2\x2\x2\x1B8\x1B9\b\"\x1\x2"+
		"\x1B9\x1BA\x5\x44#\x2\x1BA\x1C0\x3\x2\x2\x2\x1BB\x1BC\f\x4\x2\x2\x1BC"+
		"\x1BD\a\x31\x2\x2\x1BD\x1BF\x5\x44#\x2\x1BE\x1BB\x3\x2\x2\x2\x1BF\x1C2"+
		"\x3\x2\x2\x2\x1C0\x1BE\x3\x2\x2\x2\x1C0\x1C1\x3\x2\x2\x2\x1C1\x43\x3\x2"+
		"\x2\x2\x1C2\x1C0\x3\x2\x2\x2\x1C3\x1C9\x5L\'\x2\x1C4\x1C5\a+\x2\x2\x1C5"+
		"\x1C6\x5<\x1F\x2\x1C6\x1C7\a,\x2\x2\x1C7\x1C9\x3\x2\x2\x2\x1C8\x1C3\x3"+
		"\x2\x2\x2\x1C8\x1C4\x3\x2\x2\x2\x1C9\x45\x3\x2\x2\x2\x1CA\x1CB\t\x4\x2"+
		"\x2\x1CBG\x3\x2\x2\x2\x1CC\x1CD\t\x5\x2\x2\x1CDI\x3\x2\x2\x2\x1CE\x1CF"+
		"\t\x6\x2\x2\x1CFK\x3\x2\x2\x2\x1D0\x1DD\x5\x14\v\x2\x1D1\x1DD\x5N(\x2"+
		"\x1D2\x1DD\a\x42\x2\x2\x1D3\x1DD\a\x3\x2\x2\x1D4\x1DD\a\x4\x2\x2\x1D5"+
		"\x1DD\a\x5\x2\x2\x1D6\x1DD\a\x6\x2\x2\x1D7\x1DD\a\a\x2\x2\x1D8\x1DD\a"+
		"\b\x2\x2\x1D9\x1DD\x5P)\x2\x1DA\x1DD\x5R*\x2\x1DB\x1DD\x5T+\x2\x1DC\x1D0"+
		"\x3\x2\x2\x2\x1DC\x1D1\x3\x2\x2\x2\x1DC\x1D2\x3\x2\x2\x2\x1DC\x1D3\x3"+
		"\x2\x2\x2\x1DC\x1D4\x3\x2\x2\x2\x1DC\x1D5\x3\x2\x2\x2\x1DC\x1D6\x3\x2"+
		"\x2\x2\x1DC\x1D7\x3\x2\x2\x2\x1DC\x1D8\x3\x2\x2\x2\x1DC\x1D9\x3\x2\x2"+
		"\x2\x1DC\x1DA\x3\x2\x2\x2\x1DC\x1DB\x3\x2\x2\x2\x1DDM\x3\x2\x2\x2\x1DE"+
		"\x1DF\a\x42\x2\x2\x1DF\x1E1\a\x33\x2\x2\x1E0\x1DE\x3\x2\x2\x2\x1E1\x1E2"+
		"\x3\x2\x2\x2\x1E2\x1E0\x3\x2\x2\x2\x1E2\x1E3\x3\x2\x2\x2\x1E3\x1E4\x3"+
		"\x2\x2\x2\x1E4\x1E5\a\x42\x2\x2\x1E5O\x3\x2\x2\x2\x1E6\x1F0\a\'\x2\x2"+
		"\x1E7\x1E8\x5L\'\x2\x1E8\x1E9\a$\x2\x2\x1E9\x1EB\x3\x2\x2\x2\x1EA\x1E7"+
		"\x3\x2\x2\x2\x1EB\x1EE\x3\x2\x2\x2\x1EC\x1EA\x3\x2\x2\x2\x1EC\x1ED\x3"+
		"\x2\x2\x2\x1ED\x1EF\x3\x2\x2\x2\x1EE\x1EC\x3\x2\x2\x2\x1EF\x1F1\x5L\'"+
		"\x2\x1F0\x1EC\x3\x2\x2\x2\x1F0\x1F1\x3\x2\x2\x2\x1F1\x1F2\x3\x2\x2\x2"+
		"\x1F2\x1F3\a(\x2\x2\x1F3Q\x3\x2\x2\x2\x1F4\x1F9\a\x42\x2\x2\x1F5\x1F9"+
		"\x5N(\x2\x1F6\x1F9\x5\x14\v\x2\x1F7\x1F9\x5P)\x2\x1F8\x1F4\x3\x2\x2\x2"+
		"\x1F8\x1F5\x3\x2\x2\x2\x1F8\x1F6\x3\x2\x2\x2\x1F8\x1F7\x3\x2\x2\x2\x1F9"+
		"\x1FA\x3\x2\x2\x2\x1FA\x1FB\a\'\x2\x2\x1FB\x1FC\x5\x34\x1B\x2\x1FC\x1FD"+
		"\a(\x2\x2\x1FDS\x3\x2\x2\x2\x1FE\x1FF\a\x1B\x2\x2\x1FF\x201\a%\x2\x2\x200"+
		"\x202\x5V,\x2\x201\x200\x3\x2\x2\x2\x201\x202\x3\x2\x2\x2\x202\x203\x3"+
		"\x2\x2\x2\x203\x204\a&\x2\x2\x204U\x3\x2\x2\x2\x205\x209\x5X-\x2\x206"+
		"\x209\x5Z.\x2\x207\x209\x5\\/\x2\x208\x205\x3\x2\x2\x2\x208\x206\x3\x2"+
		"\x2\x2\x208\x207\x3\x2\x2\x2\x209\x20A\x3\x2\x2\x2\x20A\x208\x3\x2\x2"+
		"\x2\x20A\x20B\x3\x2\x2\x2\x20BW\x3\x2\x2\x2\x20C\x20D\a\t\x2\x2\x20D\x20E"+
		"\a\x42\x2\x2\x20E\x20F\a#\x2\x2\x20F\x210\x5<\x1F\x2\x210\x211\a\"\x2"+
		"\x2\x211Y\x3\x2\x2\x2\x212\x213\a\t\x2\x2\x213\x214\a\x42\x2\x2\x214\x216"+
		"\a+\x2\x2\x215\x217\x5\x36\x1C\x2\x216\x215\x3\x2\x2\x2\x216\x217\x3\x2"+
		"\x2\x2\x217\x218\x3\x2\x2\x2\x218\x219\a,\x2\x2\x219\x21A\a#\x2\x2\x21A"+
		"\x21E\a%\x2\x2\x21B\x21D\x5\x6\x4\x2\x21C\x21B\x3\x2\x2\x2\x21D\x220\x3"+
		"\x2\x2\x2\x21E\x21C\x3\x2\x2\x2\x21E\x21F\x3\x2\x2\x2\x21F\x221\x3\x2"+
		"\x2\x2\x220\x21E\x3\x2\x2\x2\x221\x222\a&\x2\x2\x222[\x3\x2\x2\x2\x223"+
		"\x224\x5\x18\r\x2\x224\x225\a\"\x2\x2\x225]\x3\x2\x2\x2\x36\x64v\x7F\x81"+
		"\x86\x8E\x93\x98\xA0\xA8\xB0\xB6\xBA\xC2\xCA\xD6\xE0\xE7\xF4\x101\x108"+
		"\x10C\x111\x119\x122\x129\x12D\x134\x143\x14D\x157\x160\x16D\x175\x177"+
		"\x193\x19E\x1A0\x1B3\x1B5\x1C0\x1C8\x1DC\x1E2\x1EC\x1F0\x1F8\x201\x208"+
		"\x20A\x216\x21E";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Algo
