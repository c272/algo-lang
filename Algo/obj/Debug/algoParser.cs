//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/c272/Repos/algo-lang/Algo/Parsing/algo.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Algo {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class algoParser : Parser {
	public const int
		INTEGER=1, FLOAT=2, BOOLEAN=3, STRING=4, RATIONAL=5, NULL=6, LET_SYM=7, 
		FOR_SYM=8, FOREACH_SYM=9, ADD_SYM=10, AT_SYM=11, REMOVE_SYM=12, FROM_SYM=13, 
		WHILE_SYM=14, IN_SYM=15, IF_SYM=16, UP_SYM=17, TO_SYM=18, AS_SYM=19, ENUM_SYM=20, 
		LIB_SYM=21, SIG_FIG_SYM=22, OBJ_SYM=23, ELSE_SYM=24, IMPORT_SYM=25, RETURN_SYM=26, 
		PRINT_SYM=27, DISREGARD_SYM=28, EXTERNAL_SYM=29, ENDLINE=30, EQUALS=31, 
		COMMA=32, LBRACE=33, RBRACE=34, LSQBR=35, RSQBR=36, INVERT_SYM=37, STREAMING_SYM=38, 
		LBRACKET=39, RBRACKET=40, ADD_OP=41, TAKE_OP=42, MUL_OP=43, DIV_OP=44, 
		POW_OP=45, POINT=46, ADDFROM_OP=47, TAKEFROM_OP=48, DIVFROM_OP=49, MULFROM_OP=50, 
		ADD_PFOP=51, TAKE_PFOP=52, BIN_OR=53, BIN_AND=54, BIN_NET=55, BIN_EQUALS=56, 
		GRTR_THAN=57, LESS_THAN=58, GRTR_THAN_ET=59, LESS_THAN_ET=60, IDENTIFIER=61, 
		COMMENT=62, WS=63, UNKNOWN_SYMBOL=64;
	public const int
		RULE_compileUnit = 0, RULE_block = 1, RULE_statement = 2, RULE_stat_define = 3, 
		RULE_stat_setvar = 4, RULE_stat_setvar_op = 5, RULE_stat_setvar_postfix = 6, 
		RULE_stat_deletevar = 7, RULE_stat_enumDef = 8, RULE_stat_functionCall = 9, 
		RULE_stat_functionDef = 10, RULE_stat_loadFuncExt = 11, RULE_stat_return = 12, 
		RULE_stat_forLoop = 13, RULE_stat_whileLoop = 14, RULE_stat_if = 15, RULE_stat_print = 16, 
		RULE_stat_library = 17, RULE_stat_import = 18, RULE_stat_list_add = 19, 
		RULE_stat_list_remove = 20, RULE_stat_elif = 21, RULE_stat_else = 22, 
		RULE_literal_params = 23, RULE_abstract_params = 24, RULE_check = 25, 
		RULE_checkfrag = 26, RULE_expr = 27, RULE_rounding_expr = 28, RULE_term = 29, 
		RULE_factor = 30, RULE_sub = 31, RULE_operator = 32, RULE_selfmod_op = 33, 
		RULE_postfix_op = 34, RULE_value = 35, RULE_obj_access = 36, RULE_array = 37, 
		RULE_array_access = 38, RULE_object = 39, RULE_obj_child_definitions = 40, 
		RULE_obj_vardefine = 41, RULE_obj_funcdefine = 42;
	public static readonly string[] ruleNames = {
		"compileUnit", "block", "statement", "stat_define", "stat_setvar", "stat_setvar_op", 
		"stat_setvar_postfix", "stat_deletevar", "stat_enumDef", "stat_functionCall", 
		"stat_functionDef", "stat_loadFuncExt", "stat_return", "stat_forLoop", 
		"stat_whileLoop", "stat_if", "stat_print", "stat_library", "stat_import", 
		"stat_list_add", "stat_list_remove", "stat_elif", "stat_else", "literal_params", 
		"abstract_params", "check", "checkfrag", "expr", "rounding_expr", "term", 
		"factor", "sub", "operator", "selfmod_op", "postfix_op", "value", "obj_access", 
		"array", "array_access", "object", "obj_child_definitions", "obj_vardefine", 
		"obj_funcdefine"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'null'", "'let'", "'for'", "'foreach'", 
		"'add'", "'at'", "'remove'", "'from'", "'while'", "'in'", "'if'", "'up'", 
		"'to'", "'as'", "'enum'", "'library'", "'sf'", "'object'", "'else'", "'import'", 
		"'return'", "'print'", "'disregard'", "'external'", "';'", "'='", "','", 
		"'{'", "'}'", "'['", "']'", "'!'", "'<-'", "'('", "')'", "'+'", "'-'", 
		"'*'", "'/'", "'^'", "'.'", "'+='", "'-='", "'/='", "'*='", "'++'", "'--'", 
		"'|'", "'&'", "'!='", "'=='", "'>'", "'<'", "'>='", "'<='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INTEGER", "FLOAT", "BOOLEAN", "STRING", "RATIONAL", "NULL", "LET_SYM", 
		"FOR_SYM", "FOREACH_SYM", "ADD_SYM", "AT_SYM", "REMOVE_SYM", "FROM_SYM", 
		"WHILE_SYM", "IN_SYM", "IF_SYM", "UP_SYM", "TO_SYM", "AS_SYM", "ENUM_SYM", 
		"LIB_SYM", "SIG_FIG_SYM", "OBJ_SYM", "ELSE_SYM", "IMPORT_SYM", "RETURN_SYM", 
		"PRINT_SYM", "DISREGARD_SYM", "EXTERNAL_SYM", "ENDLINE", "EQUALS", "COMMA", 
		"LBRACE", "RBRACE", "LSQBR", "RSQBR", "INVERT_SYM", "STREAMING_SYM", "LBRACKET", 
		"RBRACKET", "ADD_OP", "TAKE_OP", "MUL_OP", "DIV_OP", "POW_OP", "POINT", 
		"ADDFROM_OP", "TAKEFROM_OP", "DIVFROM_OP", "MULFROM_OP", "ADD_PFOP", "TAKE_PFOP", 
		"BIN_OR", "BIN_AND", "BIN_NET", "BIN_EQUALS", "GRTR_THAN", "LESS_THAN", 
		"GRTR_THAN_ET", "LESS_THAN_ET", "IDENTIFIER", "COMMENT", "WS", "UNKNOWN_SYMBOL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "algo.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public algoParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompileUnitContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(algoParser.Eof, 0); }
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86; block();
			State = 87; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LET_SYM) | (1L << FOR_SYM) | (1L << FOREACH_SYM) | (1L << ADD_SYM) | (1L << REMOVE_SYM) | (1L << WHILE_SYM) | (1L << IF_SYM) | (1L << LIB_SYM) | (1L << IMPORT_SYM) | (1L << RETURN_SYM) | (1L << PRINT_SYM) | (1L << DISREGARD_SYM) | (1L << EXTERNAL_SYM) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 89; statement();
				}
				}
				State = 94;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public ITerminalNode ENDLINE() { return GetToken(algoParser.ENDLINE, 0); }
		public Stat_defineContext stat_define() {
			return GetRuleContext<Stat_defineContext>(0);
		}
		public Stat_enumDefContext stat_enumDef() {
			return GetRuleContext<Stat_enumDefContext>(0);
		}
		public Stat_functionCallContext stat_functionCall() {
			return GetRuleContext<Stat_functionCallContext>(0);
		}
		public Stat_printContext stat_print() {
			return GetRuleContext<Stat_printContext>(0);
		}
		public Stat_setvarContext stat_setvar() {
			return GetRuleContext<Stat_setvarContext>(0);
		}
		public Stat_setvar_opContext stat_setvar_op() {
			return GetRuleContext<Stat_setvar_opContext>(0);
		}
		public Stat_setvar_postfixContext stat_setvar_postfix() {
			return GetRuleContext<Stat_setvar_postfixContext>(0);
		}
		public Stat_returnContext stat_return() {
			return GetRuleContext<Stat_returnContext>(0);
		}
		public Stat_deletevarContext stat_deletevar() {
			return GetRuleContext<Stat_deletevarContext>(0);
		}
		public Stat_importContext stat_import() {
			return GetRuleContext<Stat_importContext>(0);
		}
		public Stat_loadFuncExtContext stat_loadFuncExt() {
			return GetRuleContext<Stat_loadFuncExtContext>(0);
		}
		public Stat_list_addContext stat_list_add() {
			return GetRuleContext<Stat_list_addContext>(0);
		}
		public Stat_list_removeContext stat_list_remove() {
			return GetRuleContext<Stat_list_removeContext>(0);
		}
		public Stat_forLoopContext stat_forLoop() {
			return GetRuleContext<Stat_forLoopContext>(0);
		}
		public Stat_functionDefContext stat_functionDef() {
			return GetRuleContext<Stat_functionDefContext>(0);
		}
		public Stat_ifContext stat_if() {
			return GetRuleContext<Stat_ifContext>(0);
		}
		public Stat_libraryContext stat_library() {
			return GetRuleContext<Stat_libraryContext>(0);
		}
		public Stat_whileLoopContext stat_whileLoop() {
			return GetRuleContext<Stat_whileLoopContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 119;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 108;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
				case 1:
					{
					State = 95; stat_define();
					}
					break;

				case 2:
					{
					State = 96; stat_enumDef();
					}
					break;

				case 3:
					{
					State = 97; stat_functionCall();
					}
					break;

				case 4:
					{
					State = 98; stat_print();
					}
					break;

				case 5:
					{
					State = 99; stat_setvar();
					}
					break;

				case 6:
					{
					State = 100; stat_setvar_op();
					}
					break;

				case 7:
					{
					State = 101; stat_setvar_postfix();
					}
					break;

				case 8:
					{
					State = 102; stat_return();
					}
					break;

				case 9:
					{
					State = 103; stat_deletevar();
					}
					break;

				case 10:
					{
					State = 104; stat_import();
					}
					break;

				case 11:
					{
					State = 105; stat_loadFuncExt();
					}
					break;

				case 12:
					{
					State = 106; stat_list_add();
					}
					break;

				case 13:
					{
					State = 107; stat_list_remove();
					}
					break;
				}
				State = 110; Match(ENDLINE);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 117;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case FOR_SYM:
				case FOREACH_SYM:
					{
					State = 112; stat_forLoop();
					}
					break;
				case LET_SYM:
					{
					State = 113; stat_functionDef();
					}
					break;
				case IF_SYM:
					{
					State = 114; stat_if();
					}
					break;
				case LIB_SYM:
					{
					State = 115; stat_library();
					}
					break;
				case WHILE_SYM:
					{
					State = 116; stat_whileLoop();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_defineContext : ParserRuleContext {
		public ITerminalNode LET_SYM() { return GetToken(algoParser.LET_SYM, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public ITerminalNode EQUALS() { return GetToken(algoParser.EQUALS, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Stat_defineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_define; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_define(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_define(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_define(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_defineContext stat_define() {
		Stat_defineContext _localctx = new Stat_defineContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_stat_define);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121; Match(LET_SYM);
			State = 122; Match(IDENTIFIER);
			State = 123; Match(EQUALS);
			State = 124; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_setvarContext : ParserRuleContext {
		public ITerminalNode EQUALS() { return GetToken(algoParser.EQUALS, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public Obj_accessContext obj_access() {
			return GetRuleContext<Obj_accessContext>(0);
		}
		public Rounding_exprContext rounding_expr() {
			return GetRuleContext<Rounding_exprContext>(0);
		}
		public Stat_setvarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_setvar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_setvar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_setvar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_setvar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_setvarContext stat_setvar() {
		Stat_setvarContext _localctx = new Stat_setvarContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_stat_setvar);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				{
				State = 126; Match(IDENTIFIER);
				}
				break;

			case 2:
				{
				State = 127; obj_access();
				}
				break;
			}
			State = 130; Match(EQUALS);
			State = 131; expr(0);
			State = 133;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==TO_SYM) {
				{
				State = 132; rounding_expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_setvar_opContext : ParserRuleContext {
		public Selfmod_opContext selfmod_op() {
			return GetRuleContext<Selfmod_opContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public Obj_accessContext obj_access() {
			return GetRuleContext<Obj_accessContext>(0);
		}
		public Stat_setvar_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_setvar_op; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_setvar_op(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_setvar_op(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_setvar_op(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_setvar_opContext stat_setvar_op() {
		Stat_setvar_opContext _localctx = new Stat_setvar_opContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_stat_setvar_op);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				{
				State = 135; Match(IDENTIFIER);
				}
				break;

			case 2:
				{
				State = 136; obj_access();
				}
				break;
			}
			State = 139; selfmod_op();
			State = 140; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_setvar_postfixContext : ParserRuleContext {
		public Postfix_opContext postfix_op() {
			return GetRuleContext<Postfix_opContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public Obj_accessContext obj_access() {
			return GetRuleContext<Obj_accessContext>(0);
		}
		public Stat_setvar_postfixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_setvar_postfix; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_setvar_postfix(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_setvar_postfix(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_setvar_postfix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_setvar_postfixContext stat_setvar_postfix() {
		Stat_setvar_postfixContext _localctx = new Stat_setvar_postfixContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_stat_setvar_postfix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				{
				State = 142; Match(IDENTIFIER);
				}
				break;

			case 2:
				{
				State = 143; obj_access();
				}
				break;
			}
			State = 146; postfix_op();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_deletevarContext : ParserRuleContext {
		public ITerminalNode DISREGARD_SYM() { return GetToken(algoParser.DISREGARD_SYM, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public Obj_accessContext obj_access() {
			return GetRuleContext<Obj_accessContext>(0);
		}
		public ITerminalNode MUL_OP() { return GetToken(algoParser.MUL_OP, 0); }
		public Stat_deletevarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_deletevar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_deletevar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_deletevar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_deletevar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_deletevarContext stat_deletevar() {
		Stat_deletevarContext _localctx = new Stat_deletevarContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_stat_deletevar);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148; Match(DISREGARD_SYM);
			State = 152;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				{
				State = 149; Match(IDENTIFIER);
				}
				break;

			case 2:
				{
				State = 150; obj_access();
				}
				break;

			case 3:
				{
				State = 151; Match(MUL_OP);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_enumDefContext : ParserRuleContext {
		public ITerminalNode LET_SYM() { return GetToken(algoParser.LET_SYM, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public ITerminalNode EQUALS() { return GetToken(algoParser.EQUALS, 0); }
		public ITerminalNode ENUM_SYM() { return GetToken(algoParser.ENUM_SYM, 0); }
		public ITerminalNode LBRACE() { return GetToken(algoParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(algoParser.RBRACE, 0); }
		public Abstract_paramsContext abstract_params() {
			return GetRuleContext<Abstract_paramsContext>(0);
		}
		public Stat_enumDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_enumDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_enumDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_enumDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_enumDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_enumDefContext stat_enumDef() {
		Stat_enumDefContext _localctx = new Stat_enumDefContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_stat_enumDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154; Match(LET_SYM);
			State = 155; Match(IDENTIFIER);
			State = 156; Match(EQUALS);
			State = 157; Match(ENUM_SYM);
			State = 158; Match(LBRACE);
			State = 160;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IDENTIFIER) {
				{
				State = 159; abstract_params();
				}
			}

			State = 162; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_functionCallContext : ParserRuleContext {
		public ITerminalNode LBRACKET() { return GetToken(algoParser.LBRACKET, 0); }
		public ITerminalNode RBRACKET() { return GetToken(algoParser.RBRACKET, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public Obj_accessContext obj_access() {
			return GetRuleContext<Obj_accessContext>(0);
		}
		public Literal_paramsContext literal_params() {
			return GetRuleContext<Literal_paramsContext>(0);
		}
		public Stat_functionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_functionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_functionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_functionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_functionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_functionCallContext stat_functionCall() {
		Stat_functionCallContext _localctx = new Stat_functionCallContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_stat_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				{
				State = 164; Match(IDENTIFIER);
				}
				break;

			case 2:
				{
				State = 165; obj_access();
				}
				break;
			}
			State = 168; Match(LBRACKET);
			State = 170;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTEGER) | (1L << FLOAT) | (1L << BOOLEAN) | (1L << STRING) | (1L << RATIONAL) | (1L << NULL) | (1L << OBJ_SYM) | (1L << LSQBR) | (1L << LBRACKET) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 169; literal_params();
				}
			}

			State = 172; Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_functionDefContext : ParserRuleContext {
		public ITerminalNode LET_SYM() { return GetToken(algoParser.LET_SYM, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public ITerminalNode LBRACKET() { return GetToken(algoParser.LBRACKET, 0); }
		public ITerminalNode RBRACKET() { return GetToken(algoParser.RBRACKET, 0); }
		public ITerminalNode EQUALS() { return GetToken(algoParser.EQUALS, 0); }
		public ITerminalNode LBRACE() { return GetToken(algoParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(algoParser.RBRACE, 0); }
		public Abstract_paramsContext abstract_params() {
			return GetRuleContext<Abstract_paramsContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Stat_functionDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_functionDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_functionDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_functionDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_functionDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_functionDefContext stat_functionDef() {
		Stat_functionDefContext _localctx = new Stat_functionDefContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_stat_functionDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174; Match(LET_SYM);
			State = 175; Match(IDENTIFIER);
			State = 176; Match(LBRACKET);
			State = 178;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IDENTIFIER) {
				{
				State = 177; abstract_params();
				}
			}

			State = 180; Match(RBRACKET);
			State = 181; Match(EQUALS);
			State = 182; Match(LBRACE);
			State = 186;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LET_SYM) | (1L << FOR_SYM) | (1L << FOREACH_SYM) | (1L << ADD_SYM) | (1L << REMOVE_SYM) | (1L << WHILE_SYM) | (1L << IF_SYM) | (1L << LIB_SYM) | (1L << IMPORT_SYM) | (1L << RETURN_SYM) | (1L << PRINT_SYM) | (1L << DISREGARD_SYM) | (1L << EXTERNAL_SYM) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 183; statement();
				}
				}
				State = 188;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 189; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_loadFuncExtContext : ParserRuleContext {
		public ITerminalNode EXTERNAL_SYM() { return GetToken(algoParser.EXTERNAL_SYM, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public ITerminalNode STREAMING_SYM() { return GetToken(algoParser.STREAMING_SYM, 0); }
		public Obj_accessContext obj_access() {
			return GetRuleContext<Obj_accessContext>(0);
		}
		public Stat_loadFuncExtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_loadFuncExt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_loadFuncExt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_loadFuncExt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_loadFuncExt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_loadFuncExtContext stat_loadFuncExt() {
		Stat_loadFuncExtContext _localctx = new Stat_loadFuncExtContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_stat_loadFuncExt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191; Match(EXTERNAL_SYM);
			State = 192; Match(IDENTIFIER);
			State = 193; Match(STREAMING_SYM);
			State = 194; obj_access();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_returnContext : ParserRuleContext {
		public ITerminalNode RETURN_SYM() { return GetToken(algoParser.RETURN_SYM, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Stat_returnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_return; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_return(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_return(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_return(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_returnContext stat_return() {
		Stat_returnContext _localctx = new Stat_returnContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_stat_return);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196; Match(RETURN_SYM);
			State = 197; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_forLoopContext : ParserRuleContext {
		public ITerminalNode LBRACKET() { return GetToken(algoParser.LBRACKET, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public ITerminalNode RBRACKET() { return GetToken(algoParser.RBRACKET, 0); }
		public ITerminalNode LBRACE() { return GetToken(algoParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(algoParser.RBRACE, 0); }
		public ITerminalNode FOR_SYM() { return GetToken(algoParser.FOR_SYM, 0); }
		public ITerminalNode FOREACH_SYM() { return GetToken(algoParser.FOREACH_SYM, 0); }
		public ITerminalNode UP_SYM() { return GetToken(algoParser.UP_SYM, 0); }
		public ITerminalNode TO_SYM() { return GetToken(algoParser.TO_SYM, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode IN_SYM() { return GetToken(algoParser.IN_SYM, 0); }
		public Stat_forLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_forLoop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_forLoop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_forLoop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_forLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_forLoopContext stat_forLoop() {
		Stat_forLoopContext _localctx = new Stat_forLoopContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_stat_forLoop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			_la = _input.La(1);
			if ( !(_la==FOR_SYM || _la==FOREACH_SYM) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 200; Match(LBRACKET);
			State = 201; Match(IDENTIFIER);
			State = 207;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case IN_SYM:
				{
				{
				State = 202; Match(IN_SYM);
				State = 203; expr(0);
				}
				}
				break;
			case UP_SYM:
				{
				State = 204; Match(UP_SYM);
				State = 205; Match(TO_SYM);
				State = 206; expr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 209; Match(RBRACKET);
			State = 210; Match(LBRACE);
			State = 214;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LET_SYM) | (1L << FOR_SYM) | (1L << FOREACH_SYM) | (1L << ADD_SYM) | (1L << REMOVE_SYM) | (1L << WHILE_SYM) | (1L << IF_SYM) | (1L << LIB_SYM) | (1L << IMPORT_SYM) | (1L << RETURN_SYM) | (1L << PRINT_SYM) | (1L << DISREGARD_SYM) | (1L << EXTERNAL_SYM) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 211; statement();
				}
				}
				State = 216;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 217; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_whileLoopContext : ParserRuleContext {
		public ITerminalNode WHILE_SYM() { return GetToken(algoParser.WHILE_SYM, 0); }
		public ITerminalNode LBRACKET() { return GetToken(algoParser.LBRACKET, 0); }
		public CheckContext check() {
			return GetRuleContext<CheckContext>(0);
		}
		public ITerminalNode RBRACKET() { return GetToken(algoParser.RBRACKET, 0); }
		public ITerminalNode LBRACE() { return GetToken(algoParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(algoParser.RBRACE, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Stat_whileLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_whileLoop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_whileLoop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_whileLoop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_whileLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_whileLoopContext stat_whileLoop() {
		Stat_whileLoopContext _localctx = new Stat_whileLoopContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_stat_whileLoop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219; Match(WHILE_SYM);
			State = 220; Match(LBRACKET);
			State = 221; check(0);
			State = 222; Match(RBRACKET);
			State = 223; Match(LBRACE);
			State = 227;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LET_SYM) | (1L << FOR_SYM) | (1L << FOREACH_SYM) | (1L << ADD_SYM) | (1L << REMOVE_SYM) | (1L << WHILE_SYM) | (1L << IF_SYM) | (1L << LIB_SYM) | (1L << IMPORT_SYM) | (1L << RETURN_SYM) | (1L << PRINT_SYM) | (1L << DISREGARD_SYM) | (1L << EXTERNAL_SYM) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 224; statement();
				}
				}
				State = 229;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 230; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_ifContext : ParserRuleContext {
		public ITerminalNode IF_SYM() { return GetToken(algoParser.IF_SYM, 0); }
		public ITerminalNode LBRACKET() { return GetToken(algoParser.LBRACKET, 0); }
		public CheckContext check() {
			return GetRuleContext<CheckContext>(0);
		}
		public ITerminalNode RBRACKET() { return GetToken(algoParser.RBRACKET, 0); }
		public ITerminalNode LBRACE() { return GetToken(algoParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(algoParser.RBRACE, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Stat_elifContext[] stat_elif() {
			return GetRuleContexts<Stat_elifContext>();
		}
		public Stat_elifContext stat_elif(int i) {
			return GetRuleContext<Stat_elifContext>(i);
		}
		public Stat_elseContext stat_else() {
			return GetRuleContext<Stat_elseContext>(0);
		}
		public Stat_ifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_if; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_if(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_if(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_if(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_ifContext stat_if() {
		Stat_ifContext _localctx = new Stat_ifContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_stat_if);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 232; Match(IF_SYM);
			State = 233; Match(LBRACKET);
			State = 234; check(0);
			State = 235; Match(RBRACKET);
			State = 236; Match(LBRACE);
			State = 240;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LET_SYM) | (1L << FOR_SYM) | (1L << FOREACH_SYM) | (1L << ADD_SYM) | (1L << REMOVE_SYM) | (1L << WHILE_SYM) | (1L << IF_SYM) | (1L << LIB_SYM) | (1L << IMPORT_SYM) | (1L << RETURN_SYM) | (1L << PRINT_SYM) | (1L << DISREGARD_SYM) | (1L << EXTERNAL_SYM) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 237; statement();
				}
				}
				State = 242;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 243; Match(RBRACE);
			State = 247;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,18,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 244; stat_elif();
					}
					} 
				}
				State = 249;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,18,_ctx);
			}
			State = 251;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ELSE_SYM) {
				{
				State = 250; stat_else();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_printContext : ParserRuleContext {
		public ITerminalNode PRINT_SYM() { return GetToken(algoParser.PRINT_SYM, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Rounding_exprContext rounding_expr() {
			return GetRuleContext<Rounding_exprContext>(0);
		}
		public Stat_printContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_print; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_print(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_print(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_print(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_printContext stat_print() {
		Stat_printContext _localctx = new Stat_printContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_stat_print);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253; Match(PRINT_SYM);
			State = 254; expr(0);
			State = 256;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==TO_SYM) {
				{
				State = 255; rounding_expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_libraryContext : ParserRuleContext {
		public ITerminalNode LIB_SYM() { return GetToken(algoParser.LIB_SYM, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public ITerminalNode LBRACE() { return GetToken(algoParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(algoParser.RBRACE, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Stat_libraryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_library; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_library(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_library(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_library(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_libraryContext stat_library() {
		Stat_libraryContext _localctx = new Stat_libraryContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_stat_library);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258; Match(LIB_SYM);
			State = 259; Match(IDENTIFIER);
			State = 260; Match(LBRACE);
			State = 264;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LET_SYM) | (1L << FOR_SYM) | (1L << FOREACH_SYM) | (1L << ADD_SYM) | (1L << REMOVE_SYM) | (1L << WHILE_SYM) | (1L << IF_SYM) | (1L << LIB_SYM) | (1L << IMPORT_SYM) | (1L << RETURN_SYM) | (1L << PRINT_SYM) | (1L << DISREGARD_SYM) | (1L << EXTERNAL_SYM) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 261; statement();
				}
				}
				State = 266;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 267; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_importContext : ParserRuleContext {
		public ITerminalNode IMPORT_SYM() { return GetToken(algoParser.IMPORT_SYM, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode AS_SYM() { return GetToken(algoParser.AS_SYM, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public Stat_importContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_import; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_import(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_import(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_import(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_importContext stat_import() {
		Stat_importContext _localctx = new Stat_importContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_stat_import);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 269; Match(IMPORT_SYM);
			State = 270; expr(0);
			State = 273;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS_SYM) {
				{
				State = 271; Match(AS_SYM);
				State = 272; Match(IDENTIFIER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_list_addContext : ParserRuleContext {
		public ITerminalNode ADD_SYM() { return GetToken(algoParser.ADD_SYM, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode TO_SYM() { return GetToken(algoParser.TO_SYM, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public Obj_accessContext obj_access() {
			return GetRuleContext<Obj_accessContext>(0);
		}
		public ITerminalNode AT_SYM() { return GetToken(algoParser.AT_SYM, 0); }
		public Stat_list_addContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_list_add; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_list_add(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_list_add(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_list_add(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_list_addContext stat_list_add() {
		Stat_list_addContext _localctx = new Stat_list_addContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_stat_list_add);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275; Match(ADD_SYM);
			State = 276; expr(0);
			State = 277; Match(TO_SYM);
			State = 280;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,23,_ctx) ) {
			case 1:
				{
				State = 278; Match(IDENTIFIER);
				}
				break;

			case 2:
				{
				State = 279; obj_access();
				}
				break;
			}
			State = 284;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AT_SYM) {
				{
				State = 282; Match(AT_SYM);
				State = 283; expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_list_removeContext : ParserRuleContext {
		public ITerminalNode REMOVE_SYM() { return GetToken(algoParser.REMOVE_SYM, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode FROM_SYM() { return GetToken(algoParser.FROM_SYM, 0); }
		public ITerminalNode IN_SYM() { return GetToken(algoParser.IN_SYM, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public Obj_accessContext obj_access() {
			return GetRuleContext<Obj_accessContext>(0);
		}
		public Stat_list_removeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_list_remove; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_list_remove(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_list_remove(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_list_remove(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_list_removeContext stat_list_remove() {
		Stat_list_removeContext _localctx = new Stat_list_removeContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_stat_list_remove);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 286; Match(REMOVE_SYM);
			State = 287; expr(0);
			State = 288;
			_la = _input.La(1);
			if ( !(_la==FROM_SYM || _la==IN_SYM) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 291;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,25,_ctx) ) {
			case 1:
				{
				State = 289; Match(IDENTIFIER);
				}
				break;

			case 2:
				{
				State = 290; obj_access();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_elifContext : ParserRuleContext {
		public ITerminalNode ELSE_SYM() { return GetToken(algoParser.ELSE_SYM, 0); }
		public ITerminalNode IF_SYM() { return GetToken(algoParser.IF_SYM, 0); }
		public ITerminalNode LBRACKET() { return GetToken(algoParser.LBRACKET, 0); }
		public CheckContext check() {
			return GetRuleContext<CheckContext>(0);
		}
		public ITerminalNode RBRACKET() { return GetToken(algoParser.RBRACKET, 0); }
		public ITerminalNode LBRACE() { return GetToken(algoParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(algoParser.RBRACE, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Stat_elifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_elif; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_elif(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_elif(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_elif(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_elifContext stat_elif() {
		Stat_elifContext _localctx = new Stat_elifContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_stat_elif);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293; Match(ELSE_SYM);
			State = 294; Match(IF_SYM);
			State = 295; Match(LBRACKET);
			State = 296; check(0);
			State = 297; Match(RBRACKET);
			State = 298; Match(LBRACE);
			State = 302;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LET_SYM) | (1L << FOR_SYM) | (1L << FOREACH_SYM) | (1L << ADD_SYM) | (1L << REMOVE_SYM) | (1L << WHILE_SYM) | (1L << IF_SYM) | (1L << LIB_SYM) | (1L << IMPORT_SYM) | (1L << RETURN_SYM) | (1L << PRINT_SYM) | (1L << DISREGARD_SYM) | (1L << EXTERNAL_SYM) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 299; statement();
				}
				}
				State = 304;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 305; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_elseContext : ParserRuleContext {
		public ITerminalNode ELSE_SYM() { return GetToken(algoParser.ELSE_SYM, 0); }
		public ITerminalNode LBRACE() { return GetToken(algoParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(algoParser.RBRACE, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Stat_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_else; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_else(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_else(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_else(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_elseContext stat_else() {
		Stat_elseContext _localctx = new Stat_elseContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_stat_else);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 307; Match(ELSE_SYM);
			State = 308; Match(LBRACE);
			State = 312;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LET_SYM) | (1L << FOR_SYM) | (1L << FOREACH_SYM) | (1L << ADD_SYM) | (1L << REMOVE_SYM) | (1L << WHILE_SYM) | (1L << IF_SYM) | (1L << LIB_SYM) | (1L << IMPORT_SYM) | (1L << RETURN_SYM) | (1L << PRINT_SYM) | (1L << DISREGARD_SYM) | (1L << EXTERNAL_SYM) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 309; statement();
				}
				}
				State = 314;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 315; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Literal_paramsContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(algoParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(algoParser.COMMA, i);
		}
		public Literal_paramsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_params; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterLiteral_params(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitLiteral_params(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral_params(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Literal_paramsContext literal_params() {
		Literal_paramsContext _localctx = new Literal_paramsContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_literal_params);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 322;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,28,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 317; expr(0);
					State = 318; Match(COMMA);
					}
					} 
				}
				State = 324;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,28,_ctx);
			}
			State = 325; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Abstract_paramsContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(algoParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(algoParser.IDENTIFIER, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(algoParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(algoParser.COMMA, i);
		}
		public Abstract_paramsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstract_params; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterAbstract_params(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitAbstract_params(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbstract_params(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Abstract_paramsContext abstract_params() {
		Abstract_paramsContext _localctx = new Abstract_paramsContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_abstract_params);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 331;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,29,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 327; Match(IDENTIFIER);
					State = 328; Match(COMMA);
					}
					} 
				}
				State = 333;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,29,_ctx);
			}
			State = 334; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CheckContext : ParserRuleContext {
		public CheckContext check() {
			return GetRuleContext<CheckContext>(0);
		}
		public ITerminalNode BIN_OR() { return GetToken(algoParser.BIN_OR, 0); }
		public CheckfragContext checkfrag() {
			return GetRuleContext<CheckfragContext>(0);
		}
		public ITerminalNode BIN_AND() { return GetToken(algoParser.BIN_AND, 0); }
		public ITerminalNode LBRACKET() { return GetToken(algoParser.LBRACKET, 0); }
		public ITerminalNode RBRACKET() { return GetToken(algoParser.RBRACKET, 0); }
		public ITerminalNode INVERT_SYM() { return GetToken(algoParser.INVERT_SYM, 0); }
		public CheckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_check; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterCheck(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitCheck(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheck(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CheckContext check() {
		return check(0);
	}

	private CheckContext check(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		CheckContext _localctx = new CheckContext(_ctx, _parentState);
		CheckContext _prevctx = _localctx;
		int _startState = 50;
		EnterRecursionRule(_localctx, 50, RULE_check, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 344;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,30,_ctx) ) {
			case 1:
				{
				State = 337; Match(LBRACKET);
				State = 338; check(0);
				State = 339; Match(RBRACKET);
				}
				break;

			case 2:
				{
				State = 341; Match(INVERT_SYM);
				State = 342; check(2);
				}
				break;

			case 3:
				{
				State = 343; checkfrag();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 354;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,32,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 352;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,31,_ctx) ) {
					case 1:
						{
						_localctx = new CheckContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_check);
						State = 346;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 347; Match(BIN_OR);
						State = 348; checkfrag();
						}
						break;

					case 2:
						{
						_localctx = new CheckContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_check);
						State = 349;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 350; Match(BIN_AND);
						State = 351; checkfrag();
						}
						break;
					}
					} 
				}
				State = 356;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,32,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CheckfragContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode GRTR_THAN() { return GetToken(algoParser.GRTR_THAN, 0); }
		public ITerminalNode LESS_THAN() { return GetToken(algoParser.LESS_THAN, 0); }
		public ITerminalNode GRTR_THAN_ET() { return GetToken(algoParser.GRTR_THAN_ET, 0); }
		public ITerminalNode LESS_THAN_ET() { return GetToken(algoParser.LESS_THAN_ET, 0); }
		public ITerminalNode BIN_EQUALS() { return GetToken(algoParser.BIN_EQUALS, 0); }
		public ITerminalNode BIN_NET() { return GetToken(algoParser.BIN_NET, 0); }
		public CheckfragContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checkfrag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterCheckfrag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitCheckfrag(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheckfrag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CheckfragContext checkfrag() {
		CheckfragContext _localctx = new CheckfragContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_checkfrag);
		try {
			State = 382;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,33,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 357; expr(0);
				State = 358; Match(GRTR_THAN);
				State = 359; expr(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 361; expr(0);
				State = 362; Match(LESS_THAN);
				State = 363; expr(0);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 365; expr(0);
				State = 366; Match(GRTR_THAN_ET);
				State = 367; expr(0);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 369; expr(0);
				State = 370; Match(LESS_THAN_ET);
				State = 371; expr(0);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 373; expr(0);
				State = 374; Match(BIN_EQUALS);
				State = 375; expr(0);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 377; expr(0);
				State = 378; Match(BIN_NET);
				State = 379; expr(0);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 381; expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode ADD_OP() { return GetToken(algoParser.ADD_OP, 0); }
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ITerminalNode TAKE_OP() { return GetToken(algoParser.TAKE_OP, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 54;
		EnterRecursionRule(_localctx, 54, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 385; term(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 395;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,35,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 393;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,34,_ctx) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 387;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 388; Match(ADD_OP);
						State = 389; term(0);
						}
						break;

					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 390;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 391; Match(TAKE_OP);
						State = 392; term(0);
						}
						break;
					}
					} 
				}
				State = 397;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,35,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Rounding_exprContext : ParserRuleContext {
		public ITerminalNode TO_SYM() { return GetToken(algoParser.TO_SYM, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode SIG_FIG_SYM() { return GetToken(algoParser.SIG_FIG_SYM, 0); }
		public Rounding_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rounding_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterRounding_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitRounding_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRounding_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rounding_exprContext rounding_expr() {
		Rounding_exprContext _localctx = new Rounding_exprContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_rounding_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 398; Match(TO_SYM);
			State = 399; expr(0);
			State = 400; Match(SIG_FIG_SYM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ITerminalNode MUL_OP() { return GetToken(algoParser.MUL_OP, 0); }
		public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public ITerminalNode DIV_OP() { return GetToken(algoParser.DIV_OP, 0); }
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		return term(0);
	}

	private TermContext term(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		TermContext _localctx = new TermContext(_ctx, _parentState);
		TermContext _prevctx = _localctx;
		int _startState = 58;
		EnterRecursionRule(_localctx, 58, RULE_term, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 403; factor(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 413;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,37,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 411;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,36,_ctx) ) {
					case 1:
						{
						_localctx = new TermContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_term);
						State = 405;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 406; Match(MUL_OP);
						State = 407; factor(0);
						}
						break;

					case 2:
						{
						_localctx = new TermContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_term);
						State = 408;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 409; Match(DIV_OP);
						State = 410; factor(0);
						}
						break;
					}
					} 
				}
				State = 415;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,37,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public ITerminalNode POW_OP() { return GetToken(algoParser.POW_OP, 0); }
		public SubContext sub() {
			return GetRuleContext<SubContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		return factor(0);
	}

	private FactorContext factor(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		FactorContext _localctx = new FactorContext(_ctx, _parentState);
		FactorContext _prevctx = _localctx;
		int _startState = 60;
		EnterRecursionRule(_localctx, 60, RULE_factor, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 417; sub();
			}
			_ctx.stop = _input.Lt(-1);
			State = 424;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,38,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new FactorContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_factor);
					State = 419;
					if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
					State = 420; Match(POW_OP);
					State = 421; sub();
					}
					} 
				}
				State = 426;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,38,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SubContext : ParserRuleContext {
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ITerminalNode LBRACKET() { return GetToken(algoParser.LBRACKET, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RBRACKET() { return GetToken(algoParser.RBRACKET, 0); }
		public SubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sub; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterSub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitSub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubContext sub() {
		SubContext _localctx = new SubContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_sub);
		try {
			State = 432;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case INTEGER:
			case FLOAT:
			case BOOLEAN:
			case STRING:
			case RATIONAL:
			case NULL:
			case OBJ_SYM:
			case LSQBR:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 427; value();
				}
				break;
			case LBRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 428; Match(LBRACKET);
				State = 429; expr(0);
				State = 430; Match(RBRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		public ITerminalNode MUL_OP() { return GetToken(algoParser.MUL_OP, 0); }
		public ITerminalNode DIV_OP() { return GetToken(algoParser.DIV_OP, 0); }
		public ITerminalNode TAKE_OP() { return GetToken(algoParser.TAKE_OP, 0); }
		public ITerminalNode ADD_OP() { return GetToken(algoParser.ADD_OP, 0); }
		public ITerminalNode POW_OP() { return GetToken(algoParser.POW_OP, 0); }
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 434;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD_OP) | (1L << TAKE_OP) | (1L << MUL_OP) | (1L << DIV_OP) | (1L << POW_OP))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Selfmod_opContext : ParserRuleContext {
		public ITerminalNode ADDFROM_OP() { return GetToken(algoParser.ADDFROM_OP, 0); }
		public ITerminalNode TAKEFROM_OP() { return GetToken(algoParser.TAKEFROM_OP, 0); }
		public ITerminalNode MULFROM_OP() { return GetToken(algoParser.MULFROM_OP, 0); }
		public ITerminalNode DIVFROM_OP() { return GetToken(algoParser.DIVFROM_OP, 0); }
		public Selfmod_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selfmod_op; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterSelfmod_op(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitSelfmod_op(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelfmod_op(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Selfmod_opContext selfmod_op() {
		Selfmod_opContext _localctx = new Selfmod_opContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_selfmod_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 436;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADDFROM_OP) | (1L << TAKEFROM_OP) | (1L << DIVFROM_OP) | (1L << MULFROM_OP))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Postfix_opContext : ParserRuleContext {
		public ITerminalNode ADD_PFOP() { return GetToken(algoParser.ADD_PFOP, 0); }
		public ITerminalNode TAKE_PFOP() { return GetToken(algoParser.TAKE_PFOP, 0); }
		public Postfix_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfix_op; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterPostfix_op(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitPostfix_op(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfix_op(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Postfix_opContext postfix_op() {
		Postfix_opContext _localctx = new Postfix_opContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_postfix_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 438;
			_la = _input.La(1);
			if ( !(_la==ADD_PFOP || _la==TAKE_PFOP) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public Stat_functionCallContext stat_functionCall() {
			return GetRuleContext<Stat_functionCallContext>(0);
		}
		public Obj_accessContext obj_access() {
			return GetRuleContext<Obj_accessContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public ITerminalNode INTEGER() { return GetToken(algoParser.INTEGER, 0); }
		public ITerminalNode FLOAT() { return GetToken(algoParser.FLOAT, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(algoParser.BOOLEAN, 0); }
		public ITerminalNode STRING() { return GetToken(algoParser.STRING, 0); }
		public ITerminalNode RATIONAL() { return GetToken(algoParser.RATIONAL, 0); }
		public ITerminalNode NULL() { return GetToken(algoParser.NULL, 0); }
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public Array_accessContext array_access() {
			return GetRuleContext<Array_accessContext>(0);
		}
		public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_value);
		try {
			State = 452;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,40,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 440; stat_functionCall();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 441; obj_access();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 442; Match(IDENTIFIER);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 443; Match(INTEGER);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 444; Match(FLOAT);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 445; Match(BOOLEAN);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 446; Match(STRING);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 447; Match(RATIONAL);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 448; Match(NULL);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 449; array();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 450; array_access();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 451; @object();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Obj_accessContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(algoParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(algoParser.IDENTIFIER, i);
		}
		public ITerminalNode[] POINT() { return GetTokens(algoParser.POINT); }
		public ITerminalNode POINT(int i) {
			return GetToken(algoParser.POINT, i);
		}
		public Obj_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obj_access; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterObj_access(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitObj_access(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObj_access(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Obj_accessContext obj_access() {
		Obj_accessContext _localctx = new Obj_accessContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_obj_access);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 456;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 454; Match(IDENTIFIER);
					State = 455; Match(POINT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 458;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,41,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 460; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterArray(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitArray(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_array);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 462; Match(LSQBR);
			State = 472;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTEGER) | (1L << FLOAT) | (1L << BOOLEAN) | (1L << STRING) | (1L << RATIONAL) | (1L << NULL) | (1L << OBJ_SYM) | (1L << LSQBR) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 468;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,42,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 463; value();
						State = 464; Match(COMMA);
						}
						} 
					}
					State = 470;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,42,_ctx);
				}
				State = 471; value();
				}
			}

			State = 474; Match(RSQBR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_accessContext : ParserRuleContext {
		public Literal_paramsContext literal_params() {
			return GetRuleContext<Literal_paramsContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public Obj_accessContext obj_access() {
			return GetRuleContext<Obj_accessContext>(0);
		}
		public Stat_functionCallContext stat_functionCall() {
			return GetRuleContext<Stat_functionCallContext>(0);
		}
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public Array_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_access; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterArray_access(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitArray_access(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_access(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_accessContext array_access() {
		Array_accessContext _localctx = new Array_accessContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_array_access);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 480;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,44,_ctx) ) {
			case 1:
				{
				State = 476; Match(IDENTIFIER);
				}
				break;

			case 2:
				{
				State = 477; obj_access();
				}
				break;

			case 3:
				{
				State = 478; stat_functionCall();
				}
				break;

			case 4:
				{
				State = 479; array();
				}
				break;
			}
			State = 482; Match(LSQBR);
			State = 483; literal_params();
			State = 484; Match(RSQBR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectContext : ParserRuleContext {
		public ITerminalNode OBJ_SYM() { return GetToken(algoParser.OBJ_SYM, 0); }
		public ITerminalNode LBRACE() { return GetToken(algoParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(algoParser.RBRACE, 0); }
		public Obj_child_definitionsContext obj_child_definitions() {
			return GetRuleContext<Obj_child_definitionsContext>(0);
		}
		public ObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterObject(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitObject(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectContext @object() {
		ObjectContext _localctx = new ObjectContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_object);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 486; Match(OBJ_SYM);
			State = 487; Match(LBRACE);
			State = 489;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LET_SYM) {
				{
				State = 488; obj_child_definitions();
				}
			}

			State = 491; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Obj_child_definitionsContext : ParserRuleContext {
		public Obj_vardefineContext[] obj_vardefine() {
			return GetRuleContexts<Obj_vardefineContext>();
		}
		public Obj_vardefineContext obj_vardefine(int i) {
			return GetRuleContext<Obj_vardefineContext>(i);
		}
		public Obj_funcdefineContext[] obj_funcdefine() {
			return GetRuleContexts<Obj_funcdefineContext>();
		}
		public Obj_funcdefineContext obj_funcdefine(int i) {
			return GetRuleContext<Obj_funcdefineContext>(i);
		}
		public Obj_child_definitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obj_child_definitions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterObj_child_definitions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitObj_child_definitions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObj_child_definitions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Obj_child_definitionsContext obj_child_definitions() {
		Obj_child_definitionsContext _localctx = new Obj_child_definitionsContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_obj_child_definitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 495;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				State = 495;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,46,_ctx) ) {
				case 1:
					{
					State = 493; obj_vardefine();
					}
					break;

				case 2:
					{
					State = 494; obj_funcdefine();
					}
					break;
				}
				}
				State = 497;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==LET_SYM );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Obj_vardefineContext : ParserRuleContext {
		public ITerminalNode LET_SYM() { return GetToken(algoParser.LET_SYM, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public ITerminalNode EQUALS() { return GetToken(algoParser.EQUALS, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode ENDLINE() { return GetToken(algoParser.ENDLINE, 0); }
		public Obj_vardefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obj_vardefine; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterObj_vardefine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitObj_vardefine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObj_vardefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Obj_vardefineContext obj_vardefine() {
		Obj_vardefineContext _localctx = new Obj_vardefineContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_obj_vardefine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 499; Match(LET_SYM);
			State = 500; Match(IDENTIFIER);
			State = 501; Match(EQUALS);
			State = 502; expr(0);
			State = 503; Match(ENDLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Obj_funcdefineContext : ParserRuleContext {
		public ITerminalNode LET_SYM() { return GetToken(algoParser.LET_SYM, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public ITerminalNode LBRACKET() { return GetToken(algoParser.LBRACKET, 0); }
		public ITerminalNode RBRACKET() { return GetToken(algoParser.RBRACKET, 0); }
		public ITerminalNode EQUALS() { return GetToken(algoParser.EQUALS, 0); }
		public ITerminalNode LBRACE() { return GetToken(algoParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(algoParser.RBRACE, 0); }
		public Abstract_paramsContext abstract_params() {
			return GetRuleContext<Abstract_paramsContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Obj_funcdefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obj_funcdefine; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterObj_funcdefine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitObj_funcdefine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObj_funcdefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Obj_funcdefineContext obj_funcdefine() {
		Obj_funcdefineContext _localctx = new Obj_funcdefineContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_obj_funcdefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 505; Match(LET_SYM);
			State = 506; Match(IDENTIFIER);
			State = 507; Match(LBRACKET);
			State = 509;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IDENTIFIER) {
				{
				State = 508; abstract_params();
				}
			}

			State = 511; Match(RBRACKET);
			State = 512; Match(EQUALS);
			State = 513; Match(LBRACE);
			State = 517;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LET_SYM) | (1L << FOR_SYM) | (1L << FOREACH_SYM) | (1L << ADD_SYM) | (1L << REMOVE_SYM) | (1L << WHILE_SYM) | (1L << IF_SYM) | (1L << LIB_SYM) | (1L << IMPORT_SYM) | (1L << RETURN_SYM) | (1L << PRINT_SYM) | (1L << DISREGARD_SYM) | (1L << EXTERNAL_SYM) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 514; statement();
				}
				}
				State = 519;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 520; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 25: return check_sempred((CheckContext)_localctx, predIndex);

		case 27: return expr_sempred((ExprContext)_localctx, predIndex);

		case 29: return term_sempred((TermContext)_localctx, predIndex);

		case 30: return factor_sempred((FactorContext)_localctx, predIndex);
		}
		return true;
	}
	private bool check_sempred(CheckContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 5);

		case 1: return Precpred(_ctx, 4);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(_ctx, 3);

		case 3: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool term_sempred(TermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(_ctx, 3);

		case 5: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool factor_sempred(FactorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(_ctx, 2);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x42\x20D\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x3\x2\x3\x2\x3\x2\x3\x3\a\x3]\n\x3\f\x3\xE\x3`\v\x3\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x5\x4o\n\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4x\n"+
		"\x4\x5\x4z\n\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x5\x6\x83\n"+
		"\x6\x3\x6\x3\x6\x3\x6\x5\x6\x88\n\x6\x3\a\x3\a\x5\a\x8C\n\a\x3\a\x3\a"+
		"\x3\a\x3\b\x3\b\x5\b\x93\n\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x5\t\x9B\n"+
		"\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x5\n\xA3\n\n\x3\n\x3\n\x3\v\x3\v\x5\v"+
		"\xA9\n\v\x3\v\x3\v\x5\v\xAD\n\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x5\f\xB5"+
		"\n\f\x3\f\x3\f\x3\f\x3\f\a\f\xBB\n\f\f\f\xE\f\xBE\v\f\x3\f\x3\f\x3\r\x3"+
		"\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x5\xF\xD2\n\xF\x3\xF\x3\xF\x3\xF\a\xF\xD7\n\xF\f\xF\xE\xF"+
		"\xDA\v\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\a\x10"+
		"\xE4\n\x10\f\x10\xE\x10\xE7\v\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3"+
		"\x11\x3\x11\x3\x11\a\x11\xF1\n\x11\f\x11\xE\x11\xF4\v\x11\x3\x11\x3\x11"+
		"\a\x11\xF8\n\x11\f\x11\xE\x11\xFB\v\x11\x3\x11\x5\x11\xFE\n\x11\x3\x12"+
		"\x3\x12\x3\x12\x5\x12\x103\n\x12\x3\x13\x3\x13\x3\x13\x3\x13\a\x13\x109"+
		"\n\x13\f\x13\xE\x13\x10C\v\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3\x14"+
		"\x5\x14\x114\n\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\x11B\n\x15"+
		"\x3\x15\x3\x15\x5\x15\x11F\n\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x5"+
		"\x16\x126\n\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\a\x17"+
		"\x12F\n\x17\f\x17\xE\x17\x132\v\x17\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18"+
		"\a\x18\x139\n\x18\f\x18\xE\x18\x13C\v\x18\x3\x18\x3\x18\x3\x19\x3\x19"+
		"\x3\x19\a\x19\x143\n\x19\f\x19\xE\x19\x146\v\x19\x3\x19\x3\x19\x3\x1A"+
		"\x3\x1A\a\x1A\x14C\n\x1A\f\x1A\xE\x1A\x14F\v\x1A\x3\x1A\x3\x1A\x3\x1B"+
		"\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x15B\n\x1B\x3"+
		"\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\a\x1B\x163\n\x1B\f\x1B\xE\x1B"+
		"\x166\v\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3"+
		"\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3"+
		"\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x181\n\x1C\x3\x1D"+
		"\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\a\x1D\x18C\n"+
		"\x1D\f\x1D\xE\x1D\x18F\v\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F"+
		"\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\a\x1F\x19E\n\x1F\f\x1F"+
		"\xE\x1F\x1A1\v\x1F\x3 \x3 \x3 \x3 \x3 \x3 \a \x1A9\n \f \xE \x1AC\v \x3"+
		"!\x3!\x3!\x3!\x3!\x5!\x1B3\n!\x3\"\x3\"\x3#\x3#\x3$\x3$\x3%\x3%\x3%\x3"+
		"%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x5%\x1C7\n%\x3&\x3&\x6&\x1CB\n&\r&\xE"+
		"&\x1CC\x3&\x3&\x3\'\x3\'\x3\'\x3\'\a\'\x1D5\n\'\f\'\xE\'\x1D8\v\'\x3\'"+
		"\x5\'\x1DB\n\'\x3\'\x3\'\x3(\x3(\x3(\x3(\x5(\x1E3\n(\x3(\x3(\x3(\x3(\x3"+
		")\x3)\x3)\x5)\x1EC\n)\x3)\x3)\x3*\x3*\x6*\x1F2\n*\r*\xE*\x1F3\x3+\x3+"+
		"\x3+\x3+\x3+\x3+\x3,\x3,\x3,\x3,\x5,\x200\n,\x3,\x3,\x3,\x3,\a,\x206\n"+
		",\f,\xE,\x209\v,\x3,\x3,\x3,\x2\x2\x6\x34\x38<>-\x2\x2\x4\x2\x6\x2\b\x2"+
		"\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E"+
		"\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2"+
		":\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2"+
		"\x2\a\x3\x2\n\v\x4\x2\xF\xF\x11\x11\x3\x2+/\x3\x2\x31\x34\x3\x2\x35\x36"+
		"\x234\x2X\x3\x2\x2\x2\x4^\x3\x2\x2\x2\x6y\x3\x2\x2\x2\b{\x3\x2\x2\x2\n"+
		"\x82\x3\x2\x2\x2\f\x8B\x3\x2\x2\x2\xE\x92\x3\x2\x2\x2\x10\x96\x3\x2\x2"+
		"\x2\x12\x9C\x3\x2\x2\x2\x14\xA8\x3\x2\x2\x2\x16\xB0\x3\x2\x2\x2\x18\xC1"+
		"\x3\x2\x2\x2\x1A\xC6\x3\x2\x2\x2\x1C\xC9\x3\x2\x2\x2\x1E\xDD\x3\x2\x2"+
		"\x2 \xEA\x3\x2\x2\x2\"\xFF\x3\x2\x2\x2$\x104\x3\x2\x2\x2&\x10F\x3\x2\x2"+
		"\x2(\x115\x3\x2\x2\x2*\x120\x3\x2\x2\x2,\x127\x3\x2\x2\x2.\x135\x3\x2"+
		"\x2\x2\x30\x144\x3\x2\x2\x2\x32\x14D\x3\x2\x2\x2\x34\x15A\x3\x2\x2\x2"+
		"\x36\x180\x3\x2\x2\x2\x38\x182\x3\x2\x2\x2:\x190\x3\x2\x2\x2<\x194\x3"+
		"\x2\x2\x2>\x1A2\x3\x2\x2\x2@\x1B2\x3\x2\x2\x2\x42\x1B4\x3\x2\x2\x2\x44"+
		"\x1B6\x3\x2\x2\x2\x46\x1B8\x3\x2\x2\x2H\x1C6\x3\x2\x2\x2J\x1CA\x3\x2\x2"+
		"\x2L\x1D0\x3\x2\x2\x2N\x1E2\x3\x2\x2\x2P\x1E8\x3\x2\x2\x2R\x1F1\x3\x2"+
		"\x2\x2T\x1F5\x3\x2\x2\x2V\x1FB\x3\x2\x2\x2XY\x5\x4\x3\x2YZ\a\x2\x2\x3"+
		"Z\x3\x3\x2\x2\x2[]\x5\x6\x4\x2\\[\x3\x2\x2\x2]`\x3\x2\x2\x2^\\\x3\x2\x2"+
		"\x2^_\x3\x2\x2\x2_\x5\x3\x2\x2\x2`^\x3\x2\x2\x2\x61o\x5\b\x5\x2\x62o\x5"+
		"\x12\n\x2\x63o\x5\x14\v\x2\x64o\x5\"\x12\x2\x65o\x5\n\x6\x2\x66o\x5\f"+
		"\a\x2go\x5\xE\b\x2ho\x5\x1A\xE\x2io\x5\x10\t\x2jo\x5&\x14\x2ko\x5\x18"+
		"\r\x2lo\x5(\x15\x2mo\x5*\x16\x2n\x61\x3\x2\x2\x2n\x62\x3\x2\x2\x2n\x63"+
		"\x3\x2\x2\x2n\x64\x3\x2\x2\x2n\x65\x3\x2\x2\x2n\x66\x3\x2\x2\x2ng\x3\x2"+
		"\x2\x2nh\x3\x2\x2\x2ni\x3\x2\x2\x2nj\x3\x2\x2\x2nk\x3\x2\x2\x2nl\x3\x2"+
		"\x2\x2nm\x3\x2\x2\x2op\x3\x2\x2\x2pq\a \x2\x2qz\x3\x2\x2\x2rx\x5\x1C\xF"+
		"\x2sx\x5\x16\f\x2tx\x5 \x11\x2ux\x5$\x13\x2vx\x5\x1E\x10\x2wr\x3\x2\x2"+
		"\x2ws\x3\x2\x2\x2wt\x3\x2\x2\x2wu\x3\x2\x2\x2wv\x3\x2\x2\x2xz\x3\x2\x2"+
		"\x2yn\x3\x2\x2\x2yw\x3\x2\x2\x2z\a\x3\x2\x2\x2{|\a\t\x2\x2|}\a?\x2\x2"+
		"}~\a!\x2\x2~\x7F\x5\x38\x1D\x2\x7F\t\x3\x2\x2\x2\x80\x83\a?\x2\x2\x81"+
		"\x83\x5J&\x2\x82\x80\x3\x2\x2\x2\x82\x81\x3\x2\x2\x2\x83\x84\x3\x2\x2"+
		"\x2\x84\x85\a!\x2\x2\x85\x87\x5\x38\x1D\x2\x86\x88\x5:\x1E\x2\x87\x86"+
		"\x3\x2\x2\x2\x87\x88\x3\x2\x2\x2\x88\v\x3\x2\x2\x2\x89\x8C\a?\x2\x2\x8A"+
		"\x8C\x5J&\x2\x8B\x89\x3\x2\x2\x2\x8B\x8A\x3\x2\x2\x2\x8C\x8D\x3\x2\x2"+
		"\x2\x8D\x8E\x5\x44#\x2\x8E\x8F\x5\x38\x1D\x2\x8F\r\x3\x2\x2\x2\x90\x93"+
		"\a?\x2\x2\x91\x93\x5J&\x2\x92\x90\x3\x2\x2\x2\x92\x91\x3\x2\x2\x2\x93"+
		"\x94\x3\x2\x2\x2\x94\x95\x5\x46$\x2\x95\xF\x3\x2\x2\x2\x96\x9A\a\x1E\x2"+
		"\x2\x97\x9B\a?\x2\x2\x98\x9B\x5J&\x2\x99\x9B\a-\x2\x2\x9A\x97\x3\x2\x2"+
		"\x2\x9A\x98\x3\x2\x2\x2\x9A\x99\x3\x2\x2\x2\x9B\x11\x3\x2\x2\x2\x9C\x9D"+
		"\a\t\x2\x2\x9D\x9E\a?\x2\x2\x9E\x9F\a!\x2\x2\x9F\xA0\a\x16\x2\x2\xA0\xA2"+
		"\a#\x2\x2\xA1\xA3\x5\x32\x1A\x2\xA2\xA1\x3\x2\x2\x2\xA2\xA3\x3\x2\x2\x2"+
		"\xA3\xA4\x3\x2\x2\x2\xA4\xA5\a$\x2\x2\xA5\x13\x3\x2\x2\x2\xA6\xA9\a?\x2"+
		"\x2\xA7\xA9\x5J&\x2\xA8\xA6\x3\x2\x2\x2\xA8\xA7\x3\x2\x2\x2\xA9\xAA\x3"+
		"\x2\x2\x2\xAA\xAC\a)\x2\x2\xAB\xAD\x5\x30\x19\x2\xAC\xAB\x3\x2\x2\x2\xAC"+
		"\xAD\x3\x2\x2\x2\xAD\xAE\x3\x2\x2\x2\xAE\xAF\a*\x2\x2\xAF\x15\x3\x2\x2"+
		"\x2\xB0\xB1\a\t\x2\x2\xB1\xB2\a?\x2\x2\xB2\xB4\a)\x2\x2\xB3\xB5\x5\x32"+
		"\x1A\x2\xB4\xB3\x3\x2\x2\x2\xB4\xB5\x3\x2\x2\x2\xB5\xB6\x3\x2\x2\x2\xB6"+
		"\xB7\a*\x2\x2\xB7\xB8\a!\x2\x2\xB8\xBC\a#\x2\x2\xB9\xBB\x5\x6\x4\x2\xBA"+
		"\xB9\x3\x2\x2\x2\xBB\xBE\x3\x2\x2\x2\xBC\xBA\x3\x2\x2\x2\xBC\xBD\x3\x2"+
		"\x2\x2\xBD\xBF\x3\x2\x2\x2\xBE\xBC\x3\x2\x2\x2\xBF\xC0\a$\x2\x2\xC0\x17"+
		"\x3\x2\x2\x2\xC1\xC2\a\x1F\x2\x2\xC2\xC3\a?\x2\x2\xC3\xC4\a(\x2\x2\xC4"+
		"\xC5\x5J&\x2\xC5\x19\x3\x2\x2\x2\xC6\xC7\a\x1C\x2\x2\xC7\xC8\x5\x38\x1D"+
		"\x2\xC8\x1B\x3\x2\x2\x2\xC9\xCA\t\x2\x2\x2\xCA\xCB\a)\x2\x2\xCB\xD1\a"+
		"?\x2\x2\xCC\xCD\a\x11\x2\x2\xCD\xD2\x5\x38\x1D\x2\xCE\xCF\a\x13\x2\x2"+
		"\xCF\xD0\a\x14\x2\x2\xD0\xD2\x5\x38\x1D\x2\xD1\xCC\x3\x2\x2\x2\xD1\xCE"+
		"\x3\x2\x2\x2\xD2\xD3\x3\x2\x2\x2\xD3\xD4\a*\x2\x2\xD4\xD8\a#\x2\x2\xD5"+
		"\xD7\x5\x6\x4\x2\xD6\xD5\x3\x2\x2\x2\xD7\xDA\x3\x2\x2\x2\xD8\xD6\x3\x2"+
		"\x2\x2\xD8\xD9\x3\x2\x2\x2\xD9\xDB\x3\x2\x2\x2\xDA\xD8\x3\x2\x2\x2\xDB"+
		"\xDC\a$\x2\x2\xDC\x1D\x3\x2\x2\x2\xDD\xDE\a\x10\x2\x2\xDE\xDF\a)\x2\x2"+
		"\xDF\xE0\x5\x34\x1B\x2\xE0\xE1\a*\x2\x2\xE1\xE5\a#\x2\x2\xE2\xE4\x5\x6"+
		"\x4\x2\xE3\xE2\x3\x2\x2\x2\xE4\xE7\x3\x2\x2\x2\xE5\xE3\x3\x2\x2\x2\xE5"+
		"\xE6\x3\x2\x2\x2\xE6\xE8\x3\x2\x2\x2\xE7\xE5\x3\x2\x2\x2\xE8\xE9\a$\x2"+
		"\x2\xE9\x1F\x3\x2\x2\x2\xEA\xEB\a\x12\x2\x2\xEB\xEC\a)\x2\x2\xEC\xED\x5"+
		"\x34\x1B\x2\xED\xEE\a*\x2\x2\xEE\xF2\a#\x2\x2\xEF\xF1\x5\x6\x4\x2\xF0"+
		"\xEF\x3\x2\x2\x2\xF1\xF4\x3\x2\x2\x2\xF2\xF0\x3\x2\x2\x2\xF2\xF3\x3\x2"+
		"\x2\x2\xF3\xF5\x3\x2\x2\x2\xF4\xF2\x3\x2\x2\x2\xF5\xF9\a$\x2\x2\xF6\xF8"+
		"\x5,\x17\x2\xF7\xF6\x3\x2\x2\x2\xF8\xFB\x3\x2\x2\x2\xF9\xF7\x3\x2\x2\x2"+
		"\xF9\xFA\x3\x2\x2\x2\xFA\xFD\x3\x2\x2\x2\xFB\xF9\x3\x2\x2\x2\xFC\xFE\x5"+
		".\x18\x2\xFD\xFC\x3\x2\x2\x2\xFD\xFE\x3\x2\x2\x2\xFE!\x3\x2\x2\x2\xFF"+
		"\x100\a\x1D\x2\x2\x100\x102\x5\x38\x1D\x2\x101\x103\x5:\x1E\x2\x102\x101"+
		"\x3\x2\x2\x2\x102\x103\x3\x2\x2\x2\x103#\x3\x2\x2\x2\x104\x105\a\x17\x2"+
		"\x2\x105\x106\a?\x2\x2\x106\x10A\a#\x2\x2\x107\x109\x5\x6\x4\x2\x108\x107"+
		"\x3\x2\x2\x2\x109\x10C\x3\x2\x2\x2\x10A\x108\x3\x2\x2\x2\x10A\x10B\x3"+
		"\x2\x2\x2\x10B\x10D\x3\x2\x2\x2\x10C\x10A\x3\x2\x2\x2\x10D\x10E\a$\x2"+
		"\x2\x10E%\x3\x2\x2\x2\x10F\x110\a\x1B\x2\x2\x110\x113\x5\x38\x1D\x2\x111"+
		"\x112\a\x15\x2\x2\x112\x114\a?\x2\x2\x113\x111\x3\x2\x2\x2\x113\x114\x3"+
		"\x2\x2\x2\x114\'\x3\x2\x2\x2\x115\x116\a\f\x2\x2\x116\x117\x5\x38\x1D"+
		"\x2\x117\x11A\a\x14\x2\x2\x118\x11B\a?\x2\x2\x119\x11B\x5J&\x2\x11A\x118"+
		"\x3\x2\x2\x2\x11A\x119\x3\x2\x2\x2\x11B\x11E\x3\x2\x2\x2\x11C\x11D\a\r"+
		"\x2\x2\x11D\x11F\x5\x38\x1D\x2\x11E\x11C\x3\x2\x2\x2\x11E\x11F\x3\x2\x2"+
		"\x2\x11F)\x3\x2\x2\x2\x120\x121\a\xE\x2\x2\x121\x122\x5\x38\x1D\x2\x122"+
		"\x125\t\x3\x2\x2\x123\x126\a?\x2\x2\x124\x126\x5J&\x2\x125\x123\x3\x2"+
		"\x2\x2\x125\x124\x3\x2\x2\x2\x126+\x3\x2\x2\x2\x127\x128\a\x1A\x2\x2\x128"+
		"\x129\a\x12\x2\x2\x129\x12A\a)\x2\x2\x12A\x12B\x5\x34\x1B\x2\x12B\x12C"+
		"\a*\x2\x2\x12C\x130\a#\x2\x2\x12D\x12F\x5\x6\x4\x2\x12E\x12D\x3\x2\x2"+
		"\x2\x12F\x132\x3\x2\x2\x2\x130\x12E\x3\x2\x2\x2\x130\x131\x3\x2\x2\x2"+
		"\x131\x133\x3\x2\x2\x2\x132\x130\x3\x2\x2\x2\x133\x134\a$\x2\x2\x134-"+
		"\x3\x2\x2\x2\x135\x136\a\x1A\x2\x2\x136\x13A\a#\x2\x2\x137\x139\x5\x6"+
		"\x4\x2\x138\x137\x3\x2\x2\x2\x139\x13C\x3\x2\x2\x2\x13A\x138\x3\x2\x2"+
		"\x2\x13A\x13B\x3\x2\x2\x2\x13B\x13D\x3\x2\x2\x2\x13C\x13A\x3\x2\x2\x2"+
		"\x13D\x13E\a$\x2\x2\x13E/\x3\x2\x2\x2\x13F\x140\x5\x38\x1D\x2\x140\x141"+
		"\a\"\x2\x2\x141\x143\x3\x2\x2\x2\x142\x13F\x3\x2\x2\x2\x143\x146\x3\x2"+
		"\x2\x2\x144\x142\x3\x2\x2\x2\x144\x145\x3\x2\x2\x2\x145\x147\x3\x2\x2"+
		"\x2\x146\x144\x3\x2\x2\x2\x147\x148\x5\x38\x1D\x2\x148\x31\x3\x2\x2\x2"+
		"\x149\x14A\a?\x2\x2\x14A\x14C\a\"\x2\x2\x14B\x149\x3\x2\x2\x2\x14C\x14F"+
		"\x3\x2\x2\x2\x14D\x14B\x3\x2\x2\x2\x14D\x14E\x3\x2\x2\x2\x14E\x150\x3"+
		"\x2\x2\x2\x14F\x14D\x3\x2\x2\x2\x150\x151\a?\x2\x2\x151\x33\x3\x2\x2\x2"+
		"\x152\x153\b\x1B\x1\x2\x153\x154\a)\x2\x2\x154\x155\x5\x34\x1B\x2\x155"+
		"\x156\a*\x2\x2\x156\x15B\x3\x2\x2\x2\x157\x158\a\'\x2\x2\x158\x15B\x5"+
		"\x34\x1B\x4\x159\x15B\x5\x36\x1C\x2\x15A\x152\x3\x2\x2\x2\x15A\x157\x3"+
		"\x2\x2\x2\x15A\x159\x3\x2\x2\x2\x15B\x164\x3\x2\x2\x2\x15C\x15D\f\a\x2"+
		"\x2\x15D\x15E\a\x37\x2\x2\x15E\x163\x5\x36\x1C\x2\x15F\x160\f\x6\x2\x2"+
		"\x160\x161\a\x38\x2\x2\x161\x163\x5\x36\x1C\x2\x162\x15C\x3\x2\x2\x2\x162"+
		"\x15F\x3\x2\x2\x2\x163\x166\x3\x2\x2\x2\x164\x162\x3\x2\x2\x2\x164\x165"+
		"\x3\x2\x2\x2\x165\x35\x3\x2\x2\x2\x166\x164\x3\x2\x2\x2\x167\x168\x5\x38"+
		"\x1D\x2\x168\x169\a;\x2\x2\x169\x16A\x5\x38\x1D\x2\x16A\x181\x3\x2\x2"+
		"\x2\x16B\x16C\x5\x38\x1D\x2\x16C\x16D\a<\x2\x2\x16D\x16E\x5\x38\x1D\x2"+
		"\x16E\x181\x3\x2\x2\x2\x16F\x170\x5\x38\x1D\x2\x170\x171\a=\x2\x2\x171"+
		"\x172\x5\x38\x1D\x2\x172\x181\x3\x2\x2\x2\x173\x174\x5\x38\x1D\x2\x174"+
		"\x175\a>\x2\x2\x175\x176\x5\x38\x1D\x2\x176\x181\x3\x2\x2\x2\x177\x178"+
		"\x5\x38\x1D\x2\x178\x179\a:\x2\x2\x179\x17A\x5\x38\x1D\x2\x17A\x181\x3"+
		"\x2\x2\x2\x17B\x17C\x5\x38\x1D\x2\x17C\x17D\a\x39\x2\x2\x17D\x17E\x5\x38"+
		"\x1D\x2\x17E\x181\x3\x2\x2\x2\x17F\x181\x5\x38\x1D\x2\x180\x167\x3\x2"+
		"\x2\x2\x180\x16B\x3\x2\x2\x2\x180\x16F\x3\x2\x2\x2\x180\x173\x3\x2\x2"+
		"\x2\x180\x177\x3\x2\x2\x2\x180\x17B\x3\x2\x2\x2\x180\x17F\x3\x2\x2\x2"+
		"\x181\x37\x3\x2\x2\x2\x182\x183\b\x1D\x1\x2\x183\x184\x5<\x1F\x2\x184"+
		"\x18D\x3\x2\x2\x2\x185\x186\f\x5\x2\x2\x186\x187\a+\x2\x2\x187\x18C\x5"+
		"<\x1F\x2\x188\x189\f\x4\x2\x2\x189\x18A\a,\x2\x2\x18A\x18C\x5<\x1F\x2"+
		"\x18B\x185\x3\x2\x2\x2\x18B\x188\x3\x2\x2\x2\x18C\x18F\x3\x2\x2\x2\x18D"+
		"\x18B\x3\x2\x2\x2\x18D\x18E\x3\x2\x2\x2\x18E\x39\x3\x2\x2\x2\x18F\x18D"+
		"\x3\x2\x2\x2\x190\x191\a\x14\x2\x2\x191\x192\x5\x38\x1D\x2\x192\x193\a"+
		"\x18\x2\x2\x193;\x3\x2\x2\x2\x194\x195\b\x1F\x1\x2\x195\x196\x5> \x2\x196"+
		"\x19F\x3\x2\x2\x2\x197\x198\f\x5\x2\x2\x198\x199\a-\x2\x2\x199\x19E\x5"+
		"> \x2\x19A\x19B\f\x4\x2\x2\x19B\x19C\a.\x2\x2\x19C\x19E\x5> \x2\x19D\x197"+
		"\x3\x2\x2\x2\x19D\x19A\x3\x2\x2\x2\x19E\x1A1\x3\x2\x2\x2\x19F\x19D\x3"+
		"\x2\x2\x2\x19F\x1A0\x3\x2\x2\x2\x1A0=\x3\x2\x2\x2\x1A1\x19F\x3\x2\x2\x2"+
		"\x1A2\x1A3\b \x1\x2\x1A3\x1A4\x5@!\x2\x1A4\x1AA\x3\x2\x2\x2\x1A5\x1A6"+
		"\f\x4\x2\x2\x1A6\x1A7\a/\x2\x2\x1A7\x1A9\x5@!\x2\x1A8\x1A5\x3\x2\x2\x2"+
		"\x1A9\x1AC\x3\x2\x2\x2\x1AA\x1A8\x3\x2\x2\x2\x1AA\x1AB\x3\x2\x2\x2\x1AB"+
		"?\x3\x2\x2\x2\x1AC\x1AA\x3\x2\x2\x2\x1AD\x1B3\x5H%\x2\x1AE\x1AF\a)\x2"+
		"\x2\x1AF\x1B0\x5\x38\x1D\x2\x1B0\x1B1\a*\x2\x2\x1B1\x1B3\x3\x2\x2\x2\x1B2"+
		"\x1AD\x3\x2\x2\x2\x1B2\x1AE\x3\x2\x2\x2\x1B3\x41\x3\x2\x2\x2\x1B4\x1B5"+
		"\t\x4\x2\x2\x1B5\x43\x3\x2\x2\x2\x1B6\x1B7\t\x5\x2\x2\x1B7\x45\x3\x2\x2"+
		"\x2\x1B8\x1B9\t\x6\x2\x2\x1B9G\x3\x2\x2\x2\x1BA\x1C7\x5\x14\v\x2\x1BB"+
		"\x1C7\x5J&\x2\x1BC\x1C7\a?\x2\x2\x1BD\x1C7\a\x3\x2\x2\x1BE\x1C7\a\x4\x2"+
		"\x2\x1BF\x1C7\a\x5\x2\x2\x1C0\x1C7\a\x6\x2\x2\x1C1\x1C7\a\a\x2\x2\x1C2"+
		"\x1C7\a\b\x2\x2\x1C3\x1C7\x5L\'\x2\x1C4\x1C7\x5N(\x2\x1C5\x1C7\x5P)\x2"+
		"\x1C6\x1BA\x3\x2\x2\x2\x1C6\x1BB\x3\x2\x2\x2\x1C6\x1BC\x3\x2\x2\x2\x1C6"+
		"\x1BD\x3\x2\x2\x2\x1C6\x1BE\x3\x2\x2\x2\x1C6\x1BF\x3\x2\x2\x2\x1C6\x1C0"+
		"\x3\x2\x2\x2\x1C6\x1C1\x3\x2\x2\x2\x1C6\x1C2\x3\x2\x2\x2\x1C6\x1C3\x3"+
		"\x2\x2\x2\x1C6\x1C4\x3\x2\x2\x2\x1C6\x1C5\x3\x2\x2\x2\x1C7I\x3\x2\x2\x2"+
		"\x1C8\x1C9\a?\x2\x2\x1C9\x1CB\a\x30\x2\x2\x1CA\x1C8\x3\x2\x2\x2\x1CB\x1CC"+
		"\x3\x2\x2\x2\x1CC\x1CA\x3\x2\x2\x2\x1CC\x1CD\x3\x2\x2\x2\x1CD\x1CE\x3"+
		"\x2\x2\x2\x1CE\x1CF\a?\x2\x2\x1CFK\x3\x2\x2\x2\x1D0\x1DA\a%\x2\x2\x1D1"+
		"\x1D2\x5H%\x2\x1D2\x1D3\a\"\x2\x2\x1D3\x1D5\x3\x2\x2\x2\x1D4\x1D1\x3\x2"+
		"\x2\x2\x1D5\x1D8\x3\x2\x2\x2\x1D6\x1D4\x3\x2\x2\x2\x1D6\x1D7\x3\x2\x2"+
		"\x2\x1D7\x1D9\x3\x2\x2\x2\x1D8\x1D6\x3\x2\x2\x2\x1D9\x1DB\x5H%\x2\x1DA"+
		"\x1D6\x3\x2\x2\x2\x1DA\x1DB\x3\x2\x2\x2\x1DB\x1DC\x3\x2\x2\x2\x1DC\x1DD"+
		"\a&\x2\x2\x1DDM\x3\x2\x2\x2\x1DE\x1E3\a?\x2\x2\x1DF\x1E3\x5J&\x2\x1E0"+
		"\x1E3\x5\x14\v\x2\x1E1\x1E3\x5L\'\x2\x1E2\x1DE\x3\x2\x2\x2\x1E2\x1DF\x3"+
		"\x2\x2\x2\x1E2\x1E0\x3\x2\x2\x2\x1E2\x1E1\x3\x2\x2\x2\x1E3\x1E4\x3\x2"+
		"\x2\x2\x1E4\x1E5\a%\x2\x2\x1E5\x1E6\x5\x30\x19\x2\x1E6\x1E7\a&\x2\x2\x1E7"+
		"O\x3\x2\x2\x2\x1E8\x1E9\a\x19\x2\x2\x1E9\x1EB\a#\x2\x2\x1EA\x1EC\x5R*"+
		"\x2\x1EB\x1EA\x3\x2\x2\x2\x1EB\x1EC\x3\x2\x2\x2\x1EC\x1ED\x3\x2\x2\x2"+
		"\x1ED\x1EE\a$\x2\x2\x1EEQ\x3\x2\x2\x2\x1EF\x1F2\x5T+\x2\x1F0\x1F2\x5V"+
		",\x2\x1F1\x1EF\x3\x2\x2\x2\x1F1\x1F0\x3\x2\x2\x2\x1F2\x1F3\x3\x2\x2\x2"+
		"\x1F3\x1F1\x3\x2\x2\x2\x1F3\x1F4\x3\x2\x2\x2\x1F4S\x3\x2\x2\x2\x1F5\x1F6"+
		"\a\t\x2\x2\x1F6\x1F7\a?\x2\x2\x1F7\x1F8\a!\x2\x2\x1F8\x1F9\x5\x38\x1D"+
		"\x2\x1F9\x1FA\a \x2\x2\x1FAU\x3\x2\x2\x2\x1FB\x1FC\a\t\x2\x2\x1FC\x1FD"+
		"\a?\x2\x2\x1FD\x1FF\a)\x2\x2\x1FE\x200\x5\x32\x1A\x2\x1FF\x1FE\x3\x2\x2"+
		"\x2\x1FF\x200\x3\x2\x2\x2\x200\x201\x3\x2\x2\x2\x201\x202\a*\x2\x2\x202"+
		"\x203\a!\x2\x2\x203\x207\a#\x2\x2\x204\x206\x5\x6\x4\x2\x205\x204\x3\x2"+
		"\x2\x2\x206\x209\x3\x2\x2\x2\x207\x205\x3\x2\x2\x2\x207\x208\x3\x2\x2"+
		"\x2\x208\x20A\x3\x2\x2\x2\x209\x207\x3\x2\x2\x2\x20A\x20B\a$\x2\x2\x20B"+
		"W\x3\x2\x2\x2\x34^nwy\x82\x87\x8B\x92\x9A\xA2\xA8\xAC\xB4\xBC\xD1\xD8"+
		"\xE5\xF2\xF9\xFD\x102\x10A\x113\x11A\x11E\x125\x130\x13A\x144\x14D\x15A"+
		"\x162\x164\x180\x18B\x18D\x19D\x19F\x1AA\x1B2\x1C6\x1CC\x1D6\x1DA\x1E2"+
		"\x1EB\x1F1\x1F3\x1FF\x207";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Algo
