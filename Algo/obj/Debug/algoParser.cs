//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\Files\Programming\GitHub\algo\Algo\Parsing\algo.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Algo {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class algoParser : Parser {
	public const int
		INTEGER=1, FLOAT=2, BOOLEAN=3, STRING=4, RATIONAL=5, LET_SYM=6, FOR_SYM=7, 
		IN_SYM=8, IF_SYM=9, IMPORT_SYM=10, RETURN_SYM=11, PRINT_SYM=12, ENDLINE=13, 
		EQUALS=14, COMMA=15, LBRACKET=16, RBRACKET=17, ADD_OP=18, TAKE_OP=19, 
		MUL_OP=20, DIV_OP=21, POW_OP=22, BIN_OR=23, BIN_AND=24, LBRACE=25, RBRACE=26, 
		LSQBR=27, RSQBR=28, IDENTIFIER=29, COMMENT=30, WS=31, UNKNOWN_SYMBOL=32;
	public const int
		RULE_compileUnit = 0, RULE_block = 1, RULE_statement = 2, RULE_stat_define = 3, 
		RULE_stat_setvar = 4, RULE_stat_functionCall = 5, RULE_stat_functionDef = 6, 
		RULE_stat_forLoop = 7, RULE_stat_if = 8, RULE_stat_print = 9, RULE_literal_params = 10, 
		RULE_abstract_params = 11, RULE_expr = 12, RULE_term = 13, RULE_factor = 14, 
		RULE_sub = 15, RULE_operator = 16, RULE_value = 17, RULE_array = 18, RULE_array_access = 19;
	public static readonly string[] ruleNames = {
		"compileUnit", "block", "statement", "stat_define", "stat_setvar", "stat_functionCall", 
		"stat_functionDef", "stat_forLoop", "stat_if", "stat_print", "literal_params", 
		"abstract_params", "expr", "term", "factor", "sub", "operator", "value", 
		"array", "array_access"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'let'", "'for'", "'in'", "'if'", 
		"'import'", "'return'", "'print'", "';'", "'='", "','", "'('", "')'", 
		"'+'", "'-'", "'*'", "'/'", "'^'", "'||'", "'&&'", "'{'", "'}'", "'['", 
		"']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INTEGER", "FLOAT", "BOOLEAN", "STRING", "RATIONAL", "LET_SYM", 
		"FOR_SYM", "IN_SYM", "IF_SYM", "IMPORT_SYM", "RETURN_SYM", "PRINT_SYM", 
		"ENDLINE", "EQUALS", "COMMA", "LBRACKET", "RBRACKET", "ADD_OP", "TAKE_OP", 
		"MUL_OP", "DIV_OP", "POW_OP", "BIN_OR", "BIN_AND", "LBRACE", "RBRACE", 
		"LSQBR", "RSQBR", "IDENTIFIER", "COMMENT", "WS", "UNKNOWN_SYMBOL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "algo.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public algoParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompileUnitContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(algoParser.Eof, 0); }
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40; block();
			State = 41; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LET_SYM) | (1L << FOR_SYM) | (1L << PRINT_SYM) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 43; statement();
				}
				}
				State = 48;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public ITerminalNode ENDLINE() { return GetToken(algoParser.ENDLINE, 0); }
		public Stat_defineContext stat_define() {
			return GetRuleContext<Stat_defineContext>(0);
		}
		public Stat_functionCallContext stat_functionCall() {
			return GetRuleContext<Stat_functionCallContext>(0);
		}
		public Stat_printContext stat_print() {
			return GetRuleContext<Stat_printContext>(0);
		}
		public Stat_forLoopContext stat_forLoop() {
			return GetRuleContext<Stat_forLoopContext>(0);
		}
		public Stat_functionDefContext stat_functionDef() {
			return GetRuleContext<Stat_functionDefContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 60;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 52;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case LET_SYM:
					{
					State = 49; stat_define();
					}
					break;
				case IDENTIFIER:
					{
					State = 50; stat_functionCall();
					}
					break;
				case PRINT_SYM:
					{
					State = 51; stat_print();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 54; Match(ENDLINE);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 58;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case FOR_SYM:
					{
					State = 56; stat_forLoop();
					}
					break;
				case LET_SYM:
					{
					State = 57; stat_functionDef();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_defineContext : ParserRuleContext {
		public ITerminalNode LET_SYM() { return GetToken(algoParser.LET_SYM, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public ITerminalNode EQUALS() { return GetToken(algoParser.EQUALS, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Stat_defineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_define; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_define(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_define(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_define(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_defineContext stat_define() {
		Stat_defineContext _localctx = new Stat_defineContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_stat_define);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62; Match(LET_SYM);
			State = 63; Match(IDENTIFIER);
			State = 64; Match(EQUALS);
			State = 65; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_setvarContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public ITerminalNode EQUALS() { return GetToken(algoParser.EQUALS, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Stat_setvarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_setvar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_setvar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_setvar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_setvar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_setvarContext stat_setvar() {
		Stat_setvarContext _localctx = new Stat_setvarContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_stat_setvar);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67; Match(IDENTIFIER);
			State = 68; Match(EQUALS);
			State = 69; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_functionCallContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public ITerminalNode LBRACKET() { return GetToken(algoParser.LBRACKET, 0); }
		public ITerminalNode RBRACKET() { return GetToken(algoParser.RBRACKET, 0); }
		public Literal_paramsContext literal_params() {
			return GetRuleContext<Literal_paramsContext>(0);
		}
		public Stat_functionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_functionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_functionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_functionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_functionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_functionCallContext stat_functionCall() {
		Stat_functionCallContext _localctx = new Stat_functionCallContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_stat_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71; Match(IDENTIFIER);
			State = 72; Match(LBRACKET);
			State = 74;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTEGER) | (1L << FLOAT) | (1L << BOOLEAN) | (1L << STRING) | (1L << RATIONAL) | (1L << LBRACKET) | (1L << LSQBR) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 73; literal_params();
				}
			}

			State = 76; Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_functionDefContext : ParserRuleContext {
		public ITerminalNode LET_SYM() { return GetToken(algoParser.LET_SYM, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public ITerminalNode LBRACKET() { return GetToken(algoParser.LBRACKET, 0); }
		public ITerminalNode RBRACKET() { return GetToken(algoParser.RBRACKET, 0); }
		public ITerminalNode EQUALS() { return GetToken(algoParser.EQUALS, 0); }
		public ITerminalNode LBRACE() { return GetToken(algoParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(algoParser.RBRACE, 0); }
		public Abstract_paramsContext abstract_params() {
			return GetRuleContext<Abstract_paramsContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Stat_functionDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_functionDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_functionDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_functionDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_functionDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_functionDefContext stat_functionDef() {
		Stat_functionDefContext _localctx = new Stat_functionDefContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_stat_functionDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78; Match(LET_SYM);
			State = 79; Match(IDENTIFIER);
			State = 80; Match(LBRACKET);
			State = 82;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IDENTIFIER) {
				{
				State = 81; abstract_params();
				}
			}

			State = 84; Match(RBRACKET);
			State = 85; Match(EQUALS);
			State = 86; Match(LBRACE);
			State = 90;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LET_SYM) | (1L << FOR_SYM) | (1L << PRINT_SYM) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 87; statement();
				}
				}
				State = 92;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 93; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_forLoopContext : ParserRuleContext {
		public ITerminalNode FOR_SYM() { return GetToken(algoParser.FOR_SYM, 0); }
		public ITerminalNode LBRACKET() { return GetToken(algoParser.LBRACKET, 0); }
		public ITerminalNode[] IDENTIFIER() { return GetTokens(algoParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(algoParser.IDENTIFIER, i);
		}
		public ITerminalNode IN_SYM() { return GetToken(algoParser.IN_SYM, 0); }
		public ITerminalNode RBRACKET() { return GetToken(algoParser.RBRACKET, 0); }
		public ITerminalNode LBRACE() { return GetToken(algoParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(algoParser.RBRACE, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Stat_forLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_forLoop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_forLoop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_forLoop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_forLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_forLoopContext stat_forLoop() {
		Stat_forLoopContext _localctx = new Stat_forLoopContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_stat_forLoop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95; Match(FOR_SYM);
			State = 96; Match(LBRACKET);
			State = 97; Match(IDENTIFIER);
			State = 98; Match(IN_SYM);
			State = 99; Match(IDENTIFIER);
			State = 100; Match(RBRACKET);
			State = 101; Match(LBRACE);
			State = 105;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LET_SYM) | (1L << FOR_SYM) | (1L << PRINT_SYM) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 102; statement();
				}
				}
				State = 107;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 108; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_ifContext : ParserRuleContext {
		public ITerminalNode IF_SYM() { return GetToken(algoParser.IF_SYM, 0); }
		public ITerminalNode LBRACKET() { return GetToken(algoParser.LBRACKET, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RBRACKET() { return GetToken(algoParser.RBRACKET, 0); }
		public ITerminalNode LBRACE() { return GetToken(algoParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(algoParser.RBRACE, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Stat_ifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_if; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_if(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_if(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_if(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_ifContext stat_if() {
		Stat_ifContext _localctx = new Stat_ifContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_stat_if);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110; Match(IF_SYM);
			State = 111; Match(LBRACKET);
			State = 112; expr(0);
			State = 113; Match(RBRACKET);
			State = 114; Match(LBRACE);
			State = 118;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LET_SYM) | (1L << FOR_SYM) | (1L << PRINT_SYM) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 115; statement();
				}
				}
				State = 120;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 121; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_printContext : ParserRuleContext {
		public ITerminalNode PRINT_SYM() { return GetToken(algoParser.PRINT_SYM, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Stat_printContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_print; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_print(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_print(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_print(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_printContext stat_print() {
		Stat_printContext _localctx = new Stat_printContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_stat_print);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123; Match(PRINT_SYM);
			State = 124; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Literal_paramsContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(algoParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(algoParser.COMMA, i);
		}
		public Literal_paramsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_params; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterLiteral_params(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitLiteral_params(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral_params(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Literal_paramsContext literal_params() {
		Literal_paramsContext _localctx = new Literal_paramsContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_literal_params);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 126; expr(0);
					State = 127; Match(COMMA);
					}
					} 
				}
				State = 133;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			}
			State = 134; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Abstract_paramsContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(algoParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(algoParser.IDENTIFIER, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(algoParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(algoParser.COMMA, i);
		}
		public Abstract_paramsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstract_params; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterAbstract_params(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitAbstract_params(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbstract_params(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Abstract_paramsContext abstract_params() {
		Abstract_paramsContext _localctx = new Abstract_paramsContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_abstract_params);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,10,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 136; Match(IDENTIFIER);
					State = 137; Match(COMMA);
					}
					} 
				}
				State = 142;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,10,_ctx);
			}
			State = 143; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode ADD_OP() { return GetToken(algoParser.ADD_OP, 0); }
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ITerminalNode TAKE_OP() { return GetToken(algoParser.TAKE_OP, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 146; term(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 156;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 154;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 148;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 149; Match(ADD_OP);
						State = 150; term(0);
						}
						break;

					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 151;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 152; Match(TAKE_OP);
						State = 153; term(0);
						}
						break;
					}
					} 
				}
				State = 158;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ITerminalNode MUL_OP() { return GetToken(algoParser.MUL_OP, 0); }
		public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public ITerminalNode DIV_OP() { return GetToken(algoParser.DIV_OP, 0); }
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		return term(0);
	}

	private TermContext term(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		TermContext _localctx = new TermContext(_ctx, _parentState);
		TermContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_term, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 160; factor(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 170;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,14,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 168;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,13,_ctx) ) {
					case 1:
						{
						_localctx = new TermContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_term);
						State = 162;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 163; Match(MUL_OP);
						State = 164; factor(0);
						}
						break;

					case 2:
						{
						_localctx = new TermContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_term);
						State = 165;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 166; Match(DIV_OP);
						State = 167; factor(0);
						}
						break;
					}
					} 
				}
				State = 172;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,14,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public ITerminalNode POW_OP() { return GetToken(algoParser.POW_OP, 0); }
		public SubContext sub() {
			return GetRuleContext<SubContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		return factor(0);
	}

	private FactorContext factor(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		FactorContext _localctx = new FactorContext(_ctx, _parentState);
		FactorContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_factor, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 174; sub();
			}
			_ctx.stop = _input.Lt(-1);
			State = 181;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,15,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new FactorContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_factor);
					State = 176;
					if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
					State = 177; Match(POW_OP);
					State = 178; sub();
					}
					} 
				}
				State = 183;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,15,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SubContext : ParserRuleContext {
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ITerminalNode LBRACKET() { return GetToken(algoParser.LBRACKET, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RBRACKET() { return GetToken(algoParser.RBRACKET, 0); }
		public SubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sub; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterSub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitSub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubContext sub() {
		SubContext _localctx = new SubContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_sub);
		try {
			State = 189;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case INTEGER:
			case FLOAT:
			case BOOLEAN:
			case STRING:
			case RATIONAL:
			case LSQBR:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 184; value();
				}
				break;
			case LBRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 185; Match(LBRACKET);
				State = 186; expr(0);
				State = 187; Match(RBRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		public ITerminalNode MUL_OP() { return GetToken(algoParser.MUL_OP, 0); }
		public ITerminalNode DIV_OP() { return GetToken(algoParser.DIV_OP, 0); }
		public ITerminalNode TAKE_OP() { return GetToken(algoParser.TAKE_OP, 0); }
		public ITerminalNode ADD_OP() { return GetToken(algoParser.ADD_OP, 0); }
		public ITerminalNode POW_OP() { return GetToken(algoParser.POW_OP, 0); }
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD_OP) | (1L << TAKE_OP) | (1L << MUL_OP) | (1L << DIV_OP) | (1L << POW_OP))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public Stat_functionCallContext stat_functionCall() {
			return GetRuleContext<Stat_functionCallContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public ITerminalNode INTEGER() { return GetToken(algoParser.INTEGER, 0); }
		public ITerminalNode FLOAT() { return GetToken(algoParser.FLOAT, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(algoParser.BOOLEAN, 0); }
		public ITerminalNode STRING() { return GetToken(algoParser.STRING, 0); }
		public ITerminalNode RATIONAL() { return GetToken(algoParser.RATIONAL, 0); }
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public Array_accessContext array_access() {
			return GetRuleContext<Array_accessContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_value);
		try {
			State = 202;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,17,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 193; stat_functionCall();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 194; Match(IDENTIFIER);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 195; Match(INTEGER);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 196; Match(FLOAT);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 197; Match(BOOLEAN);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 198; Match(STRING);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 199; Match(RATIONAL);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 200; array();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 201; array_access();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterArray(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitArray(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_array);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 204; Match(LSQBR);
			State = 214;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTEGER) | (1L << FLOAT) | (1L << BOOLEAN) | (1L << STRING) | (1L << RATIONAL) | (1L << LSQBR) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 210;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,18,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 205; value();
						State = 206; Match(COMMA);
						}
						} 
					}
					State = 212;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,18,_ctx);
				}
				State = 213; value();
				}
			}

			State = 216; Match(RSQBR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_accessContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public Array_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_access; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterArray_access(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitArray_access(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_access(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_accessContext array_access() {
		Array_accessContext _localctx = new Array_accessContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_array_access);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218; Match(IDENTIFIER);
			State = 219; Match(LSQBR);
			State = 220; value();
			State = 221; Match(RSQBR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 12: return expr_sempred((ExprContext)_localctx, predIndex);

		case 13: return term_sempred((TermContext)_localctx, predIndex);

		case 14: return factor_sempred((FactorContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 3);

		case 1: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool term_sempred(TermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(_ctx, 3);

		case 3: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool factor_sempred(FactorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(_ctx, 2);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\"\xE2\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x3\x2\x3\x2\x3\x2\x3\x3\a\x3/\n\x3\f\x3\xE\x3\x32\v\x3\x3\x4\x3\x4\x3"+
		"\x4\x5\x4\x37\n\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4=\n\x4\x5\x4?\n\x4\x3"+
		"\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x5"+
		"\aM\n\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x5\bU\n\b\x3\b\x3\b\x3\b\x3\b\a"+
		"\b[\n\b\f\b\xE\b^\v\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3"+
		"\t\a\tj\n\t\f\t\xE\tm\v\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\a\n"+
		"w\n\n\f\n\xE\nz\v\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\a\f\x84\n"+
		"\f\f\f\xE\f\x87\v\f\x3\f\x3\f\x3\r\x3\r\a\r\x8D\n\r\f\r\xE\r\x90\v\r\x3"+
		"\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\a\xE\x9D"+
		"\n\xE\f\xE\xE\xE\xA0\v\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3"+
		"\xF\x3\xF\a\xF\xAB\n\xF\f\xF\xE\xF\xAE\v\xF\x3\x10\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\a\x10\xB6\n\x10\f\x10\xE\x10\xB9\v\x10\x3\x11\x3\x11\x3"+
		"\x11\x3\x11\x3\x11\x5\x11\xC0\n\x11\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13"+
		"\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x5\x13\xCD\n\x13\x3\x14\x3"+
		"\x14\x3\x14\x3\x14\a\x14\xD3\n\x14\f\x14\xE\x14\xD6\v\x14\x3\x14\x5\x14"+
		"\xD9\n\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x2"+
		"\x2\x5\x1A\x1C\x1E\x16\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12"+
		"\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2\x2"+
		"\x3\x3\x2\x14\x18\xE9\x2*\x3\x2\x2\x2\x4\x30\x3\x2\x2\x2\x6>\x3\x2\x2"+
		"\x2\b@\x3\x2\x2\x2\n\x45\x3\x2\x2\x2\fI\x3\x2\x2\x2\xEP\x3\x2\x2\x2\x10"+
		"\x61\x3\x2\x2\x2\x12p\x3\x2\x2\x2\x14}\x3\x2\x2\x2\x16\x85\x3\x2\x2\x2"+
		"\x18\x8E\x3\x2\x2\x2\x1A\x93\x3\x2\x2\x2\x1C\xA1\x3\x2\x2\x2\x1E\xAF\x3"+
		"\x2\x2\x2 \xBF\x3\x2\x2\x2\"\xC1\x3\x2\x2\x2$\xCC\x3\x2\x2\x2&\xCE\x3"+
		"\x2\x2\x2(\xDC\x3\x2\x2\x2*+\x5\x4\x3\x2+,\a\x2\x2\x3,\x3\x3\x2\x2\x2"+
		"-/\x5\x6\x4\x2.-\x3\x2\x2\x2/\x32\x3\x2\x2\x2\x30.\x3\x2\x2\x2\x30\x31"+
		"\x3\x2\x2\x2\x31\x5\x3\x2\x2\x2\x32\x30\x3\x2\x2\x2\x33\x37\x5\b\x5\x2"+
		"\x34\x37\x5\f\a\x2\x35\x37\x5\x14\v\x2\x36\x33\x3\x2\x2\x2\x36\x34\x3"+
		"\x2\x2\x2\x36\x35\x3\x2\x2\x2\x37\x38\x3\x2\x2\x2\x38\x39\a\xF\x2\x2\x39"+
		"?\x3\x2\x2\x2:=\x5\x10\t\x2;=\x5\xE\b\x2<:\x3\x2\x2\x2<;\x3\x2\x2\x2="+
		"?\x3\x2\x2\x2>\x36\x3\x2\x2\x2><\x3\x2\x2\x2?\a\x3\x2\x2\x2@\x41\a\b\x2"+
		"\x2\x41\x42\a\x1F\x2\x2\x42\x43\a\x10\x2\x2\x43\x44\x5\x1A\xE\x2\x44\t"+
		"\x3\x2\x2\x2\x45\x46\a\x1F\x2\x2\x46G\a\x10\x2\x2GH\x5\x1A\xE\x2H\v\x3"+
		"\x2\x2\x2IJ\a\x1F\x2\x2JL\a\x12\x2\x2KM\x5\x16\f\x2LK\x3\x2\x2\x2LM\x3"+
		"\x2\x2\x2MN\x3\x2\x2\x2NO\a\x13\x2\x2O\r\x3\x2\x2\x2PQ\a\b\x2\x2QR\a\x1F"+
		"\x2\x2RT\a\x12\x2\x2SU\x5\x18\r\x2TS\x3\x2\x2\x2TU\x3\x2\x2\x2UV\x3\x2"+
		"\x2\x2VW\a\x13\x2\x2WX\a\x10\x2\x2X\\\a\x1B\x2\x2Y[\x5\x6\x4\x2ZY\x3\x2"+
		"\x2\x2[^\x3\x2\x2\x2\\Z\x3\x2\x2\x2\\]\x3\x2\x2\x2]_\x3\x2\x2\x2^\\\x3"+
		"\x2\x2\x2_`\a\x1C\x2\x2`\xF\x3\x2\x2\x2\x61\x62\a\t\x2\x2\x62\x63\a\x12"+
		"\x2\x2\x63\x64\a\x1F\x2\x2\x64\x65\a\n\x2\x2\x65\x66\a\x1F\x2\x2\x66g"+
		"\a\x13\x2\x2gk\a\x1B\x2\x2hj\x5\x6\x4\x2ih\x3\x2\x2\x2jm\x3\x2\x2\x2k"+
		"i\x3\x2\x2\x2kl\x3\x2\x2\x2ln\x3\x2\x2\x2mk\x3\x2\x2\x2no\a\x1C\x2\x2"+
		"o\x11\x3\x2\x2\x2pq\a\v\x2\x2qr\a\x12\x2\x2rs\x5\x1A\xE\x2st\a\x13\x2"+
		"\x2tx\a\x1B\x2\x2uw\x5\x6\x4\x2vu\x3\x2\x2\x2wz\x3\x2\x2\x2xv\x3\x2\x2"+
		"\x2xy\x3\x2\x2\x2y{\x3\x2\x2\x2zx\x3\x2\x2\x2{|\a\x1C\x2\x2|\x13\x3\x2"+
		"\x2\x2}~\a\xE\x2\x2~\x7F\x5\x1A\xE\x2\x7F\x15\x3\x2\x2\x2\x80\x81\x5\x1A"+
		"\xE\x2\x81\x82\a\x11\x2\x2\x82\x84\x3\x2\x2\x2\x83\x80\x3\x2\x2\x2\x84"+
		"\x87\x3\x2\x2\x2\x85\x83\x3\x2\x2\x2\x85\x86\x3\x2\x2\x2\x86\x88\x3\x2"+
		"\x2\x2\x87\x85\x3\x2\x2\x2\x88\x89\x5\x1A\xE\x2\x89\x17\x3\x2\x2\x2\x8A"+
		"\x8B\a\x1F\x2\x2\x8B\x8D\a\x11\x2\x2\x8C\x8A\x3\x2\x2\x2\x8D\x90\x3\x2"+
		"\x2\x2\x8E\x8C\x3\x2\x2\x2\x8E\x8F\x3\x2\x2\x2\x8F\x91\x3\x2\x2\x2\x90"+
		"\x8E\x3\x2\x2\x2\x91\x92\a\x1F\x2\x2\x92\x19\x3\x2\x2\x2\x93\x94\b\xE"+
		"\x1\x2\x94\x95\x5\x1C\xF\x2\x95\x9E\x3\x2\x2\x2\x96\x97\f\x5\x2\x2\x97"+
		"\x98\a\x14\x2\x2\x98\x9D\x5\x1C\xF\x2\x99\x9A\f\x4\x2\x2\x9A\x9B\a\x15"+
		"\x2\x2\x9B\x9D\x5\x1C\xF\x2\x9C\x96\x3\x2\x2\x2\x9C\x99\x3\x2\x2\x2\x9D"+
		"\xA0\x3\x2\x2\x2\x9E\x9C\x3\x2\x2\x2\x9E\x9F\x3\x2\x2\x2\x9F\x1B\x3\x2"+
		"\x2\x2\xA0\x9E\x3\x2\x2\x2\xA1\xA2\b\xF\x1\x2\xA2\xA3\x5\x1E\x10\x2\xA3"+
		"\xAC\x3\x2\x2\x2\xA4\xA5\f\x5\x2\x2\xA5\xA6\a\x16\x2\x2\xA6\xAB\x5\x1E"+
		"\x10\x2\xA7\xA8\f\x4\x2\x2\xA8\xA9\a\x17\x2\x2\xA9\xAB\x5\x1E\x10\x2\xAA"+
		"\xA4\x3\x2\x2\x2\xAA\xA7\x3\x2\x2\x2\xAB\xAE\x3\x2\x2\x2\xAC\xAA\x3\x2"+
		"\x2\x2\xAC\xAD\x3\x2\x2\x2\xAD\x1D\x3\x2\x2\x2\xAE\xAC\x3\x2\x2\x2\xAF"+
		"\xB0\b\x10\x1\x2\xB0\xB1\x5 \x11\x2\xB1\xB7\x3\x2\x2\x2\xB2\xB3\f\x4\x2"+
		"\x2\xB3\xB4\a\x18\x2\x2\xB4\xB6\x5 \x11\x2\xB5\xB2\x3\x2\x2\x2\xB6\xB9"+
		"\x3\x2\x2\x2\xB7\xB5\x3\x2\x2\x2\xB7\xB8\x3\x2\x2\x2\xB8\x1F\x3\x2\x2"+
		"\x2\xB9\xB7\x3\x2\x2\x2\xBA\xC0\x5$\x13\x2\xBB\xBC\a\x12\x2\x2\xBC\xBD"+
		"\x5\x1A\xE\x2\xBD\xBE\a\x13\x2\x2\xBE\xC0\x3\x2\x2\x2\xBF\xBA\x3\x2\x2"+
		"\x2\xBF\xBB\x3\x2\x2\x2\xC0!\x3\x2\x2\x2\xC1\xC2\t\x2\x2\x2\xC2#\x3\x2"+
		"\x2\x2\xC3\xCD\x5\f\a\x2\xC4\xCD\a\x1F\x2\x2\xC5\xCD\a\x3\x2\x2\xC6\xCD"+
		"\a\x4\x2\x2\xC7\xCD\a\x5\x2\x2\xC8\xCD\a\x6\x2\x2\xC9\xCD\a\a\x2\x2\xCA"+
		"\xCD\x5&\x14\x2\xCB\xCD\x5(\x15\x2\xCC\xC3\x3\x2\x2\x2\xCC\xC4\x3\x2\x2"+
		"\x2\xCC\xC5\x3\x2\x2\x2\xCC\xC6\x3\x2\x2\x2\xCC\xC7\x3\x2\x2\x2\xCC\xC8"+
		"\x3\x2\x2\x2\xCC\xC9\x3\x2\x2\x2\xCC\xCA\x3\x2\x2\x2\xCC\xCB\x3\x2\x2"+
		"\x2\xCD%\x3\x2\x2\x2\xCE\xD8\a\x1D\x2\x2\xCF\xD0\x5$\x13\x2\xD0\xD1\a"+
		"\x11\x2\x2\xD1\xD3\x3\x2\x2\x2\xD2\xCF\x3\x2\x2\x2\xD3\xD6\x3\x2\x2\x2"+
		"\xD4\xD2\x3\x2\x2\x2\xD4\xD5\x3\x2\x2\x2\xD5\xD7\x3\x2\x2\x2\xD6\xD4\x3"+
		"\x2\x2\x2\xD7\xD9\x5$\x13\x2\xD8\xD4\x3\x2\x2\x2\xD8\xD9\x3\x2\x2\x2\xD9"+
		"\xDA\x3\x2\x2\x2\xDA\xDB\a\x1E\x2\x2\xDB\'\x3\x2\x2\x2\xDC\xDD\a\x1F\x2"+
		"\x2\xDD\xDE\a\x1D\x2\x2\xDE\xDF\x5$\x13\x2\xDF\xE0\a\x1E\x2\x2\xE0)\x3"+
		"\x2\x2\x2\x16\x30\x36<>LT\\kx\x85\x8E\x9C\x9E\xAA\xAC\xB7\xBF\xCC\xD4"+
		"\xD8";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Algo
