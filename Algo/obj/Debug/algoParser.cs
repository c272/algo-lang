//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\Files\Programming\GitHub\algo\Algo\Parsing\algo.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Algo {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class algoParser : Parser {
	public const int
		INTEGER=1, FLOAT=2, BOOLEAN=3, STRING=4, RATIONAL=5, NULL=6, LET_SYM=7, 
		FOR_SYM=8, FOREACH_SYM=9, ADD_SYM=10, BREAK_SYM=11, CONTINUE_SYM=12, AT_SYM=13, 
		REMOVE_SYM=14, FROM_SYM=15, WHILE_SYM=16, IN_SYM=17, IF_SYM=18, UP_SYM=19, 
		TO_SYM=20, AS_SYM=21, ENUM_SYM=22, LIB_SYM=23, SIG_FIG_SYM=24, OBJ_SYM=25, 
		ELSE_SYM=26, IMPORT_SYM=27, RETURN_SYM=28, PRINT_SYM=29, DISREGARD_SYM=30, 
		EXTERNAL_SYM=31, TRY_SYM=32, CATCH_SYM=33, ENDLINE=34, EQUALS=35, COMMA=36, 
		LBRACE=37, RBRACE=38, LSQBR=39, RSQBR=40, INVERT_SYM=41, STREAMING_SYM=42, 
		LBRACKET=43, RBRACKET=44, ADD_OP=45, TAKE_OP=46, MUL_OP=47, DIV_OP=48, 
		POW_OP=49, MOD_OP=50, POINT=51, ADDFROM_OP=52, TAKEFROM_OP=53, DIVFROM_OP=54, 
		MULFROM_OP=55, ADD_PFOP=56, TAKE_PFOP=57, BIN_OR=58, BIN_AND=59, BIN_NET=60, 
		BIN_EQUALS=61, GRTR_THAN=62, LESS_THAN=63, GRTR_THAN_ET=64, LESS_THAN_ET=65, 
		IDENTIFIER=66, COMMENT=67, WS=68, UNKNOWN_SYMBOL=69;
	public const int
		RULE_compileUnit = 0, RULE_block = 1, RULE_statement = 2, RULE_stat_define = 3, 
		RULE_stat_setvar = 4, RULE_stat_setvar_op = 5, RULE_stat_setvar_postfix = 6, 
		RULE_stat_deletevar = 7, RULE_stat_enumDef = 8, RULE_stat_functionCall = 9, 
		RULE_stat_functionDef = 10, RULE_stat_loadFuncExt = 11, RULE_stat_return = 12, 
		RULE_stat_forLoop = 13, RULE_stat_whileLoop = 14, RULE_stat_if = 15, RULE_stat_print = 16, 
		RULE_stat_library = 17, RULE_stat_import = 18, RULE_stat_list_add = 19, 
		RULE_stat_list_remove = 20, RULE_stat_try_catch = 21, RULE_stat_break = 22, 
		RULE_stat_continue = 23, RULE_stat_elif = 24, RULE_stat_else = 25, RULE_literal_params = 26, 
		RULE_abstract_params = 27, RULE_check = 28, RULE_checkfrag = 29, RULE_expr = 30, 
		RULE_rounding_expr = 31, RULE_term = 32, RULE_factor = 33, RULE_sub = 34, 
		RULE_operator = 35, RULE_selfmod_op = 36, RULE_postfix_op = 37, RULE_value = 38, 
		RULE_obj_access = 39, RULE_array = 40, RULE_array_access = 41, RULE_object = 42, 
		RULE_obj_child_definitions = 43, RULE_obj_vardefine = 44, RULE_obj_funcdefine = 45, 
		RULE_obj_externdefine = 46;
	public static readonly string[] ruleNames = {
		"compileUnit", "block", "statement", "stat_define", "stat_setvar", "stat_setvar_op", 
		"stat_setvar_postfix", "stat_deletevar", "stat_enumDef", "stat_functionCall", 
		"stat_functionDef", "stat_loadFuncExt", "stat_return", "stat_forLoop", 
		"stat_whileLoop", "stat_if", "stat_print", "stat_library", "stat_import", 
		"stat_list_add", "stat_list_remove", "stat_try_catch", "stat_break", "stat_continue", 
		"stat_elif", "stat_else", "literal_params", "abstract_params", "check", 
		"checkfrag", "expr", "rounding_expr", "term", "factor", "sub", "operator", 
		"selfmod_op", "postfix_op", "value", "obj_access", "array", "array_access", 
		"object", "obj_child_definitions", "obj_vardefine", "obj_funcdefine", 
		"obj_externdefine"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'null'", "'let'", "'for'", "'foreach'", 
		"'add'", "'break'", "'continue'", "'at'", "'remove'", "'from'", "'while'", 
		"'in'", "'if'", "'up'", "'to'", "'as'", "'enum'", "'library'", "'sf'", 
		"'object'", "'else'", "'import'", "'return'", "'print '", "'disregard'", 
		"'external'", "'try'", "'catch'", "';'", "'='", "','", "'{'", "'}'", "'['", 
		"']'", "'!'", "'<-'", "'('", "')'", "'+'", "'-'", "'*'", "'/'", "'^'", 
		"'%'", "'.'", "'+='", "'-='", "'/='", "'*='", "'++'", "'--'", "'|'", "'&'", 
		"'!='", "'=='", "'>'", "'<'", "'>='", "'<='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INTEGER", "FLOAT", "BOOLEAN", "STRING", "RATIONAL", "NULL", "LET_SYM", 
		"FOR_SYM", "FOREACH_SYM", "ADD_SYM", "BREAK_SYM", "CONTINUE_SYM", "AT_SYM", 
		"REMOVE_SYM", "FROM_SYM", "WHILE_SYM", "IN_SYM", "IF_SYM", "UP_SYM", "TO_SYM", 
		"AS_SYM", "ENUM_SYM", "LIB_SYM", "SIG_FIG_SYM", "OBJ_SYM", "ELSE_SYM", 
		"IMPORT_SYM", "RETURN_SYM", "PRINT_SYM", "DISREGARD_SYM", "EXTERNAL_SYM", 
		"TRY_SYM", "CATCH_SYM", "ENDLINE", "EQUALS", "COMMA", "LBRACE", "RBRACE", 
		"LSQBR", "RSQBR", "INVERT_SYM", "STREAMING_SYM", "LBRACKET", "RBRACKET", 
		"ADD_OP", "TAKE_OP", "MUL_OP", "DIV_OP", "POW_OP", "MOD_OP", "POINT", 
		"ADDFROM_OP", "TAKEFROM_OP", "DIVFROM_OP", "MULFROM_OP", "ADD_PFOP", "TAKE_PFOP", 
		"BIN_OR", "BIN_AND", "BIN_NET", "BIN_EQUALS", "GRTR_THAN", "LESS_THAN", 
		"GRTR_THAN_ET", "LESS_THAN_ET", "IDENTIFIER", "COMMENT", "WS", "UNKNOWN_SYMBOL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "algo.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public algoParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompileUnitContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(algoParser.Eof, 0); }
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94; block();
			State = 95; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (LET_SYM - 7)) | (1L << (FOR_SYM - 7)) | (1L << (FOREACH_SYM - 7)) | (1L << (ADD_SYM - 7)) | (1L << (BREAK_SYM - 7)) | (1L << (CONTINUE_SYM - 7)) | (1L << (REMOVE_SYM - 7)) | (1L << (WHILE_SYM - 7)) | (1L << (IF_SYM - 7)) | (1L << (LIB_SYM - 7)) | (1L << (IMPORT_SYM - 7)) | (1L << (RETURN_SYM - 7)) | (1L << (PRINT_SYM - 7)) | (1L << (DISREGARD_SYM - 7)) | (1L << (EXTERNAL_SYM - 7)) | (1L << (TRY_SYM - 7)) | (1L << (LSQBR - 7)) | (1L << (IDENTIFIER - 7)))) != 0)) {
				{
				{
				State = 97; statement();
				}
				}
				State = 102;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public ITerminalNode ENDLINE() { return GetToken(algoParser.ENDLINE, 0); }
		public Stat_defineContext stat_define() {
			return GetRuleContext<Stat_defineContext>(0);
		}
		public Stat_enumDefContext stat_enumDef() {
			return GetRuleContext<Stat_enumDefContext>(0);
		}
		public Stat_functionCallContext stat_functionCall() {
			return GetRuleContext<Stat_functionCallContext>(0);
		}
		public Stat_printContext stat_print() {
			return GetRuleContext<Stat_printContext>(0);
		}
		public Stat_setvarContext stat_setvar() {
			return GetRuleContext<Stat_setvarContext>(0);
		}
		public Stat_setvar_opContext stat_setvar_op() {
			return GetRuleContext<Stat_setvar_opContext>(0);
		}
		public Stat_setvar_postfixContext stat_setvar_postfix() {
			return GetRuleContext<Stat_setvar_postfixContext>(0);
		}
		public Stat_returnContext stat_return() {
			return GetRuleContext<Stat_returnContext>(0);
		}
		public Stat_deletevarContext stat_deletevar() {
			return GetRuleContext<Stat_deletevarContext>(0);
		}
		public Stat_importContext stat_import() {
			return GetRuleContext<Stat_importContext>(0);
		}
		public Stat_loadFuncExtContext stat_loadFuncExt() {
			return GetRuleContext<Stat_loadFuncExtContext>(0);
		}
		public Stat_list_addContext stat_list_add() {
			return GetRuleContext<Stat_list_addContext>(0);
		}
		public Stat_list_removeContext stat_list_remove() {
			return GetRuleContext<Stat_list_removeContext>(0);
		}
		public Stat_breakContext stat_break() {
			return GetRuleContext<Stat_breakContext>(0);
		}
		public Stat_continueContext stat_continue() {
			return GetRuleContext<Stat_continueContext>(0);
		}
		public Stat_forLoopContext stat_forLoop() {
			return GetRuleContext<Stat_forLoopContext>(0);
		}
		public Stat_functionDefContext stat_functionDef() {
			return GetRuleContext<Stat_functionDefContext>(0);
		}
		public Stat_ifContext stat_if() {
			return GetRuleContext<Stat_ifContext>(0);
		}
		public Stat_libraryContext stat_library() {
			return GetRuleContext<Stat_libraryContext>(0);
		}
		public Stat_whileLoopContext stat_whileLoop() {
			return GetRuleContext<Stat_whileLoopContext>(0);
		}
		public Stat_try_catchContext stat_try_catch() {
			return GetRuleContext<Stat_try_catchContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 130;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 118;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
				case 1:
					{
					State = 103; stat_define();
					}
					break;

				case 2:
					{
					State = 104; stat_enumDef();
					}
					break;

				case 3:
					{
					State = 105; stat_functionCall();
					}
					break;

				case 4:
					{
					State = 106; stat_print();
					}
					break;

				case 5:
					{
					State = 107; stat_setvar();
					}
					break;

				case 6:
					{
					State = 108; stat_setvar_op();
					}
					break;

				case 7:
					{
					State = 109; stat_setvar_postfix();
					}
					break;

				case 8:
					{
					State = 110; stat_return();
					}
					break;

				case 9:
					{
					State = 111; stat_deletevar();
					}
					break;

				case 10:
					{
					State = 112; stat_import();
					}
					break;

				case 11:
					{
					State = 113; stat_loadFuncExt();
					}
					break;

				case 12:
					{
					State = 114; stat_list_add();
					}
					break;

				case 13:
					{
					State = 115; stat_list_remove();
					}
					break;

				case 14:
					{
					State = 116; stat_break();
					}
					break;

				case 15:
					{
					State = 117; stat_continue();
					}
					break;
				}
				State = 120; Match(ENDLINE);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 128;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case FOR_SYM:
				case FOREACH_SYM:
					{
					State = 122; stat_forLoop();
					}
					break;
				case LET_SYM:
					{
					State = 123; stat_functionDef();
					}
					break;
				case IF_SYM:
					{
					State = 124; stat_if();
					}
					break;
				case LIB_SYM:
					{
					State = 125; stat_library();
					}
					break;
				case WHILE_SYM:
					{
					State = 126; stat_whileLoop();
					}
					break;
				case TRY_SYM:
					{
					State = 127; stat_try_catch();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_defineContext : ParserRuleContext {
		public ITerminalNode LET_SYM() { return GetToken(algoParser.LET_SYM, 0); }
		public ITerminalNode EQUALS() { return GetToken(algoParser.EQUALS, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public Obj_accessContext obj_access() {
			return GetRuleContext<Obj_accessContext>(0);
		}
		public Stat_defineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_define; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_define(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_define(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_define(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_defineContext stat_define() {
		Stat_defineContext _localctx = new Stat_defineContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_stat_define);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132; Match(LET_SYM);
			State = 135;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				{
				State = 133; Match(IDENTIFIER);
				}
				break;

			case 2:
				{
				State = 134; obj_access();
				}
				break;
			}
			State = 137; Match(EQUALS);
			State = 138; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_setvarContext : ParserRuleContext {
		public ITerminalNode EQUALS() { return GetToken(algoParser.EQUALS, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public Obj_accessContext obj_access() {
			return GetRuleContext<Obj_accessContext>(0);
		}
		public Array_accessContext array_access() {
			return GetRuleContext<Array_accessContext>(0);
		}
		public Rounding_exprContext rounding_expr() {
			return GetRuleContext<Rounding_exprContext>(0);
		}
		public Stat_setvarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_setvar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_setvar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_setvar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_setvar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_setvarContext stat_setvar() {
		Stat_setvarContext _localctx = new Stat_setvarContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_stat_setvar);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				{
				State = 140; Match(IDENTIFIER);
				}
				break;

			case 2:
				{
				State = 141; obj_access();
				}
				break;

			case 3:
				{
				State = 142; array_access();
				}
				break;
			}
			State = 145; Match(EQUALS);
			State = 146; expr(0);
			State = 148;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==TO_SYM) {
				{
				State = 147; rounding_expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_setvar_opContext : ParserRuleContext {
		public Selfmod_opContext selfmod_op() {
			return GetRuleContext<Selfmod_opContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public Obj_accessContext obj_access() {
			return GetRuleContext<Obj_accessContext>(0);
		}
		public Array_accessContext array_access() {
			return GetRuleContext<Array_accessContext>(0);
		}
		public Stat_setvar_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_setvar_op; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_setvar_op(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_setvar_op(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_setvar_op(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_setvar_opContext stat_setvar_op() {
		Stat_setvar_opContext _localctx = new Stat_setvar_opContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_stat_setvar_op);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				{
				State = 150; Match(IDENTIFIER);
				}
				break;

			case 2:
				{
				State = 151; obj_access();
				}
				break;

			case 3:
				{
				State = 152; array_access();
				}
				break;
			}
			State = 155; selfmod_op();
			State = 156; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_setvar_postfixContext : ParserRuleContext {
		public Postfix_opContext postfix_op() {
			return GetRuleContext<Postfix_opContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public Obj_accessContext obj_access() {
			return GetRuleContext<Obj_accessContext>(0);
		}
		public Array_accessContext array_access() {
			return GetRuleContext<Array_accessContext>(0);
		}
		public Stat_setvar_postfixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_setvar_postfix; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_setvar_postfix(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_setvar_postfix(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_setvar_postfix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_setvar_postfixContext stat_setvar_postfix() {
		Stat_setvar_postfixContext _localctx = new Stat_setvar_postfixContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_stat_setvar_postfix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				{
				State = 158; Match(IDENTIFIER);
				}
				break;

			case 2:
				{
				State = 159; obj_access();
				}
				break;

			case 3:
				{
				State = 160; array_access();
				}
				break;
			}
			State = 163; postfix_op();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_deletevarContext : ParserRuleContext {
		public ITerminalNode DISREGARD_SYM() { return GetToken(algoParser.DISREGARD_SYM, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public Obj_accessContext obj_access() {
			return GetRuleContext<Obj_accessContext>(0);
		}
		public ITerminalNode MUL_OP() { return GetToken(algoParser.MUL_OP, 0); }
		public Stat_deletevarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_deletevar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_deletevar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_deletevar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_deletevar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_deletevarContext stat_deletevar() {
		Stat_deletevarContext _localctx = new Stat_deletevarContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_stat_deletevar);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165; Match(DISREGARD_SYM);
			State = 169;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				{
				State = 166; Match(IDENTIFIER);
				}
				break;

			case 2:
				{
				State = 167; obj_access();
				}
				break;

			case 3:
				{
				State = 168; Match(MUL_OP);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_enumDefContext : ParserRuleContext {
		public ITerminalNode LET_SYM() { return GetToken(algoParser.LET_SYM, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public ITerminalNode EQUALS() { return GetToken(algoParser.EQUALS, 0); }
		public ITerminalNode ENUM_SYM() { return GetToken(algoParser.ENUM_SYM, 0); }
		public ITerminalNode LBRACE() { return GetToken(algoParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(algoParser.RBRACE, 0); }
		public Abstract_paramsContext abstract_params() {
			return GetRuleContext<Abstract_paramsContext>(0);
		}
		public Stat_enumDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_enumDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_enumDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_enumDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_enumDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_enumDefContext stat_enumDef() {
		Stat_enumDefContext _localctx = new Stat_enumDefContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_stat_enumDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171; Match(LET_SYM);
			State = 172; Match(IDENTIFIER);
			State = 173; Match(EQUALS);
			State = 174; Match(ENUM_SYM);
			State = 175; Match(LBRACE);
			State = 177;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IDENTIFIER) {
				{
				State = 176; abstract_params();
				}
			}

			State = 179; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_functionCallContext : ParserRuleContext {
		public ITerminalNode LBRACKET() { return GetToken(algoParser.LBRACKET, 0); }
		public ITerminalNode RBRACKET() { return GetToken(algoParser.RBRACKET, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public Obj_accessContext obj_access() {
			return GetRuleContext<Obj_accessContext>(0);
		}
		public Literal_paramsContext literal_params() {
			return GetRuleContext<Literal_paramsContext>(0);
		}
		public Stat_functionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_functionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_functionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_functionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_functionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_functionCallContext stat_functionCall() {
		Stat_functionCallContext _localctx = new Stat_functionCallContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_stat_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
			case 1:
				{
				State = 181; Match(IDENTIFIER);
				}
				break;

			case 2:
				{
				State = 182; obj_access();
				}
				break;
			}
			State = 185; Match(LBRACKET);
			State = 187;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTEGER) | (1L << FLOAT) | (1L << BOOLEAN) | (1L << STRING) | (1L << RATIONAL) | (1L << NULL) | (1L << OBJ_SYM) | (1L << LSQBR) | (1L << LBRACKET))) != 0) || _la==IDENTIFIER) {
				{
				State = 186; literal_params();
				}
			}

			State = 189; Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_functionDefContext : ParserRuleContext {
		public ITerminalNode LET_SYM() { return GetToken(algoParser.LET_SYM, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public ITerminalNode LBRACKET() { return GetToken(algoParser.LBRACKET, 0); }
		public ITerminalNode RBRACKET() { return GetToken(algoParser.RBRACKET, 0); }
		public ITerminalNode EQUALS() { return GetToken(algoParser.EQUALS, 0); }
		public ITerminalNode LBRACE() { return GetToken(algoParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(algoParser.RBRACE, 0); }
		public Abstract_paramsContext abstract_params() {
			return GetRuleContext<Abstract_paramsContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Stat_functionDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_functionDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_functionDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_functionDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_functionDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_functionDefContext stat_functionDef() {
		Stat_functionDefContext _localctx = new Stat_functionDefContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_stat_functionDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191; Match(LET_SYM);
			State = 192; Match(IDENTIFIER);
			State = 193; Match(LBRACKET);
			State = 195;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IDENTIFIER) {
				{
				State = 194; abstract_params();
				}
			}

			State = 197; Match(RBRACKET);
			State = 198; Match(EQUALS);
			State = 199; Match(LBRACE);
			State = 203;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (LET_SYM - 7)) | (1L << (FOR_SYM - 7)) | (1L << (FOREACH_SYM - 7)) | (1L << (ADD_SYM - 7)) | (1L << (BREAK_SYM - 7)) | (1L << (CONTINUE_SYM - 7)) | (1L << (REMOVE_SYM - 7)) | (1L << (WHILE_SYM - 7)) | (1L << (IF_SYM - 7)) | (1L << (LIB_SYM - 7)) | (1L << (IMPORT_SYM - 7)) | (1L << (RETURN_SYM - 7)) | (1L << (PRINT_SYM - 7)) | (1L << (DISREGARD_SYM - 7)) | (1L << (EXTERNAL_SYM - 7)) | (1L << (TRY_SYM - 7)) | (1L << (LSQBR - 7)) | (1L << (IDENTIFIER - 7)))) != 0)) {
				{
				{
				State = 200; statement();
				}
				}
				State = 205;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 206; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_loadFuncExtContext : ParserRuleContext {
		public ITerminalNode EXTERNAL_SYM() { return GetToken(algoParser.EXTERNAL_SYM, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public ITerminalNode STREAMING_SYM() { return GetToken(algoParser.STREAMING_SYM, 0); }
		public Obj_accessContext obj_access() {
			return GetRuleContext<Obj_accessContext>(0);
		}
		public Stat_loadFuncExtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_loadFuncExt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_loadFuncExt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_loadFuncExt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_loadFuncExt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_loadFuncExtContext stat_loadFuncExt() {
		Stat_loadFuncExtContext _localctx = new Stat_loadFuncExtContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_stat_loadFuncExt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208; Match(EXTERNAL_SYM);
			State = 209; Match(IDENTIFIER);
			State = 210; Match(STREAMING_SYM);
			State = 211; obj_access();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_returnContext : ParserRuleContext {
		public ITerminalNode RETURN_SYM() { return GetToken(algoParser.RETURN_SYM, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Stat_returnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_return; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_return(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_return(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_return(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_returnContext stat_return() {
		Stat_returnContext _localctx = new Stat_returnContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_stat_return);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213; Match(RETURN_SYM);
			State = 215;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTEGER) | (1L << FLOAT) | (1L << BOOLEAN) | (1L << STRING) | (1L << RATIONAL) | (1L << NULL) | (1L << OBJ_SYM) | (1L << LSQBR) | (1L << LBRACKET))) != 0) || _la==IDENTIFIER) {
				{
				State = 214; expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_forLoopContext : ParserRuleContext {
		public ITerminalNode LBRACKET() { return GetToken(algoParser.LBRACKET, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public ITerminalNode RBRACKET() { return GetToken(algoParser.RBRACKET, 0); }
		public ITerminalNode LBRACE() { return GetToken(algoParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(algoParser.RBRACE, 0); }
		public ITerminalNode FOR_SYM() { return GetToken(algoParser.FOR_SYM, 0); }
		public ITerminalNode FOREACH_SYM() { return GetToken(algoParser.FOREACH_SYM, 0); }
		public ITerminalNode UP_SYM() { return GetToken(algoParser.UP_SYM, 0); }
		public ITerminalNode TO_SYM() { return GetToken(algoParser.TO_SYM, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode IN_SYM() { return GetToken(algoParser.IN_SYM, 0); }
		public Stat_forLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_forLoop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_forLoop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_forLoop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_forLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_forLoopContext stat_forLoop() {
		Stat_forLoopContext _localctx = new Stat_forLoopContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_stat_forLoop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217;
			_la = _input.La(1);
			if ( !(_la==FOR_SYM || _la==FOREACH_SYM) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 218; Match(LBRACKET);
			State = 219; Match(IDENTIFIER);
			State = 225;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case IN_SYM:
				{
				{
				State = 220; Match(IN_SYM);
				State = 221; expr(0);
				}
				}
				break;
			case UP_SYM:
				{
				State = 222; Match(UP_SYM);
				State = 223; Match(TO_SYM);
				State = 224; expr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 227; Match(RBRACKET);
			State = 228; Match(LBRACE);
			State = 232;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (LET_SYM - 7)) | (1L << (FOR_SYM - 7)) | (1L << (FOREACH_SYM - 7)) | (1L << (ADD_SYM - 7)) | (1L << (BREAK_SYM - 7)) | (1L << (CONTINUE_SYM - 7)) | (1L << (REMOVE_SYM - 7)) | (1L << (WHILE_SYM - 7)) | (1L << (IF_SYM - 7)) | (1L << (LIB_SYM - 7)) | (1L << (IMPORT_SYM - 7)) | (1L << (RETURN_SYM - 7)) | (1L << (PRINT_SYM - 7)) | (1L << (DISREGARD_SYM - 7)) | (1L << (EXTERNAL_SYM - 7)) | (1L << (TRY_SYM - 7)) | (1L << (LSQBR - 7)) | (1L << (IDENTIFIER - 7)))) != 0)) {
				{
				{
				State = 229; statement();
				}
				}
				State = 234;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 235; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_whileLoopContext : ParserRuleContext {
		public ITerminalNode WHILE_SYM() { return GetToken(algoParser.WHILE_SYM, 0); }
		public ITerminalNode LBRACKET() { return GetToken(algoParser.LBRACKET, 0); }
		public CheckContext check() {
			return GetRuleContext<CheckContext>(0);
		}
		public ITerminalNode RBRACKET() { return GetToken(algoParser.RBRACKET, 0); }
		public ITerminalNode LBRACE() { return GetToken(algoParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(algoParser.RBRACE, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Stat_whileLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_whileLoop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_whileLoop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_whileLoop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_whileLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_whileLoopContext stat_whileLoop() {
		Stat_whileLoopContext _localctx = new Stat_whileLoopContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_stat_whileLoop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237; Match(WHILE_SYM);
			State = 238; Match(LBRACKET);
			State = 239; check(0);
			State = 240; Match(RBRACKET);
			State = 241; Match(LBRACE);
			State = 245;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (LET_SYM - 7)) | (1L << (FOR_SYM - 7)) | (1L << (FOREACH_SYM - 7)) | (1L << (ADD_SYM - 7)) | (1L << (BREAK_SYM - 7)) | (1L << (CONTINUE_SYM - 7)) | (1L << (REMOVE_SYM - 7)) | (1L << (WHILE_SYM - 7)) | (1L << (IF_SYM - 7)) | (1L << (LIB_SYM - 7)) | (1L << (IMPORT_SYM - 7)) | (1L << (RETURN_SYM - 7)) | (1L << (PRINT_SYM - 7)) | (1L << (DISREGARD_SYM - 7)) | (1L << (EXTERNAL_SYM - 7)) | (1L << (TRY_SYM - 7)) | (1L << (LSQBR - 7)) | (1L << (IDENTIFIER - 7)))) != 0)) {
				{
				{
				State = 242; statement();
				}
				}
				State = 247;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 248; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_ifContext : ParserRuleContext {
		public ITerminalNode IF_SYM() { return GetToken(algoParser.IF_SYM, 0); }
		public ITerminalNode LBRACKET() { return GetToken(algoParser.LBRACKET, 0); }
		public CheckContext check() {
			return GetRuleContext<CheckContext>(0);
		}
		public ITerminalNode RBRACKET() { return GetToken(algoParser.RBRACKET, 0); }
		public ITerminalNode LBRACE() { return GetToken(algoParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(algoParser.RBRACE, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Stat_elifContext[] stat_elif() {
			return GetRuleContexts<Stat_elifContext>();
		}
		public Stat_elifContext stat_elif(int i) {
			return GetRuleContext<Stat_elifContext>(i);
		}
		public Stat_elseContext stat_else() {
			return GetRuleContext<Stat_elseContext>(0);
		}
		public Stat_ifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_if; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_if(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_if(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_if(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_ifContext stat_if() {
		Stat_ifContext _localctx = new Stat_ifContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_stat_if);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 250; Match(IF_SYM);
			State = 251; Match(LBRACKET);
			State = 252; check(0);
			State = 253; Match(RBRACKET);
			State = 254; Match(LBRACE);
			State = 258;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (LET_SYM - 7)) | (1L << (FOR_SYM - 7)) | (1L << (FOREACH_SYM - 7)) | (1L << (ADD_SYM - 7)) | (1L << (BREAK_SYM - 7)) | (1L << (CONTINUE_SYM - 7)) | (1L << (REMOVE_SYM - 7)) | (1L << (WHILE_SYM - 7)) | (1L << (IF_SYM - 7)) | (1L << (LIB_SYM - 7)) | (1L << (IMPORT_SYM - 7)) | (1L << (RETURN_SYM - 7)) | (1L << (PRINT_SYM - 7)) | (1L << (DISREGARD_SYM - 7)) | (1L << (EXTERNAL_SYM - 7)) | (1L << (TRY_SYM - 7)) | (1L << (LSQBR - 7)) | (1L << (IDENTIFIER - 7)))) != 0)) {
				{
				{
				State = 255; statement();
				}
				}
				State = 260;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 261; Match(RBRACE);
			State = 265;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,20,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 262; stat_elif();
					}
					} 
				}
				State = 267;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,20,_ctx);
			}
			State = 269;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ELSE_SYM) {
				{
				State = 268; stat_else();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_printContext : ParserRuleContext {
		public ITerminalNode PRINT_SYM() { return GetToken(algoParser.PRINT_SYM, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Rounding_exprContext rounding_expr() {
			return GetRuleContext<Rounding_exprContext>(0);
		}
		public Stat_printContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_print; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_print(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_print(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_print(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_printContext stat_print() {
		Stat_printContext _localctx = new Stat_printContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_stat_print);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271; Match(PRINT_SYM);
			State = 272; expr(0);
			State = 274;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==TO_SYM) {
				{
				State = 273; rounding_expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_libraryContext : ParserRuleContext {
		public ITerminalNode LIB_SYM() { return GetToken(algoParser.LIB_SYM, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public ITerminalNode LBRACE() { return GetToken(algoParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(algoParser.RBRACE, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Stat_libraryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_library; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_library(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_library(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_library(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_libraryContext stat_library() {
		Stat_libraryContext _localctx = new Stat_libraryContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_stat_library);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276; Match(LIB_SYM);
			State = 277; Match(IDENTIFIER);
			State = 278; Match(LBRACE);
			State = 282;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (LET_SYM - 7)) | (1L << (FOR_SYM - 7)) | (1L << (FOREACH_SYM - 7)) | (1L << (ADD_SYM - 7)) | (1L << (BREAK_SYM - 7)) | (1L << (CONTINUE_SYM - 7)) | (1L << (REMOVE_SYM - 7)) | (1L << (WHILE_SYM - 7)) | (1L << (IF_SYM - 7)) | (1L << (LIB_SYM - 7)) | (1L << (IMPORT_SYM - 7)) | (1L << (RETURN_SYM - 7)) | (1L << (PRINT_SYM - 7)) | (1L << (DISREGARD_SYM - 7)) | (1L << (EXTERNAL_SYM - 7)) | (1L << (TRY_SYM - 7)) | (1L << (LSQBR - 7)) | (1L << (IDENTIFIER - 7)))) != 0)) {
				{
				{
				State = 279; statement();
				}
				}
				State = 284;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 285; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_importContext : ParserRuleContext {
		public ITerminalNode IMPORT_SYM() { return GetToken(algoParser.IMPORT_SYM, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode AS_SYM() { return GetToken(algoParser.AS_SYM, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public Stat_importContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_import; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_import(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_import(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_import(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_importContext stat_import() {
		Stat_importContext _localctx = new Stat_importContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_stat_import);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 287; Match(IMPORT_SYM);
			State = 288; expr(0);
			State = 291;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS_SYM) {
				{
				State = 289; Match(AS_SYM);
				State = 290; Match(IDENTIFIER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_list_addContext : ParserRuleContext {
		public ITerminalNode ADD_SYM() { return GetToken(algoParser.ADD_SYM, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode TO_SYM() { return GetToken(algoParser.TO_SYM, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public Obj_accessContext obj_access() {
			return GetRuleContext<Obj_accessContext>(0);
		}
		public ITerminalNode AT_SYM() { return GetToken(algoParser.AT_SYM, 0); }
		public Stat_list_addContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_list_add; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_list_add(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_list_add(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_list_add(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_list_addContext stat_list_add() {
		Stat_list_addContext _localctx = new Stat_list_addContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_stat_list_add);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293; Match(ADD_SYM);
			State = 294; expr(0);
			State = 295; Match(TO_SYM);
			State = 298;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,25,_ctx) ) {
			case 1:
				{
				State = 296; Match(IDENTIFIER);
				}
				break;

			case 2:
				{
				State = 297; obj_access();
				}
				break;
			}
			State = 302;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AT_SYM) {
				{
				State = 300; Match(AT_SYM);
				State = 301; expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_list_removeContext : ParserRuleContext {
		public ITerminalNode REMOVE_SYM() { return GetToken(algoParser.REMOVE_SYM, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode FROM_SYM() { return GetToken(algoParser.FROM_SYM, 0); }
		public ITerminalNode IN_SYM() { return GetToken(algoParser.IN_SYM, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public Obj_accessContext obj_access() {
			return GetRuleContext<Obj_accessContext>(0);
		}
		public Stat_list_removeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_list_remove; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_list_remove(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_list_remove(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_list_remove(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_list_removeContext stat_list_remove() {
		Stat_list_removeContext _localctx = new Stat_list_removeContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_stat_list_remove);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 304; Match(REMOVE_SYM);
			State = 305; expr(0);
			State = 306;
			_la = _input.La(1);
			if ( !(_la==FROM_SYM || _la==IN_SYM) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 309;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,27,_ctx) ) {
			case 1:
				{
				State = 307; Match(IDENTIFIER);
				}
				break;

			case 2:
				{
				State = 308; obj_access();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_try_catchContext : ParserRuleContext {
		public ITerminalNode TRY_SYM() { return GetToken(algoParser.TRY_SYM, 0); }
		public ITerminalNode[] LBRACE() { return GetTokens(algoParser.LBRACE); }
		public ITerminalNode LBRACE(int i) {
			return GetToken(algoParser.LBRACE, i);
		}
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public ITerminalNode[] RBRACE() { return GetTokens(algoParser.RBRACE); }
		public ITerminalNode RBRACE(int i) {
			return GetToken(algoParser.RBRACE, i);
		}
		public ITerminalNode CATCH_SYM() { return GetToken(algoParser.CATCH_SYM, 0); }
		public ITerminalNode LBRACKET() { return GetToken(algoParser.LBRACKET, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public ITerminalNode RBRACKET() { return GetToken(algoParser.RBRACKET, 0); }
		public Stat_try_catchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_try_catch; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_try_catch(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_try_catch(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_try_catch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_try_catchContext stat_try_catch() {
		Stat_try_catchContext _localctx = new Stat_try_catchContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_stat_try_catch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311; Match(TRY_SYM);
			State = 312; Match(LBRACE);
			State = 313; block();
			State = 314; Match(RBRACE);
			State = 315; Match(CATCH_SYM);
			State = 316; Match(LBRACKET);
			State = 317; Match(IDENTIFIER);
			State = 318; Match(RBRACKET);
			State = 319; Match(LBRACE);
			State = 320; block();
			State = 321; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_breakContext : ParserRuleContext {
		public ITerminalNode BREAK_SYM() { return GetToken(algoParser.BREAK_SYM, 0); }
		public Stat_breakContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_break; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_break(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_break(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_break(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_breakContext stat_break() {
		Stat_breakContext _localctx = new Stat_breakContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_stat_break);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 323; Match(BREAK_SYM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_continueContext : ParserRuleContext {
		public ITerminalNode CONTINUE_SYM() { return GetToken(algoParser.CONTINUE_SYM, 0); }
		public Stat_continueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_continue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_continue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_continue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_continue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_continueContext stat_continue() {
		Stat_continueContext _localctx = new Stat_continueContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_stat_continue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 325; Match(CONTINUE_SYM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_elifContext : ParserRuleContext {
		public ITerminalNode ELSE_SYM() { return GetToken(algoParser.ELSE_SYM, 0); }
		public ITerminalNode IF_SYM() { return GetToken(algoParser.IF_SYM, 0); }
		public ITerminalNode LBRACKET() { return GetToken(algoParser.LBRACKET, 0); }
		public CheckContext check() {
			return GetRuleContext<CheckContext>(0);
		}
		public ITerminalNode RBRACKET() { return GetToken(algoParser.RBRACKET, 0); }
		public ITerminalNode LBRACE() { return GetToken(algoParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(algoParser.RBRACE, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Stat_elifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_elif; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_elif(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_elif(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_elif(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_elifContext stat_elif() {
		Stat_elifContext _localctx = new Stat_elifContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_stat_elif);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 327; Match(ELSE_SYM);
			State = 328; Match(IF_SYM);
			State = 329; Match(LBRACKET);
			State = 330; check(0);
			State = 331; Match(RBRACKET);
			State = 332; Match(LBRACE);
			State = 336;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (LET_SYM - 7)) | (1L << (FOR_SYM - 7)) | (1L << (FOREACH_SYM - 7)) | (1L << (ADD_SYM - 7)) | (1L << (BREAK_SYM - 7)) | (1L << (CONTINUE_SYM - 7)) | (1L << (REMOVE_SYM - 7)) | (1L << (WHILE_SYM - 7)) | (1L << (IF_SYM - 7)) | (1L << (LIB_SYM - 7)) | (1L << (IMPORT_SYM - 7)) | (1L << (RETURN_SYM - 7)) | (1L << (PRINT_SYM - 7)) | (1L << (DISREGARD_SYM - 7)) | (1L << (EXTERNAL_SYM - 7)) | (1L << (TRY_SYM - 7)) | (1L << (LSQBR - 7)) | (1L << (IDENTIFIER - 7)))) != 0)) {
				{
				{
				State = 333; statement();
				}
				}
				State = 338;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 339; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_elseContext : ParserRuleContext {
		public ITerminalNode ELSE_SYM() { return GetToken(algoParser.ELSE_SYM, 0); }
		public ITerminalNode LBRACE() { return GetToken(algoParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(algoParser.RBRACE, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Stat_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_else; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_else(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_else(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_else(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_elseContext stat_else() {
		Stat_elseContext _localctx = new Stat_elseContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_stat_else);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 341; Match(ELSE_SYM);
			State = 342; Match(LBRACE);
			State = 346;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (LET_SYM - 7)) | (1L << (FOR_SYM - 7)) | (1L << (FOREACH_SYM - 7)) | (1L << (ADD_SYM - 7)) | (1L << (BREAK_SYM - 7)) | (1L << (CONTINUE_SYM - 7)) | (1L << (REMOVE_SYM - 7)) | (1L << (WHILE_SYM - 7)) | (1L << (IF_SYM - 7)) | (1L << (LIB_SYM - 7)) | (1L << (IMPORT_SYM - 7)) | (1L << (RETURN_SYM - 7)) | (1L << (PRINT_SYM - 7)) | (1L << (DISREGARD_SYM - 7)) | (1L << (EXTERNAL_SYM - 7)) | (1L << (TRY_SYM - 7)) | (1L << (LSQBR - 7)) | (1L << (IDENTIFIER - 7)))) != 0)) {
				{
				{
				State = 343; statement();
				}
				}
				State = 348;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 349; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Literal_paramsContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(algoParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(algoParser.COMMA, i);
		}
		public Literal_paramsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_params; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterLiteral_params(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitLiteral_params(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral_params(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Literal_paramsContext literal_params() {
		Literal_paramsContext _localctx = new Literal_paramsContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_literal_params);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 356;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,30,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 351; expr(0);
					State = 352; Match(COMMA);
					}
					} 
				}
				State = 358;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,30,_ctx);
			}
			State = 359; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Abstract_paramsContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(algoParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(algoParser.IDENTIFIER, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(algoParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(algoParser.COMMA, i);
		}
		public Abstract_paramsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstract_params; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterAbstract_params(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitAbstract_params(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbstract_params(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Abstract_paramsContext abstract_params() {
		Abstract_paramsContext _localctx = new Abstract_paramsContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_abstract_params);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 365;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,31,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 361; Match(IDENTIFIER);
					State = 362; Match(COMMA);
					}
					} 
				}
				State = 367;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,31,_ctx);
			}
			State = 368; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CheckContext : ParserRuleContext {
		public CheckContext check() {
			return GetRuleContext<CheckContext>(0);
		}
		public ITerminalNode BIN_OR() { return GetToken(algoParser.BIN_OR, 0); }
		public CheckfragContext checkfrag() {
			return GetRuleContext<CheckfragContext>(0);
		}
		public ITerminalNode BIN_AND() { return GetToken(algoParser.BIN_AND, 0); }
		public ITerminalNode LBRACKET() { return GetToken(algoParser.LBRACKET, 0); }
		public ITerminalNode RBRACKET() { return GetToken(algoParser.RBRACKET, 0); }
		public ITerminalNode INVERT_SYM() { return GetToken(algoParser.INVERT_SYM, 0); }
		public CheckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_check; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterCheck(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitCheck(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheck(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CheckContext check() {
		return check(0);
	}

	private CheckContext check(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		CheckContext _localctx = new CheckContext(_ctx, _parentState);
		CheckContext _prevctx = _localctx;
		int _startState = 56;
		EnterRecursionRule(_localctx, 56, RULE_check, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 378;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,32,_ctx) ) {
			case 1:
				{
				State = 371; Match(LBRACKET);
				State = 372; check(0);
				State = 373; Match(RBRACKET);
				}
				break;

			case 2:
				{
				State = 375; Match(INVERT_SYM);
				State = 376; check(2);
				}
				break;

			case 3:
				{
				State = 377; checkfrag();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 388;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,34,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 386;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,33,_ctx) ) {
					case 1:
						{
						_localctx = new CheckContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_check);
						State = 380;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 381; Match(BIN_OR);
						State = 382; checkfrag();
						}
						break;

					case 2:
						{
						_localctx = new CheckContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_check);
						State = 383;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 384; Match(BIN_AND);
						State = 385; checkfrag();
						}
						break;
					}
					} 
				}
				State = 390;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,34,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CheckfragContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode GRTR_THAN() { return GetToken(algoParser.GRTR_THAN, 0); }
		public ITerminalNode LESS_THAN() { return GetToken(algoParser.LESS_THAN, 0); }
		public ITerminalNode GRTR_THAN_ET() { return GetToken(algoParser.GRTR_THAN_ET, 0); }
		public ITerminalNode LESS_THAN_ET() { return GetToken(algoParser.LESS_THAN_ET, 0); }
		public ITerminalNode BIN_EQUALS() { return GetToken(algoParser.BIN_EQUALS, 0); }
		public ITerminalNode BIN_NET() { return GetToken(algoParser.BIN_NET, 0); }
		public CheckfragContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checkfrag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterCheckfrag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitCheckfrag(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheckfrag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CheckfragContext checkfrag() {
		CheckfragContext _localctx = new CheckfragContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_checkfrag);
		try {
			State = 416;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,35,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 391; expr(0);
				State = 392; Match(GRTR_THAN);
				State = 393; expr(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 395; expr(0);
				State = 396; Match(LESS_THAN);
				State = 397; expr(0);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 399; expr(0);
				State = 400; Match(GRTR_THAN_ET);
				State = 401; expr(0);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 403; expr(0);
				State = 404; Match(LESS_THAN_ET);
				State = 405; expr(0);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 407; expr(0);
				State = 408; Match(BIN_EQUALS);
				State = 409; expr(0);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 411; expr(0);
				State = 412; Match(BIN_NET);
				State = 413; expr(0);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 415; expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode ADD_OP() { return GetToken(algoParser.ADD_OP, 0); }
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ITerminalNode TAKE_OP() { return GetToken(algoParser.TAKE_OP, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 60;
		EnterRecursionRule(_localctx, 60, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 419; term(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 429;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,37,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 427;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,36,_ctx) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 421;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 422; Match(ADD_OP);
						State = 423; term(0);
						}
						break;

					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 424;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 425; Match(TAKE_OP);
						State = 426; term(0);
						}
						break;
					}
					} 
				}
				State = 431;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,37,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Rounding_exprContext : ParserRuleContext {
		public ITerminalNode TO_SYM() { return GetToken(algoParser.TO_SYM, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode SIG_FIG_SYM() { return GetToken(algoParser.SIG_FIG_SYM, 0); }
		public Rounding_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rounding_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterRounding_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitRounding_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRounding_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rounding_exprContext rounding_expr() {
		Rounding_exprContext _localctx = new Rounding_exprContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_rounding_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 432; Match(TO_SYM);
			State = 433; expr(0);
			State = 434; Match(SIG_FIG_SYM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ITerminalNode MUL_OP() { return GetToken(algoParser.MUL_OP, 0); }
		public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public ITerminalNode DIV_OP() { return GetToken(algoParser.DIV_OP, 0); }
		public ITerminalNode MOD_OP() { return GetToken(algoParser.MOD_OP, 0); }
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		return term(0);
	}

	private TermContext term(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		TermContext _localctx = new TermContext(_ctx, _parentState);
		TermContext _prevctx = _localctx;
		int _startState = 64;
		EnterRecursionRule(_localctx, 64, RULE_term, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 437; factor(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 450;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,39,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 448;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,38,_ctx) ) {
					case 1:
						{
						_localctx = new TermContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_term);
						State = 439;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 440; Match(MUL_OP);
						State = 441; factor(0);
						}
						break;

					case 2:
						{
						_localctx = new TermContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_term);
						State = 442;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 443; Match(DIV_OP);
						State = 444; factor(0);
						}
						break;

					case 3:
						{
						_localctx = new TermContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_term);
						State = 445;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 446; Match(MOD_OP);
						State = 447; factor(0);
						}
						break;
					}
					} 
				}
				State = 452;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,39,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public ITerminalNode POW_OP() { return GetToken(algoParser.POW_OP, 0); }
		public SubContext sub() {
			return GetRuleContext<SubContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		return factor(0);
	}

	private FactorContext factor(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		FactorContext _localctx = new FactorContext(_ctx, _parentState);
		FactorContext _prevctx = _localctx;
		int _startState = 66;
		EnterRecursionRule(_localctx, 66, RULE_factor, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 454; sub();
			}
			_ctx.stop = _input.Lt(-1);
			State = 461;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,40,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new FactorContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_factor);
					State = 456;
					if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
					State = 457; Match(POW_OP);
					State = 458; sub();
					}
					} 
				}
				State = 463;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,40,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SubContext : ParserRuleContext {
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ITerminalNode LBRACKET() { return GetToken(algoParser.LBRACKET, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RBRACKET() { return GetToken(algoParser.RBRACKET, 0); }
		public SubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sub; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterSub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitSub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubContext sub() {
		SubContext _localctx = new SubContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_sub);
		try {
			State = 469;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case INTEGER:
			case FLOAT:
			case BOOLEAN:
			case STRING:
			case RATIONAL:
			case NULL:
			case OBJ_SYM:
			case LSQBR:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 464; value();
				}
				break;
			case LBRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 465; Match(LBRACKET);
				State = 466; expr(0);
				State = 467; Match(RBRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		public ITerminalNode MUL_OP() { return GetToken(algoParser.MUL_OP, 0); }
		public ITerminalNode DIV_OP() { return GetToken(algoParser.DIV_OP, 0); }
		public ITerminalNode TAKE_OP() { return GetToken(algoParser.TAKE_OP, 0); }
		public ITerminalNode ADD_OP() { return GetToken(algoParser.ADD_OP, 0); }
		public ITerminalNode POW_OP() { return GetToken(algoParser.POW_OP, 0); }
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 471;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD_OP) | (1L << TAKE_OP) | (1L << MUL_OP) | (1L << DIV_OP) | (1L << POW_OP))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Selfmod_opContext : ParserRuleContext {
		public ITerminalNode ADDFROM_OP() { return GetToken(algoParser.ADDFROM_OP, 0); }
		public ITerminalNode TAKEFROM_OP() { return GetToken(algoParser.TAKEFROM_OP, 0); }
		public ITerminalNode MULFROM_OP() { return GetToken(algoParser.MULFROM_OP, 0); }
		public ITerminalNode DIVFROM_OP() { return GetToken(algoParser.DIVFROM_OP, 0); }
		public Selfmod_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selfmod_op; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterSelfmod_op(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitSelfmod_op(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelfmod_op(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Selfmod_opContext selfmod_op() {
		Selfmod_opContext _localctx = new Selfmod_opContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_selfmod_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 473;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADDFROM_OP) | (1L << TAKEFROM_OP) | (1L << DIVFROM_OP) | (1L << MULFROM_OP))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Postfix_opContext : ParserRuleContext {
		public ITerminalNode ADD_PFOP() { return GetToken(algoParser.ADD_PFOP, 0); }
		public ITerminalNode TAKE_PFOP() { return GetToken(algoParser.TAKE_PFOP, 0); }
		public Postfix_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfix_op; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterPostfix_op(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitPostfix_op(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfix_op(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Postfix_opContext postfix_op() {
		Postfix_opContext _localctx = new Postfix_opContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_postfix_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 475;
			_la = _input.La(1);
			if ( !(_la==ADD_PFOP || _la==TAKE_PFOP) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public Stat_functionCallContext stat_functionCall() {
			return GetRuleContext<Stat_functionCallContext>(0);
		}
		public Obj_accessContext obj_access() {
			return GetRuleContext<Obj_accessContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public ITerminalNode INTEGER() { return GetToken(algoParser.INTEGER, 0); }
		public ITerminalNode FLOAT() { return GetToken(algoParser.FLOAT, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(algoParser.BOOLEAN, 0); }
		public ITerminalNode STRING() { return GetToken(algoParser.STRING, 0); }
		public ITerminalNode RATIONAL() { return GetToken(algoParser.RATIONAL, 0); }
		public ITerminalNode NULL() { return GetToken(algoParser.NULL, 0); }
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public Array_accessContext array_access() {
			return GetRuleContext<Array_accessContext>(0);
		}
		public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_value);
		try {
			State = 489;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,42,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 477; stat_functionCall();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 478; obj_access();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 479; Match(IDENTIFIER);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 480; Match(INTEGER);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 481; Match(FLOAT);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 482; Match(BOOLEAN);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 483; Match(STRING);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 484; Match(RATIONAL);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 485; Match(NULL);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 486; array();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 487; array_access();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 488; @object();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Obj_accessContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(algoParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(algoParser.IDENTIFIER, i);
		}
		public ITerminalNode[] POINT() { return GetTokens(algoParser.POINT); }
		public ITerminalNode POINT(int i) {
			return GetToken(algoParser.POINT, i);
		}
		public Obj_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obj_access; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterObj_access(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitObj_access(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObj_access(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Obj_accessContext obj_access() {
		Obj_accessContext _localctx = new Obj_accessContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_obj_access);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 493;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 491; Match(IDENTIFIER);
					State = 492; Match(POINT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 495;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,43,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 497; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterArray(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitArray(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_array);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 499; Match(LSQBR);
			State = 509;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTEGER) | (1L << FLOAT) | (1L << BOOLEAN) | (1L << STRING) | (1L << RATIONAL) | (1L << NULL) | (1L << OBJ_SYM) | (1L << LSQBR))) != 0) || _la==IDENTIFIER) {
				{
				State = 505;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,44,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 500; value();
						State = 501; Match(COMMA);
						}
						} 
					}
					State = 507;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,44,_ctx);
				}
				State = 508; value();
				}
			}

			State = 511; Match(RSQBR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_accessContext : ParserRuleContext {
		public Literal_paramsContext literal_params() {
			return GetRuleContext<Literal_paramsContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public Obj_accessContext obj_access() {
			return GetRuleContext<Obj_accessContext>(0);
		}
		public Stat_functionCallContext stat_functionCall() {
			return GetRuleContext<Stat_functionCallContext>(0);
		}
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public Array_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_access; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterArray_access(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitArray_access(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_access(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_accessContext array_access() {
		Array_accessContext _localctx = new Array_accessContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_array_access);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 517;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,46,_ctx) ) {
			case 1:
				{
				State = 513; Match(IDENTIFIER);
				}
				break;

			case 2:
				{
				State = 514; obj_access();
				}
				break;

			case 3:
				{
				State = 515; stat_functionCall();
				}
				break;

			case 4:
				{
				State = 516; array();
				}
				break;
			}
			State = 519; Match(LSQBR);
			State = 520; literal_params();
			State = 521; Match(RSQBR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectContext : ParserRuleContext {
		public ITerminalNode OBJ_SYM() { return GetToken(algoParser.OBJ_SYM, 0); }
		public ITerminalNode LBRACE() { return GetToken(algoParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(algoParser.RBRACE, 0); }
		public Obj_child_definitionsContext obj_child_definitions() {
			return GetRuleContext<Obj_child_definitionsContext>(0);
		}
		public ObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterObject(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitObject(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectContext @object() {
		ObjectContext _localctx = new ObjectContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_object);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 523; Match(OBJ_SYM);
			State = 524; Match(LBRACE);
			State = 526;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LET_SYM || _la==EXTERNAL_SYM) {
				{
				State = 525; obj_child_definitions();
				}
			}

			State = 528; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Obj_child_definitionsContext : ParserRuleContext {
		public Obj_vardefineContext[] obj_vardefine() {
			return GetRuleContexts<Obj_vardefineContext>();
		}
		public Obj_vardefineContext obj_vardefine(int i) {
			return GetRuleContext<Obj_vardefineContext>(i);
		}
		public Obj_funcdefineContext[] obj_funcdefine() {
			return GetRuleContexts<Obj_funcdefineContext>();
		}
		public Obj_funcdefineContext obj_funcdefine(int i) {
			return GetRuleContext<Obj_funcdefineContext>(i);
		}
		public Obj_externdefineContext[] obj_externdefine() {
			return GetRuleContexts<Obj_externdefineContext>();
		}
		public Obj_externdefineContext obj_externdefine(int i) {
			return GetRuleContext<Obj_externdefineContext>(i);
		}
		public Obj_child_definitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obj_child_definitions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterObj_child_definitions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitObj_child_definitions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObj_child_definitions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Obj_child_definitionsContext obj_child_definitions() {
		Obj_child_definitionsContext _localctx = new Obj_child_definitionsContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_obj_child_definitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 533;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				State = 533;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,48,_ctx) ) {
				case 1:
					{
					State = 530; obj_vardefine();
					}
					break;

				case 2:
					{
					State = 531; obj_funcdefine();
					}
					break;

				case 3:
					{
					State = 532; obj_externdefine();
					}
					break;
				}
				}
				State = 535;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==LET_SYM || _la==EXTERNAL_SYM );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Obj_vardefineContext : ParserRuleContext {
		public ITerminalNode LET_SYM() { return GetToken(algoParser.LET_SYM, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public ITerminalNode EQUALS() { return GetToken(algoParser.EQUALS, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode ENDLINE() { return GetToken(algoParser.ENDLINE, 0); }
		public Obj_vardefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obj_vardefine; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterObj_vardefine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitObj_vardefine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObj_vardefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Obj_vardefineContext obj_vardefine() {
		Obj_vardefineContext _localctx = new Obj_vardefineContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_obj_vardefine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 537; Match(LET_SYM);
			State = 538; Match(IDENTIFIER);
			State = 539; Match(EQUALS);
			State = 540; expr(0);
			State = 541; Match(ENDLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Obj_funcdefineContext : ParserRuleContext {
		public ITerminalNode LET_SYM() { return GetToken(algoParser.LET_SYM, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public ITerminalNode LBRACKET() { return GetToken(algoParser.LBRACKET, 0); }
		public ITerminalNode RBRACKET() { return GetToken(algoParser.RBRACKET, 0); }
		public ITerminalNode EQUALS() { return GetToken(algoParser.EQUALS, 0); }
		public ITerminalNode LBRACE() { return GetToken(algoParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(algoParser.RBRACE, 0); }
		public Abstract_paramsContext abstract_params() {
			return GetRuleContext<Abstract_paramsContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Obj_funcdefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obj_funcdefine; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterObj_funcdefine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitObj_funcdefine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObj_funcdefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Obj_funcdefineContext obj_funcdefine() {
		Obj_funcdefineContext _localctx = new Obj_funcdefineContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_obj_funcdefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 543; Match(LET_SYM);
			State = 544; Match(IDENTIFIER);
			State = 545; Match(LBRACKET);
			State = 547;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IDENTIFIER) {
				{
				State = 546; abstract_params();
				}
			}

			State = 549; Match(RBRACKET);
			State = 550; Match(EQUALS);
			State = 551; Match(LBRACE);
			State = 555;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (LET_SYM - 7)) | (1L << (FOR_SYM - 7)) | (1L << (FOREACH_SYM - 7)) | (1L << (ADD_SYM - 7)) | (1L << (BREAK_SYM - 7)) | (1L << (CONTINUE_SYM - 7)) | (1L << (REMOVE_SYM - 7)) | (1L << (WHILE_SYM - 7)) | (1L << (IF_SYM - 7)) | (1L << (LIB_SYM - 7)) | (1L << (IMPORT_SYM - 7)) | (1L << (RETURN_SYM - 7)) | (1L << (PRINT_SYM - 7)) | (1L << (DISREGARD_SYM - 7)) | (1L << (EXTERNAL_SYM - 7)) | (1L << (TRY_SYM - 7)) | (1L << (LSQBR - 7)) | (1L << (IDENTIFIER - 7)))) != 0)) {
				{
				{
				State = 552; statement();
				}
				}
				State = 557;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 558; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Obj_externdefineContext : ParserRuleContext {
		public Stat_loadFuncExtContext stat_loadFuncExt() {
			return GetRuleContext<Stat_loadFuncExtContext>(0);
		}
		public ITerminalNode ENDLINE() { return GetToken(algoParser.ENDLINE, 0); }
		public Obj_externdefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obj_externdefine; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterObj_externdefine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitObj_externdefine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObj_externdefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Obj_externdefineContext obj_externdefine() {
		Obj_externdefineContext _localctx = new Obj_externdefineContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_obj_externdefine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 560; stat_loadFuncExt();
			State = 561; Match(ENDLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 28: return check_sempred((CheckContext)_localctx, predIndex);

		case 30: return expr_sempred((ExprContext)_localctx, predIndex);

		case 32: return term_sempred((TermContext)_localctx, predIndex);

		case 33: return factor_sempred((FactorContext)_localctx, predIndex);
		}
		return true;
	}
	private bool check_sempred(CheckContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 5);

		case 1: return Precpred(_ctx, 4);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(_ctx, 3);

		case 3: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool term_sempred(TermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(_ctx, 4);

		case 5: return Precpred(_ctx, 3);

		case 6: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool factor_sempred(FactorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(_ctx, 2);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3G\x236\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x3\x2\x3\x2\x3\x2\x3"+
		"\x3\a\x3\x65\n\x3\f\x3\xE\x3h\v\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4y\n\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4\x83\n\x4\x5\x4\x85"+
		"\n\x4\x3\x5\x3\x5\x3\x5\x5\x5\x8A\n\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3"+
		"\x6\x5\x6\x92\n\x6\x3\x6\x3\x6\x3\x6\x5\x6\x97\n\x6\x3\a\x3\a\x3\a\x5"+
		"\a\x9C\n\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x5\b\xA4\n\b\x3\b\x3\b\x3\t\x3"+
		"\t\x3\t\x3\t\x5\t\xAC\n\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x5\n\xB4\n\n\x3"+
		"\n\x3\n\x3\v\x3\v\x5\v\xBA\n\v\x3\v\x3\v\x5\v\xBE\n\v\x3\v\x3\v\x3\f\x3"+
		"\f\x3\f\x3\f\x5\f\xC6\n\f\x3\f\x3\f\x3\f\x3\f\a\f\xCC\n\f\f\f\xE\f\xCF"+
		"\v\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x5\xE\xDA\n\xE\x3"+
		"\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\xE4\n\xF\x3\xF\x3"+
		"\xF\x3\xF\a\xF\xE9\n\xF\f\xF\xE\xF\xEC\v\xF\x3\xF\x3\xF\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x3\x10\x3\x10\a\x10\xF6\n\x10\f\x10\xE\x10\xF9\v\x10\x3"+
		"\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\a\x11\x103\n\x11"+
		"\f\x11\xE\x11\x106\v\x11\x3\x11\x3\x11\a\x11\x10A\n\x11\f\x11\xE\x11\x10D"+
		"\v\x11\x3\x11\x5\x11\x110\n\x11\x3\x12\x3\x12\x3\x12\x5\x12\x115\n\x12"+
		"\x3\x13\x3\x13\x3\x13\x3\x13\a\x13\x11B\n\x13\f\x13\xE\x13\x11E\v\x13"+
		"\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\x126\n\x14\x3\x15\x3"+
		"\x15\x3\x15\x3\x15\x3\x15\x5\x15\x12D\n\x15\x3\x15\x3\x15\x5\x15\x131"+
		"\n\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x5\x16\x138\n\x16\x3\x17\x3"+
		"\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3"+
		"\x17\x3\x18\x3\x18\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3"+
		"\x1A\x3\x1A\a\x1A\x151\n\x1A\f\x1A\xE\x1A\x154\v\x1A\x3\x1A\x3\x1A\x3"+
		"\x1B\x3\x1B\x3\x1B\a\x1B\x15B\n\x1B\f\x1B\xE\x1B\x15E\v\x1B\x3\x1B\x3"+
		"\x1B\x3\x1C\x3\x1C\x3\x1C\a\x1C\x165\n\x1C\f\x1C\xE\x1C\x168\v\x1C\x3"+
		"\x1C\x3\x1C\x3\x1D\x3\x1D\a\x1D\x16E\n\x1D\f\x1D\xE\x1D\x171\v\x1D\x3"+
		"\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x5"+
		"\x1E\x17D\n\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\a\x1E\x185\n"+
		"\x1E\f\x1E\xE\x1E\x188\v\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F"+
		"\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F"+
		"\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F"+
		"\x1A3\n\x1F\x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \a \x1AE\n \f \xE \x1B1"+
		"\v \x3!\x3!\x3!\x3!\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\""+
		"\x3\"\x3\"\a\"\x1C3\n\"\f\"\xE\"\x1C6\v\"\x3#\x3#\x3#\x3#\x3#\x3#\a#\x1CE"+
		"\n#\f#\xE#\x1D1\v#\x3$\x3$\x3$\x3$\x3$\x5$\x1D8\n$\x3%\x3%\x3&\x3&\x3"+
		"\'\x3\'\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x5(\x1EC\n(\x3"+
		")\x3)\x6)\x1F0\n)\r)\xE)\x1F1\x3)\x3)\x3*\x3*\x3*\x3*\a*\x1FA\n*\f*\xE"+
		"*\x1FD\v*\x3*\x5*\x200\n*\x3*\x3*\x3+\x3+\x3+\x3+\x5+\x208\n+\x3+\x3+"+
		"\x3+\x3+\x3,\x3,\x3,\x5,\x211\n,\x3,\x3,\x3-\x3-\x3-\x6-\x218\n-\r-\xE"+
		"-\x219\x3.\x3.\x3.\x3.\x3.\x3.\x3/\x3/\x3/\x3/\x5/\x226\n/\x3/\x3/\x3"+
		"/\x3/\a/\x22C\n/\f/\xE/\x22F\v/\x3/\x3/\x3\x30\x3\x30\x3\x30\x3\x30\x2"+
		"\x2\x6:>\x42\x44\x31\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12"+
		"\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2"+
		",\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44"+
		"\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2X\x2Z\x2\\\x2^\x2\x2\a\x3\x2"+
		"\n\v\x4\x2\x11\x11\x13\x13\x3\x2/\x33\x3\x2\x36\x39\x3\x2:;\x263\x2`\x3"+
		"\x2\x2\x2\x4\x66\x3\x2\x2\x2\x6\x84\x3\x2\x2\x2\b\x86\x3\x2\x2\x2\n\x91"+
		"\x3\x2\x2\x2\f\x9B\x3\x2\x2\x2\xE\xA3\x3\x2\x2\x2\x10\xA7\x3\x2\x2\x2"+
		"\x12\xAD\x3\x2\x2\x2\x14\xB9\x3\x2\x2\x2\x16\xC1\x3\x2\x2\x2\x18\xD2\x3"+
		"\x2\x2\x2\x1A\xD7\x3\x2\x2\x2\x1C\xDB\x3\x2\x2\x2\x1E\xEF\x3\x2\x2\x2"+
		" \xFC\x3\x2\x2\x2\"\x111\x3\x2\x2\x2$\x116\x3\x2\x2\x2&\x121\x3\x2\x2"+
		"\x2(\x127\x3\x2\x2\x2*\x132\x3\x2\x2\x2,\x139\x3\x2\x2\x2.\x145\x3\x2"+
		"\x2\x2\x30\x147\x3\x2\x2\x2\x32\x149\x3\x2\x2\x2\x34\x157\x3\x2\x2\x2"+
		"\x36\x166\x3\x2\x2\x2\x38\x16F\x3\x2\x2\x2:\x17C\x3\x2\x2\x2<\x1A2\x3"+
		"\x2\x2\x2>\x1A4\x3\x2\x2\x2@\x1B2\x3\x2\x2\x2\x42\x1B6\x3\x2\x2\x2\x44"+
		"\x1C7\x3\x2\x2\x2\x46\x1D7\x3\x2\x2\x2H\x1D9\x3\x2\x2\x2J\x1DB\x3\x2\x2"+
		"\x2L\x1DD\x3\x2\x2\x2N\x1EB\x3\x2\x2\x2P\x1EF\x3\x2\x2\x2R\x1F5\x3\x2"+
		"\x2\x2T\x207\x3\x2\x2\x2V\x20D\x3\x2\x2\x2X\x217\x3\x2\x2\x2Z\x21B\x3"+
		"\x2\x2\x2\\\x221\x3\x2\x2\x2^\x232\x3\x2\x2\x2`\x61\x5\x4\x3\x2\x61\x62"+
		"\a\x2\x2\x3\x62\x3\x3\x2\x2\x2\x63\x65\x5\x6\x4\x2\x64\x63\x3\x2\x2\x2"+
		"\x65h\x3\x2\x2\x2\x66\x64\x3\x2\x2\x2\x66g\x3\x2\x2\x2g\x5\x3\x2\x2\x2"+
		"h\x66\x3\x2\x2\x2iy\x5\b\x5\x2jy\x5\x12\n\x2ky\x5\x14\v\x2ly\x5\"\x12"+
		"\x2my\x5\n\x6\x2ny\x5\f\a\x2oy\x5\xE\b\x2py\x5\x1A\xE\x2qy\x5\x10\t\x2"+
		"ry\x5&\x14\x2sy\x5\x18\r\x2ty\x5(\x15\x2uy\x5*\x16\x2vy\x5.\x18\x2wy\x5"+
		"\x30\x19\x2xi\x3\x2\x2\x2xj\x3\x2\x2\x2xk\x3\x2\x2\x2xl\x3\x2\x2\x2xm"+
		"\x3\x2\x2\x2xn\x3\x2\x2\x2xo\x3\x2\x2\x2xp\x3\x2\x2\x2xq\x3\x2\x2\x2x"+
		"r\x3\x2\x2\x2xs\x3\x2\x2\x2xt\x3\x2\x2\x2xu\x3\x2\x2\x2xv\x3\x2\x2\x2"+
		"xw\x3\x2\x2\x2yz\x3\x2\x2\x2z{\a$\x2\x2{\x85\x3\x2\x2\x2|\x83\x5\x1C\xF"+
		"\x2}\x83\x5\x16\f\x2~\x83\x5 \x11\x2\x7F\x83\x5$\x13\x2\x80\x83\x5\x1E"+
		"\x10\x2\x81\x83\x5,\x17\x2\x82|\x3\x2\x2\x2\x82}\x3\x2\x2\x2\x82~\x3\x2"+
		"\x2\x2\x82\x7F\x3\x2\x2\x2\x82\x80\x3\x2\x2\x2\x82\x81\x3\x2\x2\x2\x83"+
		"\x85\x3\x2\x2\x2\x84x\x3\x2\x2\x2\x84\x82\x3\x2\x2\x2\x85\a\x3\x2\x2\x2"+
		"\x86\x89\a\t\x2\x2\x87\x8A\a\x44\x2\x2\x88\x8A\x5P)\x2\x89\x87\x3\x2\x2"+
		"\x2\x89\x88\x3\x2\x2\x2\x8A\x8B\x3\x2\x2\x2\x8B\x8C\a%\x2\x2\x8C\x8D\x5"+
		"> \x2\x8D\t\x3\x2\x2\x2\x8E\x92\a\x44\x2\x2\x8F\x92\x5P)\x2\x90\x92\x5"+
		"T+\x2\x91\x8E\x3\x2\x2\x2\x91\x8F\x3\x2\x2\x2\x91\x90\x3\x2\x2\x2\x92"+
		"\x93\x3\x2\x2\x2\x93\x94\a%\x2\x2\x94\x96\x5> \x2\x95\x97\x5@!\x2\x96"+
		"\x95\x3\x2\x2\x2\x96\x97\x3\x2\x2\x2\x97\v\x3\x2\x2\x2\x98\x9C\a\x44\x2"+
		"\x2\x99\x9C\x5P)\x2\x9A\x9C\x5T+\x2\x9B\x98\x3\x2\x2\x2\x9B\x99\x3\x2"+
		"\x2\x2\x9B\x9A\x3\x2\x2\x2\x9C\x9D\x3\x2\x2\x2\x9D\x9E\x5J&\x2\x9E\x9F"+
		"\x5> \x2\x9F\r\x3\x2\x2\x2\xA0\xA4\a\x44\x2\x2\xA1\xA4\x5P)\x2\xA2\xA4"+
		"\x5T+\x2\xA3\xA0\x3\x2\x2\x2\xA3\xA1\x3\x2\x2\x2\xA3\xA2\x3\x2\x2\x2\xA4"+
		"\xA5\x3\x2\x2\x2\xA5\xA6\x5L\'\x2\xA6\xF\x3\x2\x2\x2\xA7\xAB\a \x2\x2"+
		"\xA8\xAC\a\x44\x2\x2\xA9\xAC\x5P)\x2\xAA\xAC\a\x31\x2\x2\xAB\xA8\x3\x2"+
		"\x2\x2\xAB\xA9\x3\x2\x2\x2\xAB\xAA\x3\x2\x2\x2\xAC\x11\x3\x2\x2\x2\xAD"+
		"\xAE\a\t\x2\x2\xAE\xAF\a\x44\x2\x2\xAF\xB0\a%\x2\x2\xB0\xB1\a\x18\x2\x2"+
		"\xB1\xB3\a\'\x2\x2\xB2\xB4\x5\x38\x1D\x2\xB3\xB2\x3\x2\x2\x2\xB3\xB4\x3"+
		"\x2\x2\x2\xB4\xB5\x3\x2\x2\x2\xB5\xB6\a(\x2\x2\xB6\x13\x3\x2\x2\x2\xB7"+
		"\xBA\a\x44\x2\x2\xB8\xBA\x5P)\x2\xB9\xB7\x3\x2\x2\x2\xB9\xB8\x3\x2\x2"+
		"\x2\xBA\xBB\x3\x2\x2\x2\xBB\xBD\a-\x2\x2\xBC\xBE\x5\x36\x1C\x2\xBD\xBC"+
		"\x3\x2\x2\x2\xBD\xBE\x3\x2\x2\x2\xBE\xBF\x3\x2\x2\x2\xBF\xC0\a.\x2\x2"+
		"\xC0\x15\x3\x2\x2\x2\xC1\xC2\a\t\x2\x2\xC2\xC3\a\x44\x2\x2\xC3\xC5\a-"+
		"\x2\x2\xC4\xC6\x5\x38\x1D\x2\xC5\xC4\x3\x2\x2\x2\xC5\xC6\x3\x2\x2\x2\xC6"+
		"\xC7\x3\x2\x2\x2\xC7\xC8\a.\x2\x2\xC8\xC9\a%\x2\x2\xC9\xCD\a\'\x2\x2\xCA"+
		"\xCC\x5\x6\x4\x2\xCB\xCA\x3\x2\x2\x2\xCC\xCF\x3\x2\x2\x2\xCD\xCB\x3\x2"+
		"\x2\x2\xCD\xCE\x3\x2\x2\x2\xCE\xD0\x3\x2\x2\x2\xCF\xCD\x3\x2\x2\x2\xD0"+
		"\xD1\a(\x2\x2\xD1\x17\x3\x2\x2\x2\xD2\xD3\a!\x2\x2\xD3\xD4\a\x44\x2\x2"+
		"\xD4\xD5\a,\x2\x2\xD5\xD6\x5P)\x2\xD6\x19\x3\x2\x2\x2\xD7\xD9\a\x1E\x2"+
		"\x2\xD8\xDA\x5> \x2\xD9\xD8\x3\x2\x2\x2\xD9\xDA\x3\x2\x2\x2\xDA\x1B\x3"+
		"\x2\x2\x2\xDB\xDC\t\x2\x2\x2\xDC\xDD\a-\x2\x2\xDD\xE3\a\x44\x2\x2\xDE"+
		"\xDF\a\x13\x2\x2\xDF\xE4\x5> \x2\xE0\xE1\a\x15\x2\x2\xE1\xE2\a\x16\x2"+
		"\x2\xE2\xE4\x5> \x2\xE3\xDE\x3\x2\x2\x2\xE3\xE0\x3\x2\x2\x2\xE4\xE5\x3"+
		"\x2\x2\x2\xE5\xE6\a.\x2\x2\xE6\xEA\a\'\x2\x2\xE7\xE9\x5\x6\x4\x2\xE8\xE7"+
		"\x3\x2\x2\x2\xE9\xEC\x3\x2\x2\x2\xEA\xE8\x3\x2\x2\x2\xEA\xEB\x3\x2\x2"+
		"\x2\xEB\xED\x3\x2\x2\x2\xEC\xEA\x3\x2\x2\x2\xED\xEE\a(\x2\x2\xEE\x1D\x3"+
		"\x2\x2\x2\xEF\xF0\a\x12\x2\x2\xF0\xF1\a-\x2\x2\xF1\xF2\x5:\x1E\x2\xF2"+
		"\xF3\a.\x2\x2\xF3\xF7\a\'\x2\x2\xF4\xF6\x5\x6\x4\x2\xF5\xF4\x3\x2\x2\x2"+
		"\xF6\xF9\x3\x2\x2\x2\xF7\xF5\x3\x2\x2\x2\xF7\xF8\x3\x2\x2\x2\xF8\xFA\x3"+
		"\x2\x2\x2\xF9\xF7\x3\x2\x2\x2\xFA\xFB\a(\x2\x2\xFB\x1F\x3\x2\x2\x2\xFC"+
		"\xFD\a\x14\x2\x2\xFD\xFE\a-\x2\x2\xFE\xFF\x5:\x1E\x2\xFF\x100\a.\x2\x2"+
		"\x100\x104\a\'\x2\x2\x101\x103\x5\x6\x4\x2\x102\x101\x3\x2\x2\x2\x103"+
		"\x106\x3\x2\x2\x2\x104\x102\x3\x2\x2\x2\x104\x105\x3\x2\x2\x2\x105\x107"+
		"\x3\x2\x2\x2\x106\x104\x3\x2\x2\x2\x107\x10B\a(\x2\x2\x108\x10A\x5\x32"+
		"\x1A\x2\x109\x108\x3\x2\x2\x2\x10A\x10D\x3\x2\x2\x2\x10B\x109\x3\x2\x2"+
		"\x2\x10B\x10C\x3\x2\x2\x2\x10C\x10F\x3\x2\x2\x2\x10D\x10B\x3\x2\x2\x2"+
		"\x10E\x110\x5\x34\x1B\x2\x10F\x10E\x3\x2\x2\x2\x10F\x110\x3\x2\x2\x2\x110"+
		"!\x3\x2\x2\x2\x111\x112\a\x1F\x2\x2\x112\x114\x5> \x2\x113\x115\x5@!\x2"+
		"\x114\x113\x3\x2\x2\x2\x114\x115\x3\x2\x2\x2\x115#\x3\x2\x2\x2\x116\x117"+
		"\a\x19\x2\x2\x117\x118\a\x44\x2\x2\x118\x11C\a\'\x2\x2\x119\x11B\x5\x6"+
		"\x4\x2\x11A\x119\x3\x2\x2\x2\x11B\x11E\x3\x2\x2\x2\x11C\x11A\x3\x2\x2"+
		"\x2\x11C\x11D\x3\x2\x2\x2\x11D\x11F\x3\x2\x2\x2\x11E\x11C\x3\x2\x2\x2"+
		"\x11F\x120\a(\x2\x2\x120%\x3\x2\x2\x2\x121\x122\a\x1D\x2\x2\x122\x125"+
		"\x5> \x2\x123\x124\a\x17\x2\x2\x124\x126\a\x44\x2\x2\x125\x123\x3\x2\x2"+
		"\x2\x125\x126\x3\x2\x2\x2\x126\'\x3\x2\x2\x2\x127\x128\a\f\x2\x2\x128"+
		"\x129\x5> \x2\x129\x12C\a\x16\x2\x2\x12A\x12D\a\x44\x2\x2\x12B\x12D\x5"+
		"P)\x2\x12C\x12A\x3\x2\x2\x2\x12C\x12B\x3\x2\x2\x2\x12D\x130\x3\x2\x2\x2"+
		"\x12E\x12F\a\xF\x2\x2\x12F\x131\x5> \x2\x130\x12E\x3\x2\x2\x2\x130\x131"+
		"\x3\x2\x2\x2\x131)\x3\x2\x2\x2\x132\x133\a\x10\x2\x2\x133\x134\x5> \x2"+
		"\x134\x137\t\x3\x2\x2\x135\x138\a\x44\x2\x2\x136\x138\x5P)\x2\x137\x135"+
		"\x3\x2\x2\x2\x137\x136\x3\x2\x2\x2\x138+\x3\x2\x2\x2\x139\x13A\a\"\x2"+
		"\x2\x13A\x13B\a\'\x2\x2\x13B\x13C\x5\x4\x3\x2\x13C\x13D\a(\x2\x2\x13D"+
		"\x13E\a#\x2\x2\x13E\x13F\a-\x2\x2\x13F\x140\a\x44\x2\x2\x140\x141\a.\x2"+
		"\x2\x141\x142\a\'\x2\x2\x142\x143\x5\x4\x3\x2\x143\x144\a(\x2\x2\x144"+
		"-\x3\x2\x2\x2\x145\x146\a\r\x2\x2\x146/\x3\x2\x2\x2\x147\x148\a\xE\x2"+
		"\x2\x148\x31\x3\x2\x2\x2\x149\x14A\a\x1C\x2\x2\x14A\x14B\a\x14\x2\x2\x14B"+
		"\x14C\a-\x2\x2\x14C\x14D\x5:\x1E\x2\x14D\x14E\a.\x2\x2\x14E\x152\a\'\x2"+
		"\x2\x14F\x151\x5\x6\x4\x2\x150\x14F\x3\x2\x2\x2\x151\x154\x3\x2\x2\x2"+
		"\x152\x150\x3\x2\x2\x2\x152\x153\x3\x2\x2\x2\x153\x155\x3\x2\x2\x2\x154"+
		"\x152\x3\x2\x2\x2\x155\x156\a(\x2\x2\x156\x33\x3\x2\x2\x2\x157\x158\a"+
		"\x1C\x2\x2\x158\x15C\a\'\x2\x2\x159\x15B\x5\x6\x4\x2\x15A\x159\x3\x2\x2"+
		"\x2\x15B\x15E\x3\x2\x2\x2\x15C\x15A\x3\x2\x2\x2\x15C\x15D\x3\x2\x2\x2"+
		"\x15D\x15F\x3\x2\x2\x2\x15E\x15C\x3\x2\x2\x2\x15F\x160\a(\x2\x2\x160\x35"+
		"\x3\x2\x2\x2\x161\x162\x5> \x2\x162\x163\a&\x2\x2\x163\x165\x3\x2\x2\x2"+
		"\x164\x161\x3\x2\x2\x2\x165\x168\x3\x2\x2\x2\x166\x164\x3\x2\x2\x2\x166"+
		"\x167\x3\x2\x2\x2\x167\x169\x3\x2\x2\x2\x168\x166\x3\x2\x2\x2\x169\x16A"+
		"\x5> \x2\x16A\x37\x3\x2\x2\x2\x16B\x16C\a\x44\x2\x2\x16C\x16E\a&\x2\x2"+
		"\x16D\x16B\x3\x2\x2\x2\x16E\x171\x3\x2\x2\x2\x16F\x16D\x3\x2\x2\x2\x16F"+
		"\x170\x3\x2\x2\x2\x170\x172\x3\x2\x2\x2\x171\x16F\x3\x2\x2\x2\x172\x173"+
		"\a\x44\x2\x2\x173\x39\x3\x2\x2\x2\x174\x175\b\x1E\x1\x2\x175\x176\a-\x2"+
		"\x2\x176\x177\x5:\x1E\x2\x177\x178\a.\x2\x2\x178\x17D\x3\x2\x2\x2\x179"+
		"\x17A\a+\x2\x2\x17A\x17D\x5:\x1E\x4\x17B\x17D\x5<\x1F\x2\x17C\x174\x3"+
		"\x2\x2\x2\x17C\x179\x3\x2\x2\x2\x17C\x17B\x3\x2\x2\x2\x17D\x186\x3\x2"+
		"\x2\x2\x17E\x17F\f\a\x2\x2\x17F\x180\a<\x2\x2\x180\x185\x5<\x1F\x2\x181"+
		"\x182\f\x6\x2\x2\x182\x183\a=\x2\x2\x183\x185\x5<\x1F\x2\x184\x17E\x3"+
		"\x2\x2\x2\x184\x181\x3\x2\x2\x2\x185\x188\x3\x2\x2\x2\x186\x184\x3\x2"+
		"\x2\x2\x186\x187\x3\x2\x2\x2\x187;\x3\x2\x2\x2\x188\x186\x3\x2\x2\x2\x189"+
		"\x18A\x5> \x2\x18A\x18B\a@\x2\x2\x18B\x18C\x5> \x2\x18C\x1A3\x3\x2\x2"+
		"\x2\x18D\x18E\x5> \x2\x18E\x18F\a\x41\x2\x2\x18F\x190\x5> \x2\x190\x1A3"+
		"\x3\x2\x2\x2\x191\x192\x5> \x2\x192\x193\a\x42\x2\x2\x193\x194\x5> \x2"+
		"\x194\x1A3\x3\x2\x2\x2\x195\x196\x5> \x2\x196\x197\a\x43\x2\x2\x197\x198"+
		"\x5> \x2\x198\x1A3\x3\x2\x2\x2\x199\x19A\x5> \x2\x19A\x19B\a?\x2\x2\x19B"+
		"\x19C\x5> \x2\x19C\x1A3\x3\x2\x2\x2\x19D\x19E\x5> \x2\x19E\x19F\a>\x2"+
		"\x2\x19F\x1A0\x5> \x2\x1A0\x1A3\x3\x2\x2\x2\x1A1\x1A3\x5> \x2\x1A2\x189"+
		"\x3\x2\x2\x2\x1A2\x18D\x3\x2\x2\x2\x1A2\x191\x3\x2\x2\x2\x1A2\x195\x3"+
		"\x2\x2\x2\x1A2\x199\x3\x2\x2\x2\x1A2\x19D\x3\x2\x2\x2\x1A2\x1A1\x3\x2"+
		"\x2\x2\x1A3=\x3\x2\x2\x2\x1A4\x1A5\b \x1\x2\x1A5\x1A6\x5\x42\"\x2\x1A6"+
		"\x1AF\x3\x2\x2\x2\x1A7\x1A8\f\x5\x2\x2\x1A8\x1A9\a/\x2\x2\x1A9\x1AE\x5"+
		"\x42\"\x2\x1AA\x1AB\f\x4\x2\x2\x1AB\x1AC\a\x30\x2\x2\x1AC\x1AE\x5\x42"+
		"\"\x2\x1AD\x1A7\x3\x2\x2\x2\x1AD\x1AA\x3\x2\x2\x2\x1AE\x1B1\x3\x2\x2\x2"+
		"\x1AF\x1AD\x3\x2\x2\x2\x1AF\x1B0\x3\x2\x2\x2\x1B0?\x3\x2\x2\x2\x1B1\x1AF"+
		"\x3\x2\x2\x2\x1B2\x1B3\a\x16\x2\x2\x1B3\x1B4\x5> \x2\x1B4\x1B5\a\x1A\x2"+
		"\x2\x1B5\x41\x3\x2\x2\x2\x1B6\x1B7\b\"\x1\x2\x1B7\x1B8\x5\x44#\x2\x1B8"+
		"\x1C4\x3\x2\x2\x2\x1B9\x1BA\f\x6\x2\x2\x1BA\x1BB\a\x31\x2\x2\x1BB\x1C3"+
		"\x5\x44#\x2\x1BC\x1BD\f\x5\x2\x2\x1BD\x1BE\a\x32\x2\x2\x1BE\x1C3\x5\x44"+
		"#\x2\x1BF\x1C0\f\x4\x2\x2\x1C0\x1C1\a\x34\x2\x2\x1C1\x1C3\x5\x44#\x2\x1C2"+
		"\x1B9\x3\x2\x2\x2\x1C2\x1BC\x3\x2\x2\x2\x1C2\x1BF\x3\x2\x2\x2\x1C3\x1C6"+
		"\x3\x2\x2\x2\x1C4\x1C2\x3\x2\x2\x2\x1C4\x1C5\x3\x2\x2\x2\x1C5\x43\x3\x2"+
		"\x2\x2\x1C6\x1C4\x3\x2\x2\x2\x1C7\x1C8\b#\x1\x2\x1C8\x1C9\x5\x46$\x2\x1C9"+
		"\x1CF\x3\x2\x2\x2\x1CA\x1CB\f\x4\x2\x2\x1CB\x1CC\a\x33\x2\x2\x1CC\x1CE"+
		"\x5\x46$\x2\x1CD\x1CA\x3\x2\x2\x2\x1CE\x1D1\x3\x2\x2\x2\x1CF\x1CD\x3\x2"+
		"\x2\x2\x1CF\x1D0\x3\x2\x2\x2\x1D0\x45\x3\x2\x2\x2\x1D1\x1CF\x3\x2\x2\x2"+
		"\x1D2\x1D8\x5N(\x2\x1D3\x1D4\a-\x2\x2\x1D4\x1D5\x5> \x2\x1D5\x1D6\a.\x2"+
		"\x2\x1D6\x1D8\x3\x2\x2\x2\x1D7\x1D2\x3\x2\x2\x2\x1D7\x1D3\x3\x2\x2\x2"+
		"\x1D8G\x3\x2\x2\x2\x1D9\x1DA\t\x4\x2\x2\x1DAI\x3\x2\x2\x2\x1DB\x1DC\t"+
		"\x5\x2\x2\x1DCK\x3\x2\x2\x2\x1DD\x1DE\t\x6\x2\x2\x1DEM\x3\x2\x2\x2\x1DF"+
		"\x1EC\x5\x14\v\x2\x1E0\x1EC\x5P)\x2\x1E1\x1EC\a\x44\x2\x2\x1E2\x1EC\a"+
		"\x3\x2\x2\x1E3\x1EC\a\x4\x2\x2\x1E4\x1EC\a\x5\x2\x2\x1E5\x1EC\a\x6\x2"+
		"\x2\x1E6\x1EC\a\a\x2\x2\x1E7\x1EC\a\b\x2\x2\x1E8\x1EC\x5R*\x2\x1E9\x1EC"+
		"\x5T+\x2\x1EA\x1EC\x5V,\x2\x1EB\x1DF\x3\x2\x2\x2\x1EB\x1E0\x3\x2\x2\x2"+
		"\x1EB\x1E1\x3\x2\x2\x2\x1EB\x1E2\x3\x2\x2\x2\x1EB\x1E3\x3\x2\x2\x2\x1EB"+
		"\x1E4\x3\x2\x2\x2\x1EB\x1E5\x3\x2\x2\x2\x1EB\x1E6\x3\x2\x2\x2\x1EB\x1E7"+
		"\x3\x2\x2\x2\x1EB\x1E8\x3\x2\x2\x2\x1EB\x1E9\x3\x2\x2\x2\x1EB\x1EA\x3"+
		"\x2\x2\x2\x1ECO\x3\x2\x2\x2\x1ED\x1EE\a\x44\x2\x2\x1EE\x1F0\a\x35\x2\x2"+
		"\x1EF\x1ED\x3\x2\x2\x2\x1F0\x1F1\x3\x2\x2\x2\x1F1\x1EF\x3\x2\x2\x2\x1F1"+
		"\x1F2\x3\x2\x2\x2\x1F2\x1F3\x3\x2\x2\x2\x1F3\x1F4\a\x44\x2\x2\x1F4Q\x3"+
		"\x2\x2\x2\x1F5\x1FF\a)\x2\x2\x1F6\x1F7\x5N(\x2\x1F7\x1F8\a&\x2\x2\x1F8"+
		"\x1FA\x3\x2\x2\x2\x1F9\x1F6\x3\x2\x2\x2\x1FA\x1FD\x3\x2\x2\x2\x1FB\x1F9"+
		"\x3\x2\x2\x2\x1FB\x1FC\x3\x2\x2\x2\x1FC\x1FE\x3\x2\x2\x2\x1FD\x1FB\x3"+
		"\x2\x2\x2\x1FE\x200\x5N(\x2\x1FF\x1FB\x3\x2\x2\x2\x1FF\x200\x3\x2\x2\x2"+
		"\x200\x201\x3\x2\x2\x2\x201\x202\a*\x2\x2\x202S\x3\x2\x2\x2\x203\x208"+
		"\a\x44\x2\x2\x204\x208\x5P)\x2\x205\x208\x5\x14\v\x2\x206\x208\x5R*\x2"+
		"\x207\x203\x3\x2\x2\x2\x207\x204\x3\x2\x2\x2\x207\x205\x3\x2\x2\x2\x207"+
		"\x206\x3\x2\x2\x2\x208\x209\x3\x2\x2\x2\x209\x20A\a)\x2\x2\x20A\x20B\x5"+
		"\x36\x1C\x2\x20B\x20C\a*\x2\x2\x20CU\x3\x2\x2\x2\x20D\x20E\a\x1B\x2\x2"+
		"\x20E\x210\a\'\x2\x2\x20F\x211\x5X-\x2\x210\x20F\x3\x2\x2\x2\x210\x211"+
		"\x3\x2\x2\x2\x211\x212\x3\x2\x2\x2\x212\x213\a(\x2\x2\x213W\x3\x2\x2\x2"+
		"\x214\x218\x5Z.\x2\x215\x218\x5\\/\x2\x216\x218\x5^\x30\x2\x217\x214\x3"+
		"\x2\x2\x2\x217\x215\x3\x2\x2\x2\x217\x216\x3\x2\x2\x2\x218\x219\x3\x2"+
		"\x2\x2\x219\x217\x3\x2\x2\x2\x219\x21A\x3\x2\x2\x2\x21AY\x3\x2\x2\x2\x21B"+
		"\x21C\a\t\x2\x2\x21C\x21D\a\x44\x2\x2\x21D\x21E\a%\x2\x2\x21E\x21F\x5"+
		"> \x2\x21F\x220\a$\x2\x2\x220[\x3\x2\x2\x2\x221\x222\a\t\x2\x2\x222\x223"+
		"\a\x44\x2\x2\x223\x225\a-\x2\x2\x224\x226\x5\x38\x1D\x2\x225\x224\x3\x2"+
		"\x2\x2\x225\x226\x3\x2\x2\x2\x226\x227\x3\x2\x2\x2\x227\x228\a.\x2\x2"+
		"\x228\x229\a%\x2\x2\x229\x22D\a\'\x2\x2\x22A\x22C\x5\x6\x4\x2\x22B\x22A"+
		"\x3\x2\x2\x2\x22C\x22F\x3\x2\x2\x2\x22D\x22B\x3\x2\x2\x2\x22D\x22E\x3"+
		"\x2\x2\x2\x22E\x230\x3\x2\x2\x2\x22F\x22D\x3\x2\x2\x2\x230\x231\a(\x2"+
		"\x2\x231]\x3\x2\x2\x2\x232\x233\x5\x18\r\x2\x233\x234\a$\x2\x2\x234_\x3"+
		"\x2\x2\x2\x36\x66x\x82\x84\x89\x91\x96\x9B\xA3\xAB\xB3\xB9\xBD\xC5\xCD"+
		"\xD9\xE3\xEA\xF7\x104\x10B\x10F\x114\x11C\x125\x12C\x130\x137\x152\x15C"+
		"\x166\x16F\x17C\x184\x186\x1A2\x1AD\x1AF\x1C2\x1C4\x1CF\x1D7\x1EB\x1F1"+
		"\x1FB\x1FF\x207\x210\x217\x219\x225\x22D";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Algo
