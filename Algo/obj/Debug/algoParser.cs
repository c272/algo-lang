//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\Files\Programming\GitHub\algo\Algo\Parsing\algo.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Algo {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class algoParser : Parser {
	public const int
		INTEGER=1, FLOAT=2, BOOLEAN=3, STRING=4, RATIONAL=5, NULL=6, LET_SYM=7, 
		FOR_SYM=8, WHILE_SYM=9, IN_SYM=10, IF_SYM=11, TO_SYM=12, LIB_SYM=13, SIG_FIG_SYM=14, 
		OBJ_SYM=15, ELSE_SYM=16, IMPORT_SYM=17, RETURN_SYM=18, PRINT_SYM=19, DISREGARD_SYM=20, 
		ENDLINE=21, EQUALS=22, COMMA=23, LBRACE=24, RBRACE=25, LSQBR=26, RSQBR=27, 
		LBRACKET=28, RBRACKET=29, ADD_OP=30, TAKE_OP=31, MUL_OP=32, DIV_OP=33, 
		POW_OP=34, POINT=35, ADDFROM_OP=36, TAKEFROM_OP=37, DIVFROM_OP=38, MULFROM_OP=39, 
		BIN_OR=40, BIN_AND=41, BIN_NET=42, BIN_EQUALS=43, GRTR_THAN=44, LESS_THAN=45, 
		GRTR_THAN_ET=46, LESS_THAN_ET=47, IDENTIFIER=48, COMMENT=49, WS=50, UNKNOWN_SYMBOL=51;
	public const int
		RULE_compileUnit = 0, RULE_block = 1, RULE_statement = 2, RULE_stat_define = 3, 
		RULE_stat_setvar = 4, RULE_stat_setvar_op = 5, RULE_stat_deletevar = 6, 
		RULE_stat_functionCall = 7, RULE_stat_functionDef = 8, RULE_stat_return = 9, 
		RULE_stat_forLoop = 10, RULE_stat_whileLoop = 11, RULE_stat_if = 12, RULE_stat_print = 13, 
		RULE_stat_library = 14, RULE_stat_elif = 15, RULE_stat_else = 16, RULE_literal_params = 17, 
		RULE_abstract_params = 18, RULE_check = 19, RULE_checkfrag = 20, RULE_check_operator = 21, 
		RULE_expr = 22, RULE_rounding_expr = 23, RULE_term = 24, RULE_factor = 25, 
		RULE_sub = 26, RULE_operator = 27, RULE_selfmod_op = 28, RULE_value = 29, 
		RULE_obj_access = 30, RULE_array = 31, RULE_array_access = 32, RULE_object = 33, 
		RULE_obj_child_definitions = 34, RULE_obj_vardefine = 35, RULE_obj_funcdefine = 36;
	public static readonly string[] ruleNames = {
		"compileUnit", "block", "statement", "stat_define", "stat_setvar", "stat_setvar_op", 
		"stat_deletevar", "stat_functionCall", "stat_functionDef", "stat_return", 
		"stat_forLoop", "stat_whileLoop", "stat_if", "stat_print", "stat_library", 
		"stat_elif", "stat_else", "literal_params", "abstract_params", "check", 
		"checkfrag", "check_operator", "expr", "rounding_expr", "term", "factor", 
		"sub", "operator", "selfmod_op", "value", "obj_access", "array", "array_access", 
		"object", "obj_child_definitions", "obj_vardefine", "obj_funcdefine"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'null'", "'let'", "'for'", "'while'", 
		"'in'", "'if'", "'to'", "'library'", "'sf'", "'object'", "'else'", "'import'", 
		"'return'", "'print'", "'disregard'", "';'", "'='", "','", "'{'", "'}'", 
		"'['", "']'", "'('", "')'", "'+'", "'-'", "'*'", "'/'", "'^'", "'.'", 
		"'+='", "'-='", "'/='", "'*='", "'|'", "'&'", "'!='", "'=='", "'>'", "'<'", 
		"'>='", "'<='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INTEGER", "FLOAT", "BOOLEAN", "STRING", "RATIONAL", "NULL", "LET_SYM", 
		"FOR_SYM", "WHILE_SYM", "IN_SYM", "IF_SYM", "TO_SYM", "LIB_SYM", "SIG_FIG_SYM", 
		"OBJ_SYM", "ELSE_SYM", "IMPORT_SYM", "RETURN_SYM", "PRINT_SYM", "DISREGARD_SYM", 
		"ENDLINE", "EQUALS", "COMMA", "LBRACE", "RBRACE", "LSQBR", "RSQBR", "LBRACKET", 
		"RBRACKET", "ADD_OP", "TAKE_OP", "MUL_OP", "DIV_OP", "POW_OP", "POINT", 
		"ADDFROM_OP", "TAKEFROM_OP", "DIVFROM_OP", "MULFROM_OP", "BIN_OR", "BIN_AND", 
		"BIN_NET", "BIN_EQUALS", "GRTR_THAN", "LESS_THAN", "GRTR_THAN_ET", "LESS_THAN_ET", 
		"IDENTIFIER", "COMMENT", "WS", "UNKNOWN_SYMBOL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "algo.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public algoParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompileUnitContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(algoParser.Eof, 0); }
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74; block();
			State = 75; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LET_SYM) | (1L << FOR_SYM) | (1L << WHILE_SYM) | (1L << IF_SYM) | (1L << LIB_SYM) | (1L << RETURN_SYM) | (1L << PRINT_SYM) | (1L << DISREGARD_SYM) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 77; statement();
				}
				}
				State = 82;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public ITerminalNode ENDLINE() { return GetToken(algoParser.ENDLINE, 0); }
		public Stat_defineContext stat_define() {
			return GetRuleContext<Stat_defineContext>(0);
		}
		public Stat_functionCallContext stat_functionCall() {
			return GetRuleContext<Stat_functionCallContext>(0);
		}
		public Stat_printContext stat_print() {
			return GetRuleContext<Stat_printContext>(0);
		}
		public Stat_setvarContext stat_setvar() {
			return GetRuleContext<Stat_setvarContext>(0);
		}
		public Stat_setvar_opContext stat_setvar_op() {
			return GetRuleContext<Stat_setvar_opContext>(0);
		}
		public Stat_returnContext stat_return() {
			return GetRuleContext<Stat_returnContext>(0);
		}
		public Stat_deletevarContext stat_deletevar() {
			return GetRuleContext<Stat_deletevarContext>(0);
		}
		public Stat_forLoopContext stat_forLoop() {
			return GetRuleContext<Stat_forLoopContext>(0);
		}
		public Stat_functionDefContext stat_functionDef() {
			return GetRuleContext<Stat_functionDefContext>(0);
		}
		public Stat_ifContext stat_if() {
			return GetRuleContext<Stat_ifContext>(0);
		}
		public Stat_libraryContext stat_library() {
			return GetRuleContext<Stat_libraryContext>(0);
		}
		public Stat_whileLoopContext stat_whileLoop() {
			return GetRuleContext<Stat_whileLoopContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 101;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 90;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
				case 1:
					{
					State = 83; stat_define();
					}
					break;

				case 2:
					{
					State = 84; stat_functionCall();
					}
					break;

				case 3:
					{
					State = 85; stat_print();
					}
					break;

				case 4:
					{
					State = 86; stat_setvar();
					}
					break;

				case 5:
					{
					State = 87; stat_setvar_op();
					}
					break;

				case 6:
					{
					State = 88; stat_return();
					}
					break;

				case 7:
					{
					State = 89; stat_deletevar();
					}
					break;
				}
				State = 92; Match(ENDLINE);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 99;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case FOR_SYM:
					{
					State = 94; stat_forLoop();
					}
					break;
				case LET_SYM:
					{
					State = 95; stat_functionDef();
					}
					break;
				case IF_SYM:
					{
					State = 96; stat_if();
					}
					break;
				case LIB_SYM:
					{
					State = 97; stat_library();
					}
					break;
				case WHILE_SYM:
					{
					State = 98; stat_whileLoop();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_defineContext : ParserRuleContext {
		public ITerminalNode LET_SYM() { return GetToken(algoParser.LET_SYM, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public ITerminalNode EQUALS() { return GetToken(algoParser.EQUALS, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Stat_defineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_define; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_define(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_define(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_define(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_defineContext stat_define() {
		Stat_defineContext _localctx = new Stat_defineContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_stat_define);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103; Match(LET_SYM);
			State = 104; Match(IDENTIFIER);
			State = 105; Match(EQUALS);
			State = 106; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_setvarContext : ParserRuleContext {
		public ITerminalNode EQUALS() { return GetToken(algoParser.EQUALS, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public Obj_accessContext obj_access() {
			return GetRuleContext<Obj_accessContext>(0);
		}
		public Rounding_exprContext rounding_expr() {
			return GetRuleContext<Rounding_exprContext>(0);
		}
		public Stat_setvarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_setvar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_setvar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_setvar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_setvar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_setvarContext stat_setvar() {
		Stat_setvarContext _localctx = new Stat_setvarContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_stat_setvar);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				{
				State = 108; Match(IDENTIFIER);
				}
				break;

			case 2:
				{
				State = 109; obj_access();
				}
				break;
			}
			State = 112; Match(EQUALS);
			State = 113; expr(0);
			State = 115;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==TO_SYM) {
				{
				State = 114; rounding_expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_setvar_opContext : ParserRuleContext {
		public Selfmod_opContext selfmod_op() {
			return GetRuleContext<Selfmod_opContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public Obj_accessContext obj_access() {
			return GetRuleContext<Obj_accessContext>(0);
		}
		public Stat_setvar_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_setvar_op; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_setvar_op(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_setvar_op(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_setvar_op(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_setvar_opContext stat_setvar_op() {
		Stat_setvar_opContext _localctx = new Stat_setvar_opContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_stat_setvar_op);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				{
				State = 117; Match(IDENTIFIER);
				}
				break;

			case 2:
				{
				State = 118; obj_access();
				}
				break;
			}
			State = 121; selfmod_op();
			State = 122; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_deletevarContext : ParserRuleContext {
		public ITerminalNode DISREGARD_SYM() { return GetToken(algoParser.DISREGARD_SYM, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public Obj_accessContext obj_access() {
			return GetRuleContext<Obj_accessContext>(0);
		}
		public ITerminalNode MUL_OP() { return GetToken(algoParser.MUL_OP, 0); }
		public Stat_deletevarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_deletevar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_deletevar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_deletevar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_deletevar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_deletevarContext stat_deletevar() {
		Stat_deletevarContext _localctx = new Stat_deletevarContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_stat_deletevar);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124; Match(DISREGARD_SYM);
			State = 128;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				{
				State = 125; Match(IDENTIFIER);
				}
				break;

			case 2:
				{
				State = 126; obj_access();
				}
				break;

			case 3:
				{
				State = 127; Match(MUL_OP);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_functionCallContext : ParserRuleContext {
		public ITerminalNode LBRACKET() { return GetToken(algoParser.LBRACKET, 0); }
		public ITerminalNode RBRACKET() { return GetToken(algoParser.RBRACKET, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public Obj_accessContext obj_access() {
			return GetRuleContext<Obj_accessContext>(0);
		}
		public Literal_paramsContext literal_params() {
			return GetRuleContext<Literal_paramsContext>(0);
		}
		public Stat_functionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_functionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_functionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_functionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_functionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_functionCallContext stat_functionCall() {
		Stat_functionCallContext _localctx = new Stat_functionCallContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_stat_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				{
				State = 130; Match(IDENTIFIER);
				}
				break;

			case 2:
				{
				State = 131; obj_access();
				}
				break;
			}
			State = 134; Match(LBRACKET);
			State = 136;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTEGER) | (1L << FLOAT) | (1L << BOOLEAN) | (1L << STRING) | (1L << RATIONAL) | (1L << NULL) | (1L << OBJ_SYM) | (1L << LSQBR) | (1L << LBRACKET) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 135; literal_params();
				}
			}

			State = 138; Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_functionDefContext : ParserRuleContext {
		public ITerminalNode LET_SYM() { return GetToken(algoParser.LET_SYM, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public ITerminalNode LBRACKET() { return GetToken(algoParser.LBRACKET, 0); }
		public ITerminalNode RBRACKET() { return GetToken(algoParser.RBRACKET, 0); }
		public ITerminalNode EQUALS() { return GetToken(algoParser.EQUALS, 0); }
		public ITerminalNode LBRACE() { return GetToken(algoParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(algoParser.RBRACE, 0); }
		public Abstract_paramsContext abstract_params() {
			return GetRuleContext<Abstract_paramsContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Stat_functionDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_functionDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_functionDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_functionDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_functionDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_functionDefContext stat_functionDef() {
		Stat_functionDefContext _localctx = new Stat_functionDefContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_stat_functionDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140; Match(LET_SYM);
			State = 141; Match(IDENTIFIER);
			State = 142; Match(LBRACKET);
			State = 144;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IDENTIFIER) {
				{
				State = 143; abstract_params();
				}
			}

			State = 146; Match(RBRACKET);
			State = 147; Match(EQUALS);
			State = 148; Match(LBRACE);
			State = 152;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LET_SYM) | (1L << FOR_SYM) | (1L << WHILE_SYM) | (1L << IF_SYM) | (1L << LIB_SYM) | (1L << RETURN_SYM) | (1L << PRINT_SYM) | (1L << DISREGARD_SYM) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 149; statement();
				}
				}
				State = 154;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 155; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_returnContext : ParserRuleContext {
		public ITerminalNode RETURN_SYM() { return GetToken(algoParser.RETURN_SYM, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Stat_returnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_return; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_return(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_return(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_return(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_returnContext stat_return() {
		Stat_returnContext _localctx = new Stat_returnContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_stat_return);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157; Match(RETURN_SYM);
			State = 158; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_forLoopContext : ParserRuleContext {
		public ITerminalNode FOR_SYM() { return GetToken(algoParser.FOR_SYM, 0); }
		public ITerminalNode LBRACKET() { return GetToken(algoParser.LBRACKET, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public ITerminalNode IN_SYM() { return GetToken(algoParser.IN_SYM, 0); }
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ITerminalNode RBRACKET() { return GetToken(algoParser.RBRACKET, 0); }
		public ITerminalNode LBRACE() { return GetToken(algoParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(algoParser.RBRACE, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Stat_forLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_forLoop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_forLoop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_forLoop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_forLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_forLoopContext stat_forLoop() {
		Stat_forLoopContext _localctx = new Stat_forLoopContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_stat_forLoop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160; Match(FOR_SYM);
			State = 161; Match(LBRACKET);
			State = 162; Match(IDENTIFIER);
			State = 163; Match(IN_SYM);
			State = 164; value();
			State = 165; Match(RBRACKET);
			State = 166; Match(LBRACE);
			State = 170;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LET_SYM) | (1L << FOR_SYM) | (1L << WHILE_SYM) | (1L << IF_SYM) | (1L << LIB_SYM) | (1L << RETURN_SYM) | (1L << PRINT_SYM) | (1L << DISREGARD_SYM) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 167; statement();
				}
				}
				State = 172;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 173; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_whileLoopContext : ParserRuleContext {
		public ITerminalNode WHILE_SYM() { return GetToken(algoParser.WHILE_SYM, 0); }
		public ITerminalNode LBRACKET() { return GetToken(algoParser.LBRACKET, 0); }
		public CheckContext check() {
			return GetRuleContext<CheckContext>(0);
		}
		public ITerminalNode RBRACKET() { return GetToken(algoParser.RBRACKET, 0); }
		public ITerminalNode LBRACE() { return GetToken(algoParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(algoParser.RBRACE, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Stat_whileLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_whileLoop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_whileLoop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_whileLoop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_whileLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_whileLoopContext stat_whileLoop() {
		Stat_whileLoopContext _localctx = new Stat_whileLoopContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_stat_whileLoop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175; Match(WHILE_SYM);
			State = 176; Match(LBRACKET);
			State = 177; check(0);
			State = 178; Match(RBRACKET);
			State = 179; Match(LBRACE);
			State = 183;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LET_SYM) | (1L << FOR_SYM) | (1L << WHILE_SYM) | (1L << IF_SYM) | (1L << LIB_SYM) | (1L << RETURN_SYM) | (1L << PRINT_SYM) | (1L << DISREGARD_SYM) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 180; statement();
				}
				}
				State = 185;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 186; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_ifContext : ParserRuleContext {
		public ITerminalNode IF_SYM() { return GetToken(algoParser.IF_SYM, 0); }
		public ITerminalNode LBRACKET() { return GetToken(algoParser.LBRACKET, 0); }
		public CheckContext check() {
			return GetRuleContext<CheckContext>(0);
		}
		public ITerminalNode RBRACKET() { return GetToken(algoParser.RBRACKET, 0); }
		public ITerminalNode LBRACE() { return GetToken(algoParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(algoParser.RBRACE, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Stat_elifContext[] stat_elif() {
			return GetRuleContexts<Stat_elifContext>();
		}
		public Stat_elifContext stat_elif(int i) {
			return GetRuleContext<Stat_elifContext>(i);
		}
		public Stat_elseContext stat_else() {
			return GetRuleContext<Stat_elseContext>(0);
		}
		public Stat_ifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_if; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_if(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_if(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_if(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_ifContext stat_if() {
		Stat_ifContext _localctx = new Stat_ifContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_stat_if);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 188; Match(IF_SYM);
			State = 189; Match(LBRACKET);
			State = 190; check(0);
			State = 191; Match(RBRACKET);
			State = 192; Match(LBRACE);
			State = 196;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LET_SYM) | (1L << FOR_SYM) | (1L << WHILE_SYM) | (1L << IF_SYM) | (1L << LIB_SYM) | (1L << RETURN_SYM) | (1L << PRINT_SYM) | (1L << DISREGARD_SYM) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 193; statement();
				}
				}
				State = 198;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 199; Match(RBRACE);
			State = 203;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,15,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 200; stat_elif();
					}
					} 
				}
				State = 205;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,15,_ctx);
			}
			State = 207;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ELSE_SYM) {
				{
				State = 206; stat_else();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_printContext : ParserRuleContext {
		public ITerminalNode PRINT_SYM() { return GetToken(algoParser.PRINT_SYM, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Rounding_exprContext rounding_expr() {
			return GetRuleContext<Rounding_exprContext>(0);
		}
		public Stat_printContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_print; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_print(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_print(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_print(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_printContext stat_print() {
		Stat_printContext _localctx = new Stat_printContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_stat_print);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209; Match(PRINT_SYM);
			State = 210; expr(0);
			State = 212;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==TO_SYM) {
				{
				State = 211; rounding_expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_libraryContext : ParserRuleContext {
		public ITerminalNode LIB_SYM() { return GetToken(algoParser.LIB_SYM, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public ITerminalNode LBRACE() { return GetToken(algoParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(algoParser.RBRACE, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Stat_libraryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_library; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_library(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_library(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_library(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_libraryContext stat_library() {
		Stat_libraryContext _localctx = new Stat_libraryContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_stat_library);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214; Match(LIB_SYM);
			State = 215; Match(IDENTIFIER);
			State = 216; Match(LBRACE);
			State = 220;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LET_SYM) | (1L << FOR_SYM) | (1L << WHILE_SYM) | (1L << IF_SYM) | (1L << LIB_SYM) | (1L << RETURN_SYM) | (1L << PRINT_SYM) | (1L << DISREGARD_SYM) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 217; statement();
				}
				}
				State = 222;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 223; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_elifContext : ParserRuleContext {
		public ITerminalNode ELSE_SYM() { return GetToken(algoParser.ELSE_SYM, 0); }
		public ITerminalNode IF_SYM() { return GetToken(algoParser.IF_SYM, 0); }
		public ITerminalNode LBRACKET() { return GetToken(algoParser.LBRACKET, 0); }
		public CheckContext check() {
			return GetRuleContext<CheckContext>(0);
		}
		public ITerminalNode RBRACKET() { return GetToken(algoParser.RBRACKET, 0); }
		public ITerminalNode LBRACE() { return GetToken(algoParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(algoParser.RBRACE, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Stat_elifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_elif; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_elif(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_elif(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_elif(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_elifContext stat_elif() {
		Stat_elifContext _localctx = new Stat_elifContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_stat_elif);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225; Match(ELSE_SYM);
			State = 226; Match(IF_SYM);
			State = 227; Match(LBRACKET);
			State = 228; check(0);
			State = 229; Match(RBRACKET);
			State = 230; Match(LBRACE);
			State = 234;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LET_SYM) | (1L << FOR_SYM) | (1L << WHILE_SYM) | (1L << IF_SYM) | (1L << LIB_SYM) | (1L << RETURN_SYM) | (1L << PRINT_SYM) | (1L << DISREGARD_SYM) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 231; statement();
				}
				}
				State = 236;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 237; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_elseContext : ParserRuleContext {
		public ITerminalNode ELSE_SYM() { return GetToken(algoParser.ELSE_SYM, 0); }
		public ITerminalNode LBRACE() { return GetToken(algoParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(algoParser.RBRACE, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Stat_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_else; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterStat_else(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitStat_else(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_else(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_elseContext stat_else() {
		Stat_elseContext _localctx = new Stat_elseContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_stat_else);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239; Match(ELSE_SYM);
			State = 240; Match(LBRACE);
			State = 244;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LET_SYM) | (1L << FOR_SYM) | (1L << WHILE_SYM) | (1L << IF_SYM) | (1L << LIB_SYM) | (1L << RETURN_SYM) | (1L << PRINT_SYM) | (1L << DISREGARD_SYM) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 241; statement();
				}
				}
				State = 246;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 247; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Literal_paramsContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(algoParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(algoParser.COMMA, i);
		}
		public Literal_paramsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_params; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterLiteral_params(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitLiteral_params(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral_params(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Literal_paramsContext literal_params() {
		Literal_paramsContext _localctx = new Literal_paramsContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_literal_params);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 254;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,21,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 249; expr(0);
					State = 250; Match(COMMA);
					}
					} 
				}
				State = 256;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,21,_ctx);
			}
			State = 257; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Abstract_paramsContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(algoParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(algoParser.IDENTIFIER, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(algoParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(algoParser.COMMA, i);
		}
		public Abstract_paramsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstract_params; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterAbstract_params(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitAbstract_params(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbstract_params(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Abstract_paramsContext abstract_params() {
		Abstract_paramsContext _localctx = new Abstract_paramsContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_abstract_params);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 263;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,22,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 259; Match(IDENTIFIER);
					State = 260; Match(COMMA);
					}
					} 
				}
				State = 265;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,22,_ctx);
			}
			State = 266; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CheckContext : ParserRuleContext {
		public CheckContext check() {
			return GetRuleContext<CheckContext>(0);
		}
		public ITerminalNode BIN_OR() { return GetToken(algoParser.BIN_OR, 0); }
		public CheckfragContext checkfrag() {
			return GetRuleContext<CheckfragContext>(0);
		}
		public ITerminalNode BIN_AND() { return GetToken(algoParser.BIN_AND, 0); }
		public ITerminalNode BIN_EQUALS() { return GetToken(algoParser.BIN_EQUALS, 0); }
		public ITerminalNode BIN_NET() { return GetToken(algoParser.BIN_NET, 0); }
		public ITerminalNode LBRACKET() { return GetToken(algoParser.LBRACKET, 0); }
		public ITerminalNode RBRACKET() { return GetToken(algoParser.RBRACKET, 0); }
		public CheckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_check; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterCheck(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitCheck(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheck(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CheckContext check() {
		return check(0);
	}

	private CheckContext check(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		CheckContext _localctx = new CheckContext(_ctx, _parentState);
		CheckContext _prevctx = _localctx;
		int _startState = 38;
		EnterRecursionRule(_localctx, 38, RULE_check, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 274;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,23,_ctx) ) {
			case 1:
				{
				State = 269; Match(LBRACKET);
				State = 270; check(0);
				State = 271; Match(RBRACKET);
				}
				break;

			case 2:
				{
				State = 273; checkfrag();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 290;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,25,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 288;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,24,_ctx) ) {
					case 1:
						{
						_localctx = new CheckContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_check);
						State = 276;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 277; Match(BIN_OR);
						State = 278; checkfrag();
						}
						break;

					case 2:
						{
						_localctx = new CheckContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_check);
						State = 279;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 280; Match(BIN_AND);
						State = 281; checkfrag();
						}
						break;

					case 3:
						{
						_localctx = new CheckContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_check);
						State = 282;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 283; Match(BIN_EQUALS);
						State = 284; checkfrag();
						}
						break;

					case 4:
						{
						_localctx = new CheckContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_check);
						State = 285;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 286; Match(BIN_NET);
						State = 287; checkfrag();
						}
						break;
					}
					} 
				}
				State = 292;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,25,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CheckfragContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode GRTR_THAN() { return GetToken(algoParser.GRTR_THAN, 0); }
		public ITerminalNode LESS_THAN() { return GetToken(algoParser.LESS_THAN, 0); }
		public ITerminalNode GRTR_THAN_ET() { return GetToken(algoParser.GRTR_THAN_ET, 0); }
		public ITerminalNode LESS_THAN_ET() { return GetToken(algoParser.LESS_THAN_ET, 0); }
		public CheckfragContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checkfrag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterCheckfrag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitCheckfrag(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheckfrag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CheckfragContext checkfrag() {
		CheckfragContext _localctx = new CheckfragContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_checkfrag);
		try {
			State = 310;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,26,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 293; expr(0);
				State = 294; Match(GRTR_THAN);
				State = 295; expr(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 297; expr(0);
				State = 298; Match(LESS_THAN);
				State = 299; expr(0);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 301; expr(0);
				State = 302; Match(GRTR_THAN_ET);
				State = 303; expr(0);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 305; expr(0);
				State = 306; Match(LESS_THAN_ET);
				State = 307; expr(0);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 309; expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Check_operatorContext : ParserRuleContext {
		public ITerminalNode BIN_OR() { return GetToken(algoParser.BIN_OR, 0); }
		public ITerminalNode BIN_AND() { return GetToken(algoParser.BIN_AND, 0); }
		public ITerminalNode GRTR_THAN() { return GetToken(algoParser.GRTR_THAN, 0); }
		public ITerminalNode LESS_THAN() { return GetToken(algoParser.LESS_THAN, 0); }
		public ITerminalNode GRTR_THAN_ET() { return GetToken(algoParser.GRTR_THAN_ET, 0); }
		public ITerminalNode LESS_THAN_ET() { return GetToken(algoParser.LESS_THAN_ET, 0); }
		public ITerminalNode BIN_EQUALS() { return GetToken(algoParser.BIN_EQUALS, 0); }
		public Check_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_check_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterCheck_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitCheck_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheck_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Check_operatorContext check_operator() {
		Check_operatorContext _localctx = new Check_operatorContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_check_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 312;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BIN_OR) | (1L << BIN_AND) | (1L << BIN_EQUALS) | (1L << GRTR_THAN) | (1L << LESS_THAN) | (1L << GRTR_THAN_ET) | (1L << LESS_THAN_ET))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode ADD_OP() { return GetToken(algoParser.ADD_OP, 0); }
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ITerminalNode TAKE_OP() { return GetToken(algoParser.TAKE_OP, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 44;
		EnterRecursionRule(_localctx, 44, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 315; term(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 325;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,28,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 323;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,27,_ctx) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 317;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 318; Match(ADD_OP);
						State = 319; term(0);
						}
						break;

					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 320;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 321; Match(TAKE_OP);
						State = 322; term(0);
						}
						break;
					}
					} 
				}
				State = 327;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,28,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Rounding_exprContext : ParserRuleContext {
		public ITerminalNode TO_SYM() { return GetToken(algoParser.TO_SYM, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode SIG_FIG_SYM() { return GetToken(algoParser.SIG_FIG_SYM, 0); }
		public Rounding_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rounding_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterRounding_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitRounding_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRounding_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rounding_exprContext rounding_expr() {
		Rounding_exprContext _localctx = new Rounding_exprContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_rounding_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 328; Match(TO_SYM);
			State = 329; expr(0);
			State = 330; Match(SIG_FIG_SYM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ITerminalNode MUL_OP() { return GetToken(algoParser.MUL_OP, 0); }
		public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public ITerminalNode DIV_OP() { return GetToken(algoParser.DIV_OP, 0); }
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		return term(0);
	}

	private TermContext term(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		TermContext _localctx = new TermContext(_ctx, _parentState);
		TermContext _prevctx = _localctx;
		int _startState = 48;
		EnterRecursionRule(_localctx, 48, RULE_term, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 333; factor(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 343;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,30,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 341;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,29,_ctx) ) {
					case 1:
						{
						_localctx = new TermContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_term);
						State = 335;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 336; Match(MUL_OP);
						State = 337; factor(0);
						}
						break;

					case 2:
						{
						_localctx = new TermContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_term);
						State = 338;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 339; Match(DIV_OP);
						State = 340; factor(0);
						}
						break;
					}
					} 
				}
				State = 345;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,30,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public ITerminalNode POW_OP() { return GetToken(algoParser.POW_OP, 0); }
		public SubContext sub() {
			return GetRuleContext<SubContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		return factor(0);
	}

	private FactorContext factor(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		FactorContext _localctx = new FactorContext(_ctx, _parentState);
		FactorContext _prevctx = _localctx;
		int _startState = 50;
		EnterRecursionRule(_localctx, 50, RULE_factor, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 347; sub();
			}
			_ctx.stop = _input.Lt(-1);
			State = 354;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,31,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new FactorContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_factor);
					State = 349;
					if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
					State = 350; Match(POW_OP);
					State = 351; sub();
					}
					} 
				}
				State = 356;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,31,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SubContext : ParserRuleContext {
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ITerminalNode LBRACKET() { return GetToken(algoParser.LBRACKET, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RBRACKET() { return GetToken(algoParser.RBRACKET, 0); }
		public SubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sub; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterSub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitSub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubContext sub() {
		SubContext _localctx = new SubContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_sub);
		try {
			State = 362;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case INTEGER:
			case FLOAT:
			case BOOLEAN:
			case STRING:
			case RATIONAL:
			case NULL:
			case OBJ_SYM:
			case LSQBR:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 357; value();
				}
				break;
			case LBRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 358; Match(LBRACKET);
				State = 359; expr(0);
				State = 360; Match(RBRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		public ITerminalNode MUL_OP() { return GetToken(algoParser.MUL_OP, 0); }
		public ITerminalNode DIV_OP() { return GetToken(algoParser.DIV_OP, 0); }
		public ITerminalNode TAKE_OP() { return GetToken(algoParser.TAKE_OP, 0); }
		public ITerminalNode ADD_OP() { return GetToken(algoParser.ADD_OP, 0); }
		public ITerminalNode POW_OP() { return GetToken(algoParser.POW_OP, 0); }
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 364;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD_OP) | (1L << TAKE_OP) | (1L << MUL_OP) | (1L << DIV_OP) | (1L << POW_OP))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Selfmod_opContext : ParserRuleContext {
		public ITerminalNode ADDFROM_OP() { return GetToken(algoParser.ADDFROM_OP, 0); }
		public ITerminalNode TAKEFROM_OP() { return GetToken(algoParser.TAKEFROM_OP, 0); }
		public ITerminalNode MULFROM_OP() { return GetToken(algoParser.MULFROM_OP, 0); }
		public ITerminalNode DIVFROM_OP() { return GetToken(algoParser.DIVFROM_OP, 0); }
		public Selfmod_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selfmod_op; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterSelfmod_op(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitSelfmod_op(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelfmod_op(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Selfmod_opContext selfmod_op() {
		Selfmod_opContext _localctx = new Selfmod_opContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_selfmod_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 366;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADDFROM_OP) | (1L << TAKEFROM_OP) | (1L << DIVFROM_OP) | (1L << MULFROM_OP))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public Stat_functionCallContext stat_functionCall() {
			return GetRuleContext<Stat_functionCallContext>(0);
		}
		public Obj_accessContext obj_access() {
			return GetRuleContext<Obj_accessContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public ITerminalNode INTEGER() { return GetToken(algoParser.INTEGER, 0); }
		public ITerminalNode FLOAT() { return GetToken(algoParser.FLOAT, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(algoParser.BOOLEAN, 0); }
		public ITerminalNode STRING() { return GetToken(algoParser.STRING, 0); }
		public ITerminalNode RATIONAL() { return GetToken(algoParser.RATIONAL, 0); }
		public ITerminalNode NULL() { return GetToken(algoParser.NULL, 0); }
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public Array_accessContext array_access() {
			return GetRuleContext<Array_accessContext>(0);
		}
		public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_value);
		try {
			State = 380;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,33,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 368; stat_functionCall();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 369; obj_access();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 370; Match(IDENTIFIER);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 371; Match(INTEGER);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 372; Match(FLOAT);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 373; Match(BOOLEAN);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 374; Match(STRING);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 375; Match(RATIONAL);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 376; Match(NULL);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 377; array();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 378; array_access();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 379; @object();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Obj_accessContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(algoParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(algoParser.IDENTIFIER, i);
		}
		public ITerminalNode[] POINT() { return GetTokens(algoParser.POINT); }
		public ITerminalNode POINT(int i) {
			return GetToken(algoParser.POINT, i);
		}
		public Obj_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obj_access; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterObj_access(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitObj_access(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObj_access(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Obj_accessContext obj_access() {
		Obj_accessContext _localctx = new Obj_accessContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_obj_access);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 384;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 382; Match(IDENTIFIER);
					State = 383; Match(POINT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 386;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,34,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 388; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterArray(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitArray(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_array);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 390; Match(LSQBR);
			State = 400;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTEGER) | (1L << FLOAT) | (1L << BOOLEAN) | (1L << STRING) | (1L << RATIONAL) | (1L << NULL) | (1L << OBJ_SYM) | (1L << LSQBR) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 396;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,35,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 391; value();
						State = 392; Match(COMMA);
						}
						} 
					}
					State = 398;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,35,_ctx);
				}
				State = 399; value();
				}
			}

			State = 402; Match(RSQBR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_accessContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public Literal_paramsContext literal_params() {
			return GetRuleContext<Literal_paramsContext>(0);
		}
		public Array_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_access; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterArray_access(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitArray_access(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_access(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_accessContext array_access() {
		Array_accessContext _localctx = new Array_accessContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_array_access);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 404; Match(IDENTIFIER);
			State = 405; Match(LSQBR);
			State = 406; literal_params();
			State = 407; Match(RSQBR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectContext : ParserRuleContext {
		public ITerminalNode OBJ_SYM() { return GetToken(algoParser.OBJ_SYM, 0); }
		public ITerminalNode LBRACE() { return GetToken(algoParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(algoParser.RBRACE, 0); }
		public Obj_child_definitionsContext obj_child_definitions() {
			return GetRuleContext<Obj_child_definitionsContext>(0);
		}
		public ObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterObject(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitObject(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectContext @object() {
		ObjectContext _localctx = new ObjectContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_object);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 409; Match(OBJ_SYM);
			State = 410; Match(LBRACE);
			State = 412;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LET_SYM) {
				{
				State = 411; obj_child_definitions();
				}
			}

			State = 414; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Obj_child_definitionsContext : ParserRuleContext {
		public Obj_vardefineContext[] obj_vardefine() {
			return GetRuleContexts<Obj_vardefineContext>();
		}
		public Obj_vardefineContext obj_vardefine(int i) {
			return GetRuleContext<Obj_vardefineContext>(i);
		}
		public Obj_funcdefineContext[] obj_funcdefine() {
			return GetRuleContexts<Obj_funcdefineContext>();
		}
		public Obj_funcdefineContext obj_funcdefine(int i) {
			return GetRuleContext<Obj_funcdefineContext>(i);
		}
		public Obj_child_definitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obj_child_definitions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterObj_child_definitions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitObj_child_definitions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObj_child_definitions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Obj_child_definitionsContext obj_child_definitions() {
		Obj_child_definitionsContext _localctx = new Obj_child_definitionsContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_obj_child_definitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 418;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				State = 418;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,38,_ctx) ) {
				case 1:
					{
					State = 416; obj_vardefine();
					}
					break;

				case 2:
					{
					State = 417; obj_funcdefine();
					}
					break;
				}
				}
				State = 420;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==LET_SYM );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Obj_vardefineContext : ParserRuleContext {
		public ITerminalNode LET_SYM() { return GetToken(algoParser.LET_SYM, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public ITerminalNode EQUALS() { return GetToken(algoParser.EQUALS, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode ENDLINE() { return GetToken(algoParser.ENDLINE, 0); }
		public Obj_vardefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obj_vardefine; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterObj_vardefine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitObj_vardefine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObj_vardefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Obj_vardefineContext obj_vardefine() {
		Obj_vardefineContext _localctx = new Obj_vardefineContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_obj_vardefine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 422; Match(LET_SYM);
			State = 423; Match(IDENTIFIER);
			State = 424; Match(EQUALS);
			State = 425; expr(0);
			State = 426; Match(ENDLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Obj_funcdefineContext : ParserRuleContext {
		public ITerminalNode LET_SYM() { return GetToken(algoParser.LET_SYM, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(algoParser.IDENTIFIER, 0); }
		public ITerminalNode LBRACKET() { return GetToken(algoParser.LBRACKET, 0); }
		public ITerminalNode RBRACKET() { return GetToken(algoParser.RBRACKET, 0); }
		public ITerminalNode EQUALS() { return GetToken(algoParser.EQUALS, 0); }
		public ITerminalNode LBRACE() { return GetToken(algoParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(algoParser.RBRACE, 0); }
		public Abstract_paramsContext abstract_params() {
			return GetRuleContext<Abstract_paramsContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Obj_funcdefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obj_funcdefine; } }
		public override void EnterRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.EnterObj_funcdefine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IalgoListener typedListener = listener as IalgoListener;
			if (typedListener != null) typedListener.ExitObj_funcdefine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IalgoVisitor<TResult> typedVisitor = visitor as IalgoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObj_funcdefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Obj_funcdefineContext obj_funcdefine() {
		Obj_funcdefineContext _localctx = new Obj_funcdefineContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_obj_funcdefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 428; Match(LET_SYM);
			State = 429; Match(IDENTIFIER);
			State = 430; Match(LBRACKET);
			State = 432;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IDENTIFIER) {
				{
				State = 431; abstract_params();
				}
			}

			State = 434; Match(RBRACKET);
			State = 435; Match(EQUALS);
			State = 436; Match(LBRACE);
			State = 440;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LET_SYM) | (1L << FOR_SYM) | (1L << WHILE_SYM) | (1L << IF_SYM) | (1L << LIB_SYM) | (1L << RETURN_SYM) | (1L << PRINT_SYM) | (1L << DISREGARD_SYM) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 437; statement();
				}
				}
				State = 442;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 443; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 19: return check_sempred((CheckContext)_localctx, predIndex);

		case 22: return expr_sempred((ExprContext)_localctx, predIndex);

		case 24: return term_sempred((TermContext)_localctx, predIndex);

		case 25: return factor_sempred((FactorContext)_localctx, predIndex);
		}
		return true;
	}
	private bool check_sempred(CheckContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 6);

		case 1: return Precpred(_ctx, 5);

		case 2: return Precpred(_ctx, 4);

		case 3: return Precpred(_ctx, 3);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(_ctx, 3);

		case 5: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool term_sempred(TermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(_ctx, 3);

		case 7: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool factor_sempred(FactorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return Precpred(_ctx, 2);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x35\x1C0\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x3\x2\x3\x2\x3\x2\x3\x3\a\x3"+
		"Q\n\x3\f\x3\xE\x3T\v\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4"+
		"]\n\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4\x66\n\x4\x5\x4"+
		"h\n\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x5\x6q\n\x6\x3\x6\x3"+
		"\x6\x3\x6\x5\x6v\n\x6\x3\a\x3\a\x5\az\n\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3"+
		"\b\x3\b\x5\b\x83\n\b\x3\t\x3\t\x5\t\x87\n\t\x3\t\x3\t\x5\t\x8B\n\t\x3"+
		"\t\x3\t\x3\n\x3\n\x3\n\x3\n\x5\n\x93\n\n\x3\n\x3\n\x3\n\x3\n\a\n\x99\n"+
		"\n\f\n\xE\n\x9C\v\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\f"+
		"\x3\f\x3\f\x3\f\a\f\xAB\n\f\f\f\xE\f\xAE\v\f\x3\f\x3\f\x3\r\x3\r\x3\r"+
		"\x3\r\x3\r\x3\r\a\r\xB8\n\r\f\r\xE\r\xBB\v\r\x3\r\x3\r\x3\xE\x3\xE\x3"+
		"\xE\x3\xE\x3\xE\x3\xE\a\xE\xC5\n\xE\f\xE\xE\xE\xC8\v\xE\x3\xE\x3\xE\a"+
		"\xE\xCC\n\xE\f\xE\xE\xE\xCF\v\xE\x3\xE\x5\xE\xD2\n\xE\x3\xF\x3\xF\x3\xF"+
		"\x5\xF\xD7\n\xF\x3\x10\x3\x10\x3\x10\x3\x10\a\x10\xDD\n\x10\f\x10\xE\x10"+
		"\xE0\v\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3"+
		"\x11\a\x11\xEB\n\x11\f\x11\xE\x11\xEE\v\x11\x3\x11\x3\x11\x3\x12\x3\x12"+
		"\x3\x12\a\x12\xF5\n\x12\f\x12\xE\x12\xF8\v\x12\x3\x12\x3\x12\x3\x13\x3"+
		"\x13\x3\x13\a\x13\xFF\n\x13\f\x13\xE\x13\x102\v\x13\x3\x13\x3\x13\x3\x14"+
		"\x3\x14\a\x14\x108\n\x14\f\x14\xE\x14\x10B\v\x14\x3\x14\x3\x14\x3\x15"+
		"\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\x115\n\x15\x3\x15\x3\x15\x3"+
		"\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\a"+
		"\x15\x123\n\x15\f\x15\xE\x15\x126\v\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3"+
		"\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3"+
		"\x16\x3\x16\x3\x16\x5\x16\x139\n\x16\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18"+
		"\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\a\x18\x146\n\x18\f\x18\xE\x18"+
		"\x149\v\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3"+
		"\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\a\x1A\x158\n\x1A\f\x1A\xE\x1A\x15B\v"+
		"\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\a\x1B\x163\n\x1B\f\x1B"+
		"\xE\x1B\x166\v\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x16D\n\x1C"+
		"\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F"+
		"\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x17F\n\x1F\x3 \x3 \x6"+
		" \x183\n \r \xE \x184\x3 \x3 \x3!\x3!\x3!\x3!\a!\x18D\n!\f!\xE!\x190\v"+
		"!\x3!\x5!\x193\n!\x3!\x3!\x3\"\x3\"\x3\"\x3\"\x3\"\x3#\x3#\x3#\x5#\x19F"+
		"\n#\x3#\x3#\x3$\x3$\x6$\x1A5\n$\r$\xE$\x1A6\x3%\x3%\x3%\x3%\x3%\x3%\x3"+
		"&\x3&\x3&\x3&\x5&\x1B3\n&\x3&\x3&\x3&\x3&\a&\x1B9\n&\f&\xE&\x1BC\v&\x3"+
		"&\x3&\x3&\x2\x2\x6(.\x32\x34\'\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2"+
		"\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2"+
		"&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2"+
		"\x42\x2\x44\x2\x46\x2H\x2J\x2\x2\x5\x4\x2*+-\x31\x3\x2 $\x3\x2&)\x1DC"+
		"\x2L\x3\x2\x2\x2\x4R\x3\x2\x2\x2\x6g\x3\x2\x2\x2\bi\x3\x2\x2\x2\np\x3"+
		"\x2\x2\x2\fy\x3\x2\x2\x2\xE~\x3\x2\x2\x2\x10\x86\x3\x2\x2\x2\x12\x8E\x3"+
		"\x2\x2\x2\x14\x9F\x3\x2\x2\x2\x16\xA2\x3\x2\x2\x2\x18\xB1\x3\x2\x2\x2"+
		"\x1A\xBE\x3\x2\x2\x2\x1C\xD3\x3\x2\x2\x2\x1E\xD8\x3\x2\x2\x2 \xE3\x3\x2"+
		"\x2\x2\"\xF1\x3\x2\x2\x2$\x100\x3\x2\x2\x2&\x109\x3\x2\x2\x2(\x114\x3"+
		"\x2\x2\x2*\x138\x3\x2\x2\x2,\x13A\x3\x2\x2\x2.\x13C\x3\x2\x2\x2\x30\x14A"+
		"\x3\x2\x2\x2\x32\x14E\x3\x2\x2\x2\x34\x15C\x3\x2\x2\x2\x36\x16C\x3\x2"+
		"\x2\x2\x38\x16E\x3\x2\x2\x2:\x170\x3\x2\x2\x2<\x17E\x3\x2\x2\x2>\x182"+
		"\x3\x2\x2\x2@\x188\x3\x2\x2\x2\x42\x196\x3\x2\x2\x2\x44\x19B\x3\x2\x2"+
		"\x2\x46\x1A4\x3\x2\x2\x2H\x1A8\x3\x2\x2\x2J\x1AE\x3\x2\x2\x2LM\x5\x4\x3"+
		"\x2MN\a\x2\x2\x3N\x3\x3\x2\x2\x2OQ\x5\x6\x4\x2PO\x3\x2\x2\x2QT\x3\x2\x2"+
		"\x2RP\x3\x2\x2\x2RS\x3\x2\x2\x2S\x5\x3\x2\x2\x2TR\x3\x2\x2\x2U]\x5\b\x5"+
		"\x2V]\x5\x10\t\x2W]\x5\x1C\xF\x2X]\x5\n\x6\x2Y]\x5\f\a\x2Z]\x5\x14\v\x2"+
		"[]\x5\xE\b\x2\\U\x3\x2\x2\x2\\V\x3\x2\x2\x2\\W\x3\x2\x2\x2\\X\x3\x2\x2"+
		"\x2\\Y\x3\x2\x2\x2\\Z\x3\x2\x2\x2\\[\x3\x2\x2\x2]^\x3\x2\x2\x2^_\a\x17"+
		"\x2\x2_h\x3\x2\x2\x2`\x66\x5\x16\f\x2\x61\x66\x5\x12\n\x2\x62\x66\x5\x1A"+
		"\xE\x2\x63\x66\x5\x1E\x10\x2\x64\x66\x5\x18\r\x2\x65`\x3\x2\x2\x2\x65"+
		"\x61\x3\x2\x2\x2\x65\x62\x3\x2\x2\x2\x65\x63\x3\x2\x2\x2\x65\x64\x3\x2"+
		"\x2\x2\x66h\x3\x2\x2\x2g\\\x3\x2\x2\x2g\x65\x3\x2\x2\x2h\a\x3\x2\x2\x2"+
		"ij\a\t\x2\x2jk\a\x32\x2\x2kl\a\x18\x2\x2lm\x5.\x18\x2m\t\x3\x2\x2\x2n"+
		"q\a\x32\x2\x2oq\x5> \x2pn\x3\x2\x2\x2po\x3\x2\x2\x2qr\x3\x2\x2\x2rs\a"+
		"\x18\x2\x2su\x5.\x18\x2tv\x5\x30\x19\x2ut\x3\x2\x2\x2uv\x3\x2\x2\x2v\v"+
		"\x3\x2\x2\x2wz\a\x32\x2\x2xz\x5> \x2yw\x3\x2\x2\x2yx\x3\x2\x2\x2z{\x3"+
		"\x2\x2\x2{|\x5:\x1E\x2|}\x5.\x18\x2}\r\x3\x2\x2\x2~\x82\a\x16\x2\x2\x7F"+
		"\x83\a\x32\x2\x2\x80\x83\x5> \x2\x81\x83\a\"\x2\x2\x82\x7F\x3\x2\x2\x2"+
		"\x82\x80\x3\x2\x2\x2\x82\x81\x3\x2\x2\x2\x83\xF\x3\x2\x2\x2\x84\x87\a"+
		"\x32\x2\x2\x85\x87\x5> \x2\x86\x84\x3\x2\x2\x2\x86\x85\x3\x2\x2\x2\x87"+
		"\x88\x3\x2\x2\x2\x88\x8A\a\x1E\x2\x2\x89\x8B\x5$\x13\x2\x8A\x89\x3\x2"+
		"\x2\x2\x8A\x8B\x3\x2\x2\x2\x8B\x8C\x3\x2\x2\x2\x8C\x8D\a\x1F\x2\x2\x8D"+
		"\x11\x3\x2\x2\x2\x8E\x8F\a\t\x2\x2\x8F\x90\a\x32\x2\x2\x90\x92\a\x1E\x2"+
		"\x2\x91\x93\x5&\x14\x2\x92\x91\x3\x2\x2\x2\x92\x93\x3\x2\x2\x2\x93\x94"+
		"\x3\x2\x2\x2\x94\x95\a\x1F\x2\x2\x95\x96\a\x18\x2\x2\x96\x9A\a\x1A\x2"+
		"\x2\x97\x99\x5\x6\x4\x2\x98\x97\x3\x2\x2\x2\x99\x9C\x3\x2\x2\x2\x9A\x98"+
		"\x3\x2\x2\x2\x9A\x9B\x3\x2\x2\x2\x9B\x9D\x3\x2\x2\x2\x9C\x9A\x3\x2\x2"+
		"\x2\x9D\x9E\a\x1B\x2\x2\x9E\x13\x3\x2\x2\x2\x9F\xA0\a\x14\x2\x2\xA0\xA1"+
		"\x5.\x18\x2\xA1\x15\x3\x2\x2\x2\xA2\xA3\a\n\x2\x2\xA3\xA4\a\x1E\x2\x2"+
		"\xA4\xA5\a\x32\x2\x2\xA5\xA6\a\f\x2\x2\xA6\xA7\x5<\x1F\x2\xA7\xA8\a\x1F"+
		"\x2\x2\xA8\xAC\a\x1A\x2\x2\xA9\xAB\x5\x6\x4\x2\xAA\xA9\x3\x2\x2\x2\xAB"+
		"\xAE\x3\x2\x2\x2\xAC\xAA\x3\x2\x2\x2\xAC\xAD\x3\x2\x2\x2\xAD\xAF\x3\x2"+
		"\x2\x2\xAE\xAC\x3\x2\x2\x2\xAF\xB0\a\x1B\x2\x2\xB0\x17\x3\x2\x2\x2\xB1"+
		"\xB2\a\v\x2\x2\xB2\xB3\a\x1E\x2\x2\xB3\xB4\x5(\x15\x2\xB4\xB5\a\x1F\x2"+
		"\x2\xB5\xB9\a\x1A\x2\x2\xB6\xB8\x5\x6\x4\x2\xB7\xB6\x3\x2\x2\x2\xB8\xBB"+
		"\x3\x2\x2\x2\xB9\xB7\x3\x2\x2\x2\xB9\xBA\x3\x2\x2\x2\xBA\xBC\x3\x2\x2"+
		"\x2\xBB\xB9\x3\x2\x2\x2\xBC\xBD\a\x1B\x2\x2\xBD\x19\x3\x2\x2\x2\xBE\xBF"+
		"\a\r\x2\x2\xBF\xC0\a\x1E\x2\x2\xC0\xC1\x5(\x15\x2\xC1\xC2\a\x1F\x2\x2"+
		"\xC2\xC6\a\x1A\x2\x2\xC3\xC5\x5\x6\x4\x2\xC4\xC3\x3\x2\x2\x2\xC5\xC8\x3"+
		"\x2\x2\x2\xC6\xC4\x3\x2\x2\x2\xC6\xC7\x3\x2\x2\x2\xC7\xC9\x3\x2\x2\x2"+
		"\xC8\xC6\x3\x2\x2\x2\xC9\xCD\a\x1B\x2\x2\xCA\xCC\x5 \x11\x2\xCB\xCA\x3"+
		"\x2\x2\x2\xCC\xCF\x3\x2\x2\x2\xCD\xCB\x3\x2\x2\x2\xCD\xCE\x3\x2\x2\x2"+
		"\xCE\xD1\x3\x2\x2\x2\xCF\xCD\x3\x2\x2\x2\xD0\xD2\x5\"\x12\x2\xD1\xD0\x3"+
		"\x2\x2\x2\xD1\xD2\x3\x2\x2\x2\xD2\x1B\x3\x2\x2\x2\xD3\xD4\a\x15\x2\x2"+
		"\xD4\xD6\x5.\x18\x2\xD5\xD7\x5\x30\x19\x2\xD6\xD5\x3\x2\x2\x2\xD6\xD7"+
		"\x3\x2\x2\x2\xD7\x1D\x3\x2\x2\x2\xD8\xD9\a\xF\x2\x2\xD9\xDA\a\x32\x2\x2"+
		"\xDA\xDE\a\x1A\x2\x2\xDB\xDD\x5\x6\x4\x2\xDC\xDB\x3\x2\x2\x2\xDD\xE0\x3"+
		"\x2\x2\x2\xDE\xDC\x3\x2\x2\x2\xDE\xDF\x3\x2\x2\x2\xDF\xE1\x3\x2\x2\x2"+
		"\xE0\xDE\x3\x2\x2\x2\xE1\xE2\a\x1B\x2\x2\xE2\x1F\x3\x2\x2\x2\xE3\xE4\a"+
		"\x12\x2\x2\xE4\xE5\a\r\x2\x2\xE5\xE6\a\x1E\x2\x2\xE6\xE7\x5(\x15\x2\xE7"+
		"\xE8\a\x1F\x2\x2\xE8\xEC\a\x1A\x2\x2\xE9\xEB\x5\x6\x4\x2\xEA\xE9\x3\x2"+
		"\x2\x2\xEB\xEE\x3\x2\x2\x2\xEC\xEA\x3\x2\x2\x2\xEC\xED\x3\x2\x2\x2\xED"+
		"\xEF\x3\x2\x2\x2\xEE\xEC\x3\x2\x2\x2\xEF\xF0\a\x1B\x2\x2\xF0!\x3\x2\x2"+
		"\x2\xF1\xF2\a\x12\x2\x2\xF2\xF6\a\x1A\x2\x2\xF3\xF5\x5\x6\x4\x2\xF4\xF3"+
		"\x3\x2\x2\x2\xF5\xF8\x3\x2\x2\x2\xF6\xF4\x3\x2\x2\x2\xF6\xF7\x3\x2\x2"+
		"\x2\xF7\xF9\x3\x2\x2\x2\xF8\xF6\x3\x2\x2\x2\xF9\xFA\a\x1B\x2\x2\xFA#\x3"+
		"\x2\x2\x2\xFB\xFC\x5.\x18\x2\xFC\xFD\a\x19\x2\x2\xFD\xFF\x3\x2\x2\x2\xFE"+
		"\xFB\x3\x2\x2\x2\xFF\x102\x3\x2\x2\x2\x100\xFE\x3\x2\x2\x2\x100\x101\x3"+
		"\x2\x2\x2\x101\x103\x3\x2\x2\x2\x102\x100\x3\x2\x2\x2\x103\x104\x5.\x18"+
		"\x2\x104%\x3\x2\x2\x2\x105\x106\a\x32\x2\x2\x106\x108\a\x19\x2\x2\x107"+
		"\x105\x3\x2\x2\x2\x108\x10B\x3\x2\x2\x2\x109\x107\x3\x2\x2\x2\x109\x10A"+
		"\x3\x2\x2\x2\x10A\x10C\x3\x2\x2\x2\x10B\x109\x3\x2\x2\x2\x10C\x10D\a\x32"+
		"\x2\x2\x10D\'\x3\x2\x2\x2\x10E\x10F\b\x15\x1\x2\x10F\x110\a\x1E\x2\x2"+
		"\x110\x111\x5(\x15\x2\x111\x112\a\x1F\x2\x2\x112\x115\x3\x2\x2\x2\x113"+
		"\x115\x5*\x16\x2\x114\x10E\x3\x2\x2\x2\x114\x113\x3\x2\x2\x2\x115\x124"+
		"\x3\x2\x2\x2\x116\x117\f\b\x2\x2\x117\x118\a*\x2\x2\x118\x123\x5*\x16"+
		"\x2\x119\x11A\f\a\x2\x2\x11A\x11B\a+\x2\x2\x11B\x123\x5*\x16\x2\x11C\x11D"+
		"\f\x6\x2\x2\x11D\x11E\a-\x2\x2\x11E\x123\x5*\x16\x2\x11F\x120\f\x5\x2"+
		"\x2\x120\x121\a,\x2\x2\x121\x123\x5*\x16\x2\x122\x116\x3\x2\x2\x2\x122"+
		"\x119\x3\x2\x2\x2\x122\x11C\x3\x2\x2\x2\x122\x11F\x3\x2\x2\x2\x123\x126"+
		"\x3\x2\x2\x2\x124\x122\x3\x2\x2\x2\x124\x125\x3\x2\x2\x2\x125)\x3\x2\x2"+
		"\x2\x126\x124\x3\x2\x2\x2\x127\x128\x5.\x18\x2\x128\x129\a.\x2\x2\x129"+
		"\x12A\x5.\x18\x2\x12A\x139\x3\x2\x2\x2\x12B\x12C\x5.\x18\x2\x12C\x12D"+
		"\a/\x2\x2\x12D\x12E\x5.\x18\x2\x12E\x139\x3\x2\x2\x2\x12F\x130\x5.\x18"+
		"\x2\x130\x131\a\x30\x2\x2\x131\x132\x5.\x18\x2\x132\x139\x3\x2\x2\x2\x133"+
		"\x134\x5.\x18\x2\x134\x135\a\x31\x2\x2\x135\x136\x5.\x18\x2\x136\x139"+
		"\x3\x2\x2\x2\x137\x139\x5.\x18\x2\x138\x127\x3\x2\x2\x2\x138\x12B\x3\x2"+
		"\x2\x2\x138\x12F\x3\x2\x2\x2\x138\x133\x3\x2\x2\x2\x138\x137\x3\x2\x2"+
		"\x2\x139+\x3\x2\x2\x2\x13A\x13B\t\x2\x2\x2\x13B-\x3\x2\x2\x2\x13C\x13D"+
		"\b\x18\x1\x2\x13D\x13E\x5\x32\x1A\x2\x13E\x147\x3\x2\x2\x2\x13F\x140\f"+
		"\x5\x2\x2\x140\x141\a \x2\x2\x141\x146\x5\x32\x1A\x2\x142\x143\f\x4\x2"+
		"\x2\x143\x144\a!\x2\x2\x144\x146\x5\x32\x1A\x2\x145\x13F\x3\x2\x2\x2\x145"+
		"\x142\x3\x2\x2\x2\x146\x149\x3\x2\x2\x2\x147\x145\x3\x2\x2\x2\x147\x148"+
		"\x3\x2\x2\x2\x148/\x3\x2\x2\x2\x149\x147\x3\x2\x2\x2\x14A\x14B\a\xE\x2"+
		"\x2\x14B\x14C\x5.\x18\x2\x14C\x14D\a\x10\x2\x2\x14D\x31\x3\x2\x2\x2\x14E"+
		"\x14F\b\x1A\x1\x2\x14F\x150\x5\x34\x1B\x2\x150\x159\x3\x2\x2\x2\x151\x152"+
		"\f\x5\x2\x2\x152\x153\a\"\x2\x2\x153\x158\x5\x34\x1B\x2\x154\x155\f\x4"+
		"\x2\x2\x155\x156\a#\x2\x2\x156\x158\x5\x34\x1B\x2\x157\x151\x3\x2\x2\x2"+
		"\x157\x154\x3\x2\x2\x2\x158\x15B\x3\x2\x2\x2\x159\x157\x3\x2\x2\x2\x159"+
		"\x15A\x3\x2\x2\x2\x15A\x33\x3\x2\x2\x2\x15B\x159\x3\x2\x2\x2\x15C\x15D"+
		"\b\x1B\x1\x2\x15D\x15E\x5\x36\x1C\x2\x15E\x164\x3\x2\x2\x2\x15F\x160\f"+
		"\x4\x2\x2\x160\x161\a$\x2\x2\x161\x163\x5\x36\x1C\x2\x162\x15F\x3\x2\x2"+
		"\x2\x163\x166\x3\x2\x2\x2\x164\x162\x3\x2\x2\x2\x164\x165\x3\x2\x2\x2"+
		"\x165\x35\x3\x2\x2\x2\x166\x164\x3\x2\x2\x2\x167\x16D\x5<\x1F\x2\x168"+
		"\x169\a\x1E\x2\x2\x169\x16A\x5.\x18\x2\x16A\x16B\a\x1F\x2\x2\x16B\x16D"+
		"\x3\x2\x2\x2\x16C\x167\x3\x2\x2\x2\x16C\x168\x3\x2\x2\x2\x16D\x37\x3\x2"+
		"\x2\x2\x16E\x16F\t\x3\x2\x2\x16F\x39\x3\x2\x2\x2\x170\x171\t\x4\x2\x2"+
		"\x171;\x3\x2\x2\x2\x172\x17F\x5\x10\t\x2\x173\x17F\x5> \x2\x174\x17F\a"+
		"\x32\x2\x2\x175\x17F\a\x3\x2\x2\x176\x17F\a\x4\x2\x2\x177\x17F\a\x5\x2"+
		"\x2\x178\x17F\a\x6\x2\x2\x179\x17F\a\a\x2\x2\x17A\x17F\a\b\x2\x2\x17B"+
		"\x17F\x5@!\x2\x17C\x17F\x5\x42\"\x2\x17D\x17F\x5\x44#\x2\x17E\x172\x3"+
		"\x2\x2\x2\x17E\x173\x3\x2\x2\x2\x17E\x174\x3\x2\x2\x2\x17E\x175\x3\x2"+
		"\x2\x2\x17E\x176\x3\x2\x2\x2\x17E\x177\x3\x2\x2\x2\x17E\x178\x3\x2\x2"+
		"\x2\x17E\x179\x3\x2\x2\x2\x17E\x17A\x3\x2\x2\x2\x17E\x17B\x3\x2\x2\x2"+
		"\x17E\x17C\x3\x2\x2\x2\x17E\x17D\x3\x2\x2\x2\x17F=\x3\x2\x2\x2\x180\x181"+
		"\a\x32\x2\x2\x181\x183\a%\x2\x2\x182\x180\x3\x2\x2\x2\x183\x184\x3\x2"+
		"\x2\x2\x184\x182\x3\x2\x2\x2\x184\x185\x3\x2\x2\x2\x185\x186\x3\x2\x2"+
		"\x2\x186\x187\a\x32\x2\x2\x187?\x3\x2\x2\x2\x188\x192\a\x1C\x2\x2\x189"+
		"\x18A\x5<\x1F\x2\x18A\x18B\a\x19\x2\x2\x18B\x18D\x3\x2\x2\x2\x18C\x189"+
		"\x3\x2\x2\x2\x18D\x190\x3\x2\x2\x2\x18E\x18C\x3\x2\x2\x2\x18E\x18F\x3"+
		"\x2\x2\x2\x18F\x191\x3\x2\x2\x2\x190\x18E\x3\x2\x2\x2\x191\x193\x5<\x1F"+
		"\x2\x192\x18E\x3\x2\x2\x2\x192\x193\x3\x2\x2\x2\x193\x194\x3\x2\x2\x2"+
		"\x194\x195\a\x1D\x2\x2\x195\x41\x3\x2\x2\x2\x196\x197\a\x32\x2\x2\x197"+
		"\x198\a\x1C\x2\x2\x198\x199\x5$\x13\x2\x199\x19A\a\x1D\x2\x2\x19A\x43"+
		"\x3\x2\x2\x2\x19B\x19C\a\x11\x2\x2\x19C\x19E\a\x1A\x2\x2\x19D\x19F\x5"+
		"\x46$\x2\x19E\x19D\x3\x2\x2\x2\x19E\x19F\x3\x2\x2\x2\x19F\x1A0\x3\x2\x2"+
		"\x2\x1A0\x1A1\a\x1B\x2\x2\x1A1\x45\x3\x2\x2\x2\x1A2\x1A5\x5H%\x2\x1A3"+
		"\x1A5\x5J&\x2\x1A4\x1A2\x3\x2\x2\x2\x1A4\x1A3\x3\x2\x2\x2\x1A5\x1A6\x3"+
		"\x2\x2\x2\x1A6\x1A4\x3\x2\x2\x2\x1A6\x1A7\x3\x2\x2\x2\x1A7G\x3\x2\x2\x2"+
		"\x1A8\x1A9\a\t\x2\x2\x1A9\x1AA\a\x32\x2\x2\x1AA\x1AB\a\x18\x2\x2\x1AB"+
		"\x1AC\x5.\x18\x2\x1AC\x1AD\a\x17\x2\x2\x1ADI\x3\x2\x2\x2\x1AE\x1AF\a\t"+
		"\x2\x2\x1AF\x1B0\a\x32\x2\x2\x1B0\x1B2\a\x1E\x2\x2\x1B1\x1B3\x5&\x14\x2"+
		"\x1B2\x1B1\x3\x2\x2\x2\x1B2\x1B3\x3\x2\x2\x2\x1B3\x1B4\x3\x2\x2\x2\x1B4"+
		"\x1B5\a\x1F\x2\x2\x1B5\x1B6\a\x18\x2\x2\x1B6\x1BA\a\x1A\x2\x2\x1B7\x1B9"+
		"\x5\x6\x4\x2\x1B8\x1B7\x3\x2\x2\x2\x1B9\x1BC\x3\x2\x2\x2\x1BA\x1B8\x3"+
		"\x2\x2\x2\x1BA\x1BB\x3\x2\x2\x2\x1BB\x1BD\x3\x2\x2\x2\x1BC\x1BA\x3\x2"+
		"\x2\x2\x1BD\x1BE\a\x1B\x2\x2\x1BEK\x3\x2\x2\x2,R\\\x65gpuy\x82\x86\x8A"+
		"\x92\x9A\xAC\xB9\xC6\xCD\xD1\xD6\xDE\xEC\xF6\x100\x109\x114\x122\x124"+
		"\x138\x145\x147\x157\x159\x164\x16C\x17E\x184\x18E\x192\x19E\x1A4\x1A6"+
		"\x1B2\x1BA";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Algo
